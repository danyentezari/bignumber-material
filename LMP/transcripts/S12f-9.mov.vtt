WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.200 --> 00:00:02.000
now, let me return to the

1
00:00:03.700 --> 00:00:05.000
notebook. I think it's done.

2
00:00:07.600 --> 00:00:08.900
And if we look at our model.

3
00:00:09.600 --> 00:00:13.000
After 10 epochs, it's accuracy has

4
00:00:12.300 --> 00:00:16.500
 gone from 36% or almost 37%

5
00:00:15.500 --> 00:00:19.100
 to 75% accuracy.

6
00:00:20.300 --> 00:00:21.300
It's loss.

7
00:00:22.500 --> 00:00:25.900
It's loss is well, not very good. It's

8
00:00:25.900 --> 00:00:27.400
 not even zero.

9
00:00:29.200 --> 00:00:32.700
But we could have in order to improve the loss function we could increase the

10
00:00:32.700 --> 00:00:34.700
 number of epochs but even then.

11
00:00:35.600 --> 00:00:38.400
Our data is a problematic because it's

12
00:00:38.400 --> 00:00:41.300
 very small and our neural network

13
00:00:41.300 --> 00:00:44.100
 is quite simple. Anyway, the accuracy is not

14
00:00:44.100 --> 00:00:45.800
 that so 75% of the time.

15
00:00:47.500 --> 00:00:48.400
we should

16
00:00:50.100 --> 00:00:53.300
Not 75% about 75% accuracy. We should get the

17
00:00:53.300 --> 00:00:56.100
 picture that the model is looking. Yeah. So, let's

18
00:00:56.100 --> 00:00:57.900
 see how this happens then I'll return and talk about

19
00:00:59.600 --> 00:01:01.400
sigmoid and cross entropy

20
00:01:02.200 --> 00:01:04.500
Well, we only have 15 minutes left. Okay, let me do this quickly.

21
00:01:06.300 --> 00:01:07.800
I am going to upload a picture.

22
00:01:08.900 --> 00:01:10.500
from the c410 database

23
00:01:13.600 --> 00:01:14.000
Okay.

24
00:01:15.900 --> 00:01:16.800
I will use.

25
00:01:18.900 --> 00:01:20.300
cast to load the image

26
00:01:22.300 --> 00:01:23.100
So I'm going to go.

27
00:01:24.400 --> 00:01:25.200
Keras

28
00:01:26.200 --> 00:01:29.100
I'll leave this. I'll leave this out for now just for the sake

29
00:01:29.100 --> 00:01:31.400
 of time, but basically I was only going to plot.

30
00:01:32.500 --> 00:01:35.000
The metrics actually, I think

31
00:01:35.200 --> 00:01:38.200
 I have the code. I can just copy paste it. So let me copy paste it.

32
00:01:41.200 --> 00:01:42.000
test

33
00:01:43.600 --> 00:01:43.900
images

34
00:01:45.700 --> 00:01:47.000
test I'll be yes.

35
00:01:51.900 --> 00:01:53.600
and the metrics we want this to be

36
00:02:00.200 --> 00:02:03.000
I was supposed to assign to this a variable.

37
00:02:04.400 --> 00:02:05.900
to this mistake

38
00:02:06.700 --> 00:02:07.100
No problem.

39
00:02:08.600 --> 00:02:11.900
I'll share this notebook with you you can run it but what

40
00:02:11.900 --> 00:02:14.000
 we need to what we need this, you know the plot it

41
00:02:14.600 --> 00:02:17.400
 but I won't plot this right now. I'm just going to comment it out and I'm just

42
00:02:17.400 --> 00:02:19.500
 gonna show you sample. Classification.

43
00:02:22.300 --> 00:02:23.200
so I'm going to

44
00:02:26.200 --> 00:02:27.100
Load the image.

45
00:02:28.300 --> 00:02:29.200
sample image

46
00:02:33.100 --> 00:02:34.700
and I will use the

47
00:02:36.700 --> 00:02:39.600
load image function from

48
00:02:39.600 --> 00:02:40.400
 Keras

49
00:02:41.200 --> 00:02:43.400
to take this cat picture

50
00:02:45.400 --> 00:02:46.600
Which is from C4.

51
00:02:47.600 --> 00:02:49.000
This is a PNG.

52
00:02:52.200 --> 00:02:55.300
And I need to specify its Dimensions which of course is

53
00:02:55.300 --> 00:02:56.700
 32 by 32.

54
00:03:01.200 --> 00:03:01.700
and then

55
00:03:03.600 --> 00:03:07.400
I need to convert it to an array and then normalize

56
00:03:06.400 --> 00:03:07.600
 it.

57
00:03:09.500 --> 00:03:11.600
So I'm going to go to sample image.

58
00:03:13.800 --> 00:03:17.000
image dot img2 array

59
00:03:18.200 --> 00:03:19.300
into a numpy array

60
00:03:20.000 --> 00:03:20.300
test

61
00:03:22.200 --> 00:03:23.300
or sample image

62
00:03:26.400 --> 00:03:26.900
and then

63
00:03:30.200 --> 00:03:31.100
sample image

64
00:03:33.200 --> 00:03:33.900
equals

65
00:03:34.700 --> 00:03:35.700
sample image

66
00:03:36.400 --> 00:03:37.300
dot reshape

67
00:03:38.900 --> 00:03:39.500
so we have

68
00:03:40.600 --> 00:03:42.100
one sample

69
00:03:43.200 --> 00:03:46.100
That is 32 by 32 or 3 color channels.

70
00:03:47.800 --> 00:03:49.900
And then we want to normalize. So this is normalize.

71
00:03:50.500 --> 00:03:53.400
So what I mean by normalized so we have three color channels

72
00:03:53.400 --> 00:03:56.400
 in each color channel the brightest pixel. So

73
00:03:56.400 --> 00:03:59.600
 for example, if it's the red channel the most red pixel

74
00:03:59.600 --> 00:04:00.900
 will have value 255.

75
00:04:02.200 --> 00:04:05.300
And least red pixel would be

76
00:04:05.300 --> 00:04:06.100
 zero.

77
00:04:07.200 --> 00:04:08.400
We want to normalize it because

78
00:04:11.300 --> 00:04:12.800
the Machinery models don't understand.

79
00:04:14.600 --> 00:04:15.600
What these values are?

80
00:04:16.700 --> 00:04:19.500
And moreover if you remember the slides that

81
00:04:19.500 --> 00:04:22.500
 we looked at when we I was talking about the Matrix operation

82
00:04:22.500 --> 00:04:26.100
 of neural networks. It will throw off our arithmetic.

83
00:04:27.100 --> 00:04:30.000
So to normalize it well we do is we take this sample image.

84
00:04:31.500 --> 00:04:33.100
And since it's a numpy object.

85
00:04:34.200 --> 00:04:36.800
We can divide by 255.

86
00:04:38.500 --> 00:04:41.400
So for number is 255 if it's like in the red Channel It's

87
00:04:41.400 --> 00:04:42.700
 Perfectly red. It will be one.

88
00:04:44.200 --> 00:04:46.400
Otherwise it will be 0 so I will not run this.

89
00:04:47.100 --> 00:04:47.600
and

90
00:04:48.900 --> 00:04:50.600
this is supposed to be talking size.

91
00:04:51.800 --> 00:04:54.300
Okay, so if I show you what the sample

92
00:04:54.300 --> 00:04:55.300
 images you will see it's

93
00:04:58.300 --> 00:04:59.600
a multimeter basically

94
00:05:01.700 --> 00:05:04.500
and all about this is what we mean by normalized. So this

95
00:05:04.500 --> 00:05:07.200
 is 70 to 77% of the pixel.

96
00:05:08.400 --> 00:05:09.200
brightness

97
00:05:10.600 --> 00:05:12.600
okay, then what I'm gonna do is I'm going to use

98
00:05:15.100 --> 00:05:16.600
the predict method so I'm gonna go.

99
00:05:18.500 --> 00:05:19.600
predicted

100
00:05:21.100 --> 00:05:21.500
class

101
00:05:22.600 --> 00:05:23.100
index

102
00:05:25.700 --> 00:05:26.700
will be equal to model.

103
00:05:27.700 --> 00:05:29.400
dot predict

104
00:05:34.700 --> 00:05:35.500
you see we have a distribution.

105
00:05:37.300 --> 00:05:37.600
Which means?

106
00:05:39.900 --> 00:05:40.800
This is the shape.

107
00:05:41.600 --> 00:05:42.600
That the model has predicted.

108
00:05:44.200 --> 00:05:47.400
So remember we said that a machine learning every thing whether it's a

109
00:05:47.400 --> 00:05:49.800
 property or a picture or sound bite.

110
00:05:50.600 --> 00:05:53.300
Will be sorry associated with the shape. This is the shape

111
00:05:53.300 --> 00:05:53.700
 of the data.

112
00:05:54.500 --> 00:05:55.500
Now what I need to do?

113
00:05:59.800 --> 00:06:01.400
Is use the right code?

114
00:06:05.200 --> 00:06:08.100
Now to understand what this is we need to talk about.

115
00:06:09.800 --> 00:06:10.200
the

116
00:06:13.600 --> 00:06:16.400
the sigmoid or I keep seeing sigmoid here.

117
00:06:16.400 --> 00:06:18.300
 We use a soft Max function.

118
00:06:19.100 --> 00:06:20.300
We talk about softmax.

119
00:06:21.500 --> 00:06:24.000
And then we will talk about the cross entropy.
