WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.200 --> 00:00:03.300
So here we have numpy imported which means we can

1
00:00:03.300 --> 00:00:03.400
 use.

2
00:00:05.200 --> 00:00:05.500
We can work with.

3
00:00:07.200 --> 00:00:10.200
A vectors and multi-dimensional arrays. So right now we're looking

4
00:00:10.200 --> 00:00:14.000
 we will look at the NP dot array. There's something called NP in

5
00:00:13.300 --> 00:00:14.400
 the array.

6
00:00:15.300 --> 00:00:19.400
The numpy libraries quite comprehensive.

7
00:00:18.400 --> 00:00:21.600
 So we're going to go through

8
00:00:21.600 --> 00:00:23.600
 it go through its different features.

9
00:00:26.200 --> 00:00:26.500
You know.

10
00:00:27.400 --> 00:00:28.300
and in each session

11
00:00:29.300 --> 00:00:32.200
So here it says number one create three vectors.

12
00:00:34.400 --> 00:00:35.500
over RN

13
00:00:37.400 --> 00:00:38.600
where n is equal to 5.

14
00:00:40.800 --> 00:00:42.400
so 5 dimensional vectors

15
00:00:44.200 --> 00:00:47.000
And declare these with v sub 1 V sub two V sub 3.

16
00:00:48.100 --> 00:00:51.200
So what would V sub 1 look like it would have V sub 1?

17
00:00:52.300 --> 00:00:56.000
And this would be equal to I'm just going to put any five networks.

18
00:00:55.100 --> 00:00:56.800
 I'm going to go one two.

19
00:00:58.200 --> 00:00:59.100
three four five

20
00:01:01.500 --> 00:01:03.300
okay, so this

21
00:01:04.700 --> 00:01:07.600
These are all real numbers. Remember

22
00:01:07.600 --> 00:01:11.500
 the set of natural numbers are subset

23
00:01:10.500 --> 00:01:12.700
 of the set of real numbers.

24
00:01:13.600 --> 00:01:14.500
So these are all.

25
00:01:15.600 --> 00:01:17.700
Well, that's that's an example of one vector.

26
00:01:20.100 --> 00:01:20.900
over RN

27
00:01:21.600 --> 00:01:23.200
and then V2 could be.

28
00:01:24.400 --> 00:01:25.300
Seven eight nine.

29
00:01:26.800 --> 00:01:29.300
10 7 8 9 10 there's going

30
00:01:29.300 --> 00:01:32.300
 up any ground increments of one no particular reason for me to use

31
00:01:32.300 --> 00:01:32.900
 these numbers just

32
00:01:33.600 --> 00:01:35.000
Any random number will do.

33
00:01:36.300 --> 00:01:37.200
And then we have V3.

34
00:01:38.700 --> 00:01:40.000
so 12 13

35
00:01:41.100 --> 00:01:41.300
14

36
00:01:43.100 --> 00:01:43.500
15 16

37
00:01:44.400 --> 00:01:44.800
There we go.

38
00:01:47.200 --> 00:01:48.200
So that's how we create.

39
00:01:49.100 --> 00:01:49.200
three

40
00:01:50.300 --> 00:01:50.900
vectors

41
00:01:52.100 --> 00:01:55.900
that's for number two put the vectors inside the Matrix m.

42
00:01:57.100 --> 00:02:00.200
That is a three by three by five Matrix. How do we create a

43
00:02:00.200 --> 00:02:02.100
 matrix that history file three by five?

44
00:02:03.100 --> 00:02:05.400
So well if you want to create a matrix.

45
00:02:06.700 --> 00:02:10.000
That's again just a multi-dimensionalistant python.

46
00:02:11.100 --> 00:02:14.100
So what I'm just going to do is I'm going to remember a matrix is

47
00:02:14.100 --> 00:02:14.400
 a

48
00:02:15.100 --> 00:02:18.600
is a is rows of vectors A Matrix

49
00:02:18.600 --> 00:02:21.000
 is a rows of vectors. That's one way to look at

50
00:02:21.200 --> 00:02:22.900
 it either Columns of rows.

51
00:02:23.500 --> 00:02:26.300
Columns of vectors or rows of vectors here

52
00:02:26.300 --> 00:02:26.400
 we have

53
00:02:27.500 --> 00:02:29.500
we'll go with rows. So this is row number one.

54
00:02:31.200 --> 00:02:31.900
Which is a vector?

55
00:02:33.700 --> 00:02:36.400
so these are all subsets of

56
00:02:37.300 --> 00:02:38.700
the row space event

57
00:02:39.800 --> 00:02:41.100
Okay, so V2.

58
00:02:42.500 --> 00:02:44.100
And then V 3.

59
00:02:45.500 --> 00:02:48.100
And now we have ourselves a matrix if I now

60
00:02:48.100 --> 00:02:48.600
 type in m.

61
00:02:51.300 --> 00:02:51.900
There you can see.

62
00:02:55.300 --> 00:02:57.400
if you use a math lab this

63
00:02:59.300 --> 00:03:02.000
I mean the the coding approach would be very familiar.

64
00:03:03.100 --> 00:03:06.000
Oh, by the way, if you want to work with math lab discourse will help you out.

65
00:03:07.100 --> 00:03:10.900
A great deal. Maybe I can I'll add I'll add Snippets.

66
00:03:11.700 --> 00:03:14.200
For master so we won't cover Matlab in the course,

67
00:03:14.200 --> 00:03:17.600
 but I'll give you the Matlab implementation of the Python code

68
00:03:17.600 --> 00:03:18.000
 that we're doing.

69
00:03:18.900 --> 00:03:21.900
Matter, of course stands for Matrix laboratory if

70
00:03:21.900 --> 00:03:22.900
 I remember correctly.

71
00:03:23.900 --> 00:03:26.500
Anyway, so now we have a matrix which

72
00:03:26.500 --> 00:03:29.600
 is a set of three subsets of three elements

73
00:03:29.600 --> 00:03:31.800
 where each element is itself a vector.

74
00:03:32.800 --> 00:03:36.200
So that's element one element Two element three, how

75
00:03:35.200 --> 00:03:38.800
 do we turn this thing into an array

76
00:03:38.800 --> 00:03:40.700
 we go NP dot array.

77
00:03:42.700 --> 00:03:44.200
And then you plug in your list.

78
00:03:46.300 --> 00:03:46.900
I'm gonna go ahead and put

79
00:03:47.800 --> 00:03:48.500
m in there

80
00:03:50.200 --> 00:03:53.500
Now, of course I could have made these numpy erased first and then put them in

81
00:03:53.500 --> 00:03:55.600
 but the order doesn't matter not Pi will take care of it.

82
00:03:56.900 --> 00:03:59.000
So let me add some comments in here. We will declare.

83
00:04:00.600 --> 00:04:01.400
three vectors

84
00:04:04.200 --> 00:04:05.100
over r

85
00:04:06.100 --> 00:04:06.400
3

86
00:04:08.900 --> 00:04:11.400
and then declare the Matrix

87
00:04:11.400 --> 00:04:11.700
 m

88
00:04:15.100 --> 00:04:15.600
which is

89
00:04:17.300 --> 00:04:18.100
2 by 3

90
00:04:23.700 --> 00:04:26.400
and then here I'm just previewing The Matrix preview The

91
00:04:26.400 --> 00:04:26.800
 Matrix.

92
00:04:28.700 --> 00:04:28.800
Okay.

93
00:04:30.600 --> 00:04:31.900
Oh, excuse me, three by five.

94
00:04:32.600 --> 00:04:33.500
Yes, three by five.

95
00:04:35.800 --> 00:04:36.700
Okay. Yeah three rows.

96
00:04:37.500 --> 00:04:39.000
of elements for each element is a

97
00:04:40.100 --> 00:04:43.200
space of five components or five

98
00:04:43.200 --> 00:04:43.500
 elements

99
00:04:45.300 --> 00:04:47.600
and then here we are going to convert The Matrix.

100
00:04:51.300 --> 00:04:51.700
M.

101
00:04:53.800 --> 00:04:54.700
M two

102
00:04:55.900 --> 00:04:56.900
a numpy

103
00:04:57.700 --> 00:04:58.600
multi-dimensional

104
00:04:59.500 --> 00:05:00.900
multi-dimensional

105
00:05:02.600 --> 00:05:05.600
well, that's actually not multi. It's actually affect It's actually an

106
00:05:05.600 --> 00:05:06.300
 array with three elements. So

107
00:05:08.400 --> 00:05:09.300
an Empire rate

108
00:05:10.400 --> 00:05:11.700
now, how do we get the

109
00:05:13.300 --> 00:05:15.800
first element of the row space of them

110
00:05:16.400 --> 00:05:18.200
if I want the first row.

111
00:05:19.100 --> 00:05:19.800
I'm just going to go.

112
00:05:21.200 --> 00:05:24.400
M 0 it's going to give you the first Vector inside the

113
00:05:24.400 --> 00:05:24.800
 Matrix.

114
00:05:26.100 --> 00:05:26.400
M.

115
00:05:27.700 --> 00:05:30.100
Okay, and then exactly I can

116
00:05:30.100 --> 00:05:33.400
 use I can use square bracket notation. If I want to add these three vectors together

117
00:05:33.400 --> 00:05:36.900
 for four number step number four. So add

118
00:05:36.900 --> 00:05:39.200
 the elements of the row space. What are the elements of the

119
00:05:39.200 --> 00:05:40.300
 of the row space?

120
00:05:40.900 --> 00:05:43.300
They are M sub m zero, M1 and

121
00:05:43.300 --> 00:05:43.500
 M2.

122
00:05:44.400 --> 00:05:47.700
And here's the thing in programming we start our

123
00:05:47.700 --> 00:05:49.600
 subscripts from 0 so we come from 0.

124
00:05:50.300 --> 00:05:52.900
So this will be the first Vector second Vector third vector.

125
00:05:53.800 --> 00:05:56.000
and then if you want to add them together, well, we just do just

126
00:05:57.300 --> 00:06:00.200
The numpy allows you to add them together like so.

127
00:06:03.100 --> 00:06:06.600
And we can call this the what should

128
00:06:06.600 --> 00:06:06.900
 we call this?

129
00:06:08.200 --> 00:06:12.100
This will be V sub 4 remember what we said about the

130
00:06:11.100 --> 00:06:14.000
 vector space we said.

131
00:06:15.100 --> 00:06:15.900
It is addition.

132
00:06:20.100 --> 00:06:23.500
The closure Axiom applies to it under addition. So if

133
00:06:23.500 --> 00:06:26.400
 you add the if you add two vectors

134
00:06:26.400 --> 00:06:29.400
 together, you get a third Vector. That's what closures and you

135
00:06:29.400 --> 00:06:31.000
 will see now if I add these together.

136
00:06:31.900 --> 00:06:33.400
And I say V sub 4.

137
00:06:34.500 --> 00:06:37.100
There is my mistake. I did convert.

138
00:06:38.400 --> 00:06:41.300
I did convert M to a numpy array, but

139
00:06:41.300 --> 00:06:44.600
 I did not reassign it so I'm gonna reassign it. Okay, so m is

140
00:06:44.600 --> 00:06:47.300
 gonna go from being a python listen to now being a

141
00:06:47.300 --> 00:06:50.300
 numpy array. Okay. I was missing this bit. So one

142
00:06:50.300 --> 00:06:50.600
 more time.

143
00:06:52.200 --> 00:06:55.000
Now I'm going to create a fourth Vector out of the sum of

144
00:06:55.200 --> 00:06:58.700
 these pictures. And if I now say V4 there you

145
00:06:58.700 --> 00:06:59.400
 can see we've done.

146
00:07:00.300 --> 00:07:01.200
vector addition

147
00:07:01.800 --> 00:07:02.500
and that's the answer.
