WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.100 --> 00:00:00.900
So today we're going to

1
00:00:01.900 --> 00:00:02.900
Turn our attention.

2
00:00:04.400 --> 00:00:05.200
to vectors

3
00:00:09.200 --> 00:00:10.400
We will briefly revisit.

4
00:00:13.800 --> 00:00:15.300
today, of course the sixth of July

5
00:00:16.800 --> 00:00:17.400
revisit

6
00:00:20.600 --> 00:00:22.600
the fundamentals of abstract algebra

7
00:00:25.200 --> 00:00:28.300
and get into context of vectors vectors and Vector spaces

8
00:00:28.300 --> 00:00:30.100
 because we want to talk about vector addition.

9
00:00:31.600 --> 00:00:34.900
And we want to visualize vector vector

10
00:00:34.900 --> 00:00:37.400
 operations vectors and

11
00:00:37.400 --> 00:00:38.800
 The Rock Creations using python.

12
00:00:39.400 --> 00:00:42.900
And I also want to talk about the applications of

13
00:00:42.900 --> 00:00:44.700
 vector operations.

14
00:00:46.200 --> 00:00:47.100
I hopefully we'll be able to.

15
00:00:48.600 --> 00:00:49.100
move

16
00:00:50.500 --> 00:00:53.700
Fast enough to get into something called cosine similarity. So

17
00:00:53.700 --> 00:00:56.700
 here's what we're going to do today. We're going to talk about vector.

18
00:00:57.800 --> 00:00:58.500
operations

19
00:01:01.100 --> 00:01:04.200
and it will also I'll take you

20
00:01:04.200 --> 00:01:05.600
 for a moment to abstract algebra.

21
00:01:06.400 --> 00:01:08.000
document that we had before

22
00:01:11.500 --> 00:01:13.700
we are going to visualize vectors.

23
00:01:16.200 --> 00:01:19.600
with math plot lip both in 2D

24
00:01:20.300 --> 00:01:21.100
and 3D

25
00:01:25.900 --> 00:01:26.200
then

26
00:01:29.100 --> 00:01:32.900
to look at a practical application of course vectors have

27
00:01:35.900 --> 00:01:37.500
immediately applications in physics

28
00:01:40.100 --> 00:01:43.600
But I want us to look at applications in.

29
00:01:44.900 --> 00:01:46.400
You know machine learning in particular.

30
00:01:47.400 --> 00:01:49.700
things like topic modeling and

31
00:01:53.600 --> 00:01:55.700
finding words that are similar.

32
00:01:58.100 --> 00:02:01.300
To words in a dictionary so I give an example where I

33
00:02:01.300 --> 00:02:04.400
 said, you know, when you Google something a word and that

34
00:02:04.400 --> 00:02:05.400
 is misspelled.

35
00:02:06.200 --> 00:02:07.100
Google gives you the closest.

36
00:02:11.300 --> 00:02:13.600
The water is closest to what you have typed.

37
00:02:15.700 --> 00:02:19.000
So in order for us to understand one the

38
00:02:18.400 --> 00:02:21.400
 following application of vector operations,

39
00:02:21.400 --> 00:02:23.700
 I'm referring to cosine similarity.

40
00:02:26.400 --> 00:02:27.300
We need to First.

41
00:02:28.200 --> 00:02:28.700
talk about

42
00:02:30.200 --> 00:02:33.100
a coordinate system that we have not yet talked about but it is

43
00:02:33.100 --> 00:02:33.800
 very important.

44
00:02:35.700 --> 00:02:37.800
especially if you ever want to learn

45
00:02:39.400 --> 00:02:41.300
and apply differentially equations

46
00:02:43.900 --> 00:02:46.200
So I've mentioned the Cartesian coordinate system.

47
00:02:47.600 --> 00:02:50.500
Which has a developed version of the euclidean?

48
00:02:51.300 --> 00:02:52.100
coordinate system

49
00:02:53.900 --> 00:02:56.100
But we haven't talked about something called the

50
00:02:56.100 --> 00:02:58.700
 polar coordinate system. So Cartesian.

51
00:03:00.600 --> 00:03:01.700
and polar

52
00:03:03.500 --> 00:03:04.500
coordinate systems

53
00:03:07.300 --> 00:03:09.400
the coordinate system uses

54
00:03:10.200 --> 00:03:10.600
points

55
00:03:13.700 --> 00:03:14.200
to

56
00:03:18.100 --> 00:03:19.300
You know place a vector.

57
00:03:23.300 --> 00:03:25.800
In a polar coordinate system, however, we use angles.

58
00:03:27.300 --> 00:03:29.700
to place a vector to draw a vector onto the graph

59
00:03:30.800 --> 00:03:31.100
and

60
00:03:32.400 --> 00:03:34.600
we want to see how we can go back and forth.

61
00:03:36.100 --> 00:03:39.600
So another for us to be able to plot the cosine similarity

62
00:03:39.600 --> 00:03:43.000
 of two vectors. We will need to go from a Cartesian.

63
00:03:44.700 --> 00:03:48.000
To our polar coordinate system or at least what will

64
00:03:47.100 --> 00:03:50.200
 happen is we will go from you will get

65
00:03:50.200 --> 00:03:53.000
 an angle. Basically you will get an angle of multiple vectors.

66
00:03:53.800 --> 00:03:57.000
And then in order to convert that into the Cartesian coordinate

67
00:03:56.000 --> 00:03:57.100
 system.

68
00:03:57.700 --> 00:03:58.200
we have to

69
00:03:59.200 --> 00:04:01.200
probably have to convert it. I'll show you how to do the conversion.

70
00:04:04.100 --> 00:04:05.500
So cosine similarity and

71
00:04:07.200 --> 00:04:07.900
application

72
00:04:10.100 --> 00:04:10.300
in

73
00:04:12.500 --> 00:04:12.600
well, I mean

74
00:04:15.500 --> 00:04:16.600
put NLP.

75
00:04:18.300 --> 00:04:21.200
But cosine similarity has broad applications. It's

76
00:04:21.200 --> 00:04:22.200
 not limited to NLP.

77
00:04:23.800 --> 00:04:24.600
Okay, so let's begin.

78
00:04:27.200 --> 00:04:28.800
and speaking of

79
00:04:31.700 --> 00:04:32.300
angles

80
00:04:33.100 --> 00:04:36.800
we might I might even talk about trigonometry. So

81
00:04:36.800 --> 00:04:38.300
 do a quick trigonometry.

82
00:04:39.200 --> 00:04:39.500
review

83
00:04:43.500 --> 00:04:47.000
But this is hopefully a more useful review because I am

84
00:04:46.100 --> 00:04:48.700
 going to be fixated on the side.

85
00:04:54.100 --> 00:04:55.500
the sign let's say

86
00:04:56.500 --> 00:04:56.900
function

87
00:04:58.600 --> 00:04:58.800
Okay.

88
00:05:00.800 --> 00:05:03.600
So let me open a new document here.

89
00:05:03.600 --> 00:05:04.900
 We'll call this vectors.

90
00:05:06.400 --> 00:05:07.100
dot MD

91
00:05:08.600 --> 00:05:10.100
and I'm going to copy.

92
00:05:11.700 --> 00:05:13.500
Snippets of code from my notes

93
00:05:15.200 --> 00:05:17.100
and then we'll do the same python.

94
00:05:19.700 --> 00:05:21.900
All right. So where did I put this thing?

95
00:05:23.600 --> 00:05:23.900
in

96
00:05:30.500 --> 00:05:31.300
linear algebra

97
00:05:35.800 --> 00:05:38.600
So, of course, we've already established that vectors are

98
00:05:38.600 --> 00:05:39.700
 sets.

99
00:05:41.600 --> 00:05:42.200
of elements

100
00:05:46.500 --> 00:05:48.700
But of course these are special sets.

101
00:05:49.900 --> 00:05:52.200
Because certain axioms apply these sets

102
00:05:52.200 --> 00:05:54.200
 so to make a distinction.

103
00:05:55.200 --> 00:05:58.900
Between a generic set and special set.

104
00:05:58.900 --> 00:05:59.800
 We use the word space.

105
00:06:01.700 --> 00:06:01.900
or

106
00:06:03.400 --> 00:06:07.000
Vector actually let me correct myself a vector

107
00:06:06.200 --> 00:06:07.600
 is a special set.

108
00:06:09.600 --> 00:06:12.400
And the vectors in turn are subsets of another set

109
00:06:12.400 --> 00:06:14.500
 called the space. So that's what we get Vector space.

110
00:06:15.100 --> 00:06:15.300
Okay.

111
00:06:16.800 --> 00:06:17.500
so

112
00:06:20.300 --> 00:06:23.300
I'm sure you remember this tutorial because this is the first tutorial we had.

113
00:06:24.900 --> 00:06:25.600
in module 1

114
00:06:28.900 --> 00:06:31.100
so we said that sets can be denoted in different

115
00:06:31.100 --> 00:06:31.300
 ways.

116
00:06:32.200 --> 00:06:32.600
using

117
00:06:34.200 --> 00:06:35.600
Curly braces aren't common.

118
00:06:37.100 --> 00:06:40.000
So it's either going to be used or either we will use.

119
00:06:41.400 --> 00:06:42.400
a parentheses or

120
00:06:43.400 --> 00:06:44.200
square brackets

121
00:06:45.600 --> 00:06:45.700
so

122
00:06:46.900 --> 00:06:48.000
an equivalent way

123
00:06:50.500 --> 00:06:51.900
or expressing

124
00:06:53.500 --> 00:06:54.200
a vector

125
00:06:55.600 --> 00:06:57.300
is also use square brackets.

126
00:06:58.700 --> 00:07:01.800
And we are going to use these interchangeably

127
00:07:01.800 --> 00:07:02.500
 so it depends on.

128
00:07:04.600 --> 00:07:05.800
How we want to visualize?

129
00:07:07.100 --> 00:07:10.800
Vectors if if we're talking about a point in

130
00:07:10.800 --> 00:07:13.200
 a 2d or 3D coordinate space you will use

131
00:07:13.200 --> 00:07:14.600
 this we will use the parentheses.

132
00:07:19.200 --> 00:07:20.000
but if we're talking about

133
00:07:21.300 --> 00:07:23.500
transposing a vector or

134
00:07:24.400 --> 00:07:27.000
extracting effective for Matrix. We will use a square brackets.

135
00:07:28.900 --> 00:07:29.100
Okay.

136
00:07:31.100 --> 00:07:31.400
then

137
00:07:32.500 --> 00:07:33.400
I told you that.

138
00:07:34.900 --> 00:07:37.100
We have a formal definition for a vector.

139
00:07:40.600 --> 00:07:42.700
Let me copy that bit of code.

140
00:07:49.600 --> 00:07:52.200
Okay, maybe I don't have it. So let me just write down the vector space

141
00:07:52.200 --> 00:07:53.600
 because this is related to

142
00:07:59.400 --> 00:08:01.200
the vector operations that we're going to look at.

143
00:08:02.500 --> 00:08:02.600
so

144
00:08:04.600 --> 00:08:07.200
LP tutorial on empty

145
00:08:09.700 --> 00:08:10.100
Master tutorial

146
00:08:13.200 --> 00:08:13.500
Yeah.

147
00:08:14.600 --> 00:08:16.500
And then we have so this is the vector space.

148
00:08:18.800 --> 00:08:20.000
the vector space

149
00:08:40.700 --> 00:08:42.300
so a vector space

150
00:08:43.100 --> 00:08:45.100
Is a set of vectors.

151
00:08:45.900 --> 00:08:48.300
To which the following actions apply a vector

152
00:08:48.300 --> 00:08:49.600
 addition and Vector multiplication.

153
00:08:50.200 --> 00:08:52.200
And these axioms apply under closure?

154
00:08:53.200 --> 00:08:55.200
Again, that means if you take two vectors.

155
00:08:57.500 --> 00:08:58.200
They will be.

156
00:08:59.300 --> 00:09:02.200
You will get a third element that will be subset of the vector space.

157
00:09:02.200 --> 00:09:05.200
 So two vectors added add them together notice to these two are both

158
00:09:05.200 --> 00:09:08.600
 add two vectors together. You'll get a third Vector multiply two

159
00:09:08.600 --> 00:09:10.700
 vectors. You will get a you will again get a vector.

160
00:09:12.500 --> 00:09:15.100
And you will get a vector of the same Dimension. So we

161
00:09:15.100 --> 00:09:18.100
 also talked about the r and space.

162
00:09:27.100 --> 00:09:27.400
right

163
00:09:28.300 --> 00:09:30.600
So if you want to indicate that you're talking about.

164
00:09:33.100 --> 00:09:36.600
a vector with two points or 3.4 points

165
00:09:36.600 --> 00:09:37.400
 you would use r

166
00:09:38.200 --> 00:09:38.500
to the power

167
00:09:40.800 --> 00:09:43.200
Okay, so R to the power 3 is the set of

168
00:09:43.200 --> 00:09:46.800
 all vectors that have three components.

169
00:09:47.900 --> 00:09:50.200
again, the words components elements

170
00:09:52.200 --> 00:09:53.900
Members is all interchangeable.

171
00:09:54.400 --> 00:09:57.400
So that's a point in a three-dimensional space. These are

172
00:09:57.400 --> 00:09:57.600
 points.

173
00:09:59.600 --> 00:10:02.400
Actually, this is a this is one point with five

174
00:10:02.400 --> 00:10:02.700
 elements.

175
00:10:03.600 --> 00:10:06.300
And this is one point with three elements. I have to be careful with my

176
00:10:06.300 --> 00:10:06.400
 words.

177
00:10:07.800 --> 00:10:08.000
Okay.

178
00:10:12.700 --> 00:10:15.100
And of course we talked about fields which we set

179
00:10:15.100 --> 00:10:16.300
 our special types of rings.

180
00:10:17.600 --> 00:10:20.000
So if I pull up the linear algebra tutorial.

181
00:10:33.900 --> 00:10:35.800
I meant to say abstract algebra tutorial.

182
00:10:37.400 --> 00:10:39.500
Which is number seven?

183
00:10:47.700 --> 00:10:48.600
number seven

184
00:10:59.200 --> 00:11:01.100
Okay, so field is a type of ring.

185
00:11:02.400 --> 00:11:05.600
So it has all eight axioms of a ring plus a

186
00:11:05.600 --> 00:11:08.100
 ninth was called the inverse. So we will be able to do this

187
00:11:08.100 --> 00:11:11.300
 to vectors as well again, if I

188
00:11:11.300 --> 00:11:12.900
 scroll up here, these are the eight.

189
00:11:14.100 --> 00:11:15.400
axioms that apply

190
00:11:17.200 --> 00:11:20.300
To a field where is the field again? Yeah, so these are the eight

191
00:11:20.300 --> 00:11:22.200
 actions that apply to a field.

192
00:11:27.400 --> 00:11:30.600
question from Ron it applies ABC and are real

193
00:11:30.600 --> 00:11:33.000
 the the members of

194
00:11:33.400 --> 00:11:36.300
 the vector are real correct multiplication of

195
00:11:36.300 --> 00:11:38.900
 vector space is usually a and r

196
00:11:42.200 --> 00:11:43.900
I think you're referring to this document.

197
00:11:45.900 --> 00:11:48.500
multi-multiplicate multiplication

198
00:11:50.300 --> 00:11:53.600
in a vector space is usually in R V and

199
00:11:53.600 --> 00:11:53.600
 V.

200
00:12:00.400 --> 00:12:03.300
So if a is a really okay here do you

201
00:12:03.300 --> 00:12:05.200
 mean by a is a vector or a is a real number?

202
00:12:06.600 --> 00:12:09.200
Because you just have the letter a in there. I don't know

203
00:12:09.200 --> 00:12:11.300
 if it's so for better multiplication.

204
00:12:13.500 --> 00:12:16.400
Mm-hmm usually means a scalar times a vector.

205
00:12:17.600 --> 00:12:19.300
Is also in the vector space.

206
00:12:20.200 --> 00:12:21.300
Okay, correct.

207
00:12:23.500 --> 00:12:26.300
If I look at my text, let me see if they have this additional

208
00:12:26.300 --> 00:12:26.800
 comet.

209
00:12:28.500 --> 00:12:31.700
But okay there is vector addition and scalar multiplication.

210
00:12:36.400 --> 00:12:38.600
Better multiplication as you've written it.

211
00:12:39.800 --> 00:12:41.600
it's only applicable to

212
00:12:43.000 --> 00:12:43.800
R3

213
00:12:47.700 --> 00:12:49.300
okay, so let me correct myself then.

214
00:12:50.600 --> 00:12:52.300
from my math background

215
00:12:53.200 --> 00:12:56.700
Yeah, you might be correct because yours is Vector vision and secular multiplication

216
00:12:56.700 --> 00:12:59.400
 the product effective language.

217
00:13:00.400 --> 00:13:01.000
you

218
00:13:05.700 --> 00:13:06.800
This one doesn't use.

219
00:13:08.600 --> 00:13:11.100
Bold letters or arrows over the on top of the letter so

220
00:13:11.100 --> 00:13:12.400
 I have to read the text to figure out.

221
00:13:13.400 --> 00:13:16.800
The correct code. Okay, then I'll just

222
00:13:16.800 --> 00:13:18.200
 have to correct. Correct myself.

223
00:13:22.400 --> 00:13:25.300
I always try this then so let me for the time being get rid

224
00:13:25.300 --> 00:13:25.300
 of.

225
00:13:31.800 --> 00:13:33.900
Now I just correct it. I'll correct in a moment.

226
00:13:34.900 --> 00:13:37.300
But let me I'll fix this.

227
00:13:37.300 --> 00:13:39.800
 I'll fix this right in a second.

228
00:13:40.700 --> 00:13:43.900
But let me just show you how to draw vectors using mathplotlib.

229
00:13:45.700 --> 00:13:45.800
Okay.

230
00:13:48.400 --> 00:13:51.200
I'm gonna create a new file here.

231
00:13:52.800 --> 00:13:55.900
And I will call this vectors.

232
00:13:57.200 --> 00:13:59.700
dot i p y and B

233
00:14:01.400 --> 00:14:03.900
and I'm gonna go ahead and import.

234
00:14:05.100 --> 00:14:07.700
matplotlib dot Pi plot

235
00:14:08.800 --> 00:14:10.600
Just PLT and import.

236
00:14:13.200 --> 00:14:16.400
number numpy as NP

237
00:14:18.900 --> 00:14:19.100
Okay.

238
00:14:22.300 --> 00:14:24.400
And this is my reference code.

239
00:14:25.100 --> 00:14:25.800
vectors

240
00:15:00.900 --> 00:15:03.500
Yes, there are scalar multiplication. There's no Vector multiplication.

241
00:15:03.500 --> 00:15:04.600
 This is incorrect.

242
00:15:06.400 --> 00:15:07.800
scalar multiplication

243
00:15:23.100 --> 00:15:24.400
and this has to be

244
00:15:26.200 --> 00:15:27.400
I will use.

245
00:15:30.100 --> 00:15:32.400
e to stand for component

246
00:15:38.500 --> 00:15:41.200
Yes, I hope we can see that this the ball so that that's a vector.

247
00:15:41.200 --> 00:15:42.100
 That's a constant.

248
00:15:43.800 --> 00:15:46.800
Multiply the scalar by the vector you will get and you

249
00:15:46.800 --> 00:15:49.800
 will get another Vector you will get a vector that obvious. That

250
00:15:49.800 --> 00:15:51.000
 would be a subset at the vector space.

251
00:15:51.900 --> 00:15:52.000
Okay.

252
00:15:53.800 --> 00:15:54.000
and

253
00:15:55.900 --> 00:15:57.200
V is a vector

254
00:15:58.900 --> 00:16:01.300
Okay. So now I see what you were saying

255
00:16:01.300 --> 00:16:04.900
 Richard. I will say here that this is a subset of

256
00:16:04.900 --> 00:16:05.400
 the real.

257
00:16:07.300 --> 00:16:08.000
number system

258
00:16:15.400 --> 00:16:16.300
and this is a

259
00:16:17.800 --> 00:16:19.900
constant component

260
00:16:22.900 --> 00:16:23.400
There we go.

261
00:16:27.600 --> 00:16:27.900
Okay.

262
00:16:29.800 --> 00:16:32.900
I just wanted to fix that code because it was bothering me now. Let

263
00:16:32.900 --> 00:16:35.200
 me go ahead and return to the notebook.

264
00:16:36.300 --> 00:16:38.700
And we will also see how this this this.

265
00:16:40.900 --> 00:16:43.900
The you know appears when

266
00:16:43.900 --> 00:16:44.700
 we plot the numbers.

267
00:16:45.400 --> 00:16:46.300
When we plot the vectors.

268
00:16:47.100 --> 00:16:50.400
now I'm going to I've written some created some

269
00:16:50.400 --> 00:16:51.600
 functions that allow us to

270
00:16:56.000 --> 00:16:56.600
create

271
00:16:57.400 --> 00:16:57.900
vectors

272
00:16:59.100 --> 00:17:00.500
let me show you one example of

273
00:17:01.900 --> 00:17:04.200
creating a drawing a line on math powder because

274
00:17:04.200 --> 00:17:07.500
 with mathpotlib the way you draw a line on a

275
00:17:07.500 --> 00:17:07.600
 plot.

276
00:17:08.300 --> 00:17:11.200
Is by creating a sequence of

277
00:17:11.200 --> 00:17:12.000
 points?

278
00:17:13.600 --> 00:17:13.900
XY points

279
00:17:14.800 --> 00:17:16.400
and then get that gives the

280
00:17:19.200 --> 00:17:22.900
the appearance of there being aligned. So let me show you some simple

281
00:17:22.900 --> 00:17:23.300
 example.

282
00:17:31.800 --> 00:17:34.700
First I will create a figure.

283
00:17:36.800 --> 00:17:37.800
and assign

284
00:17:39.200 --> 00:17:41.300
a variable ax to the axis of the figure

285
00:17:43.400 --> 00:17:46.300
and by doing this we can set the limits of

286
00:17:46.300 --> 00:17:47.100
 the axes.

287
00:17:48.200 --> 00:17:51.100
Set the labels of the axes. So I'll show

288
00:17:51.100 --> 00:17:51.400
 you what I mean.

289
00:17:52.400 --> 00:17:55.300
And I'm going so here I'll do just that I'm going

290
00:17:55.300 --> 00:17:58.100
 to have this is going to be a two-dimensional example. So this is

291
00:17:59.600 --> 00:18:02.200
Get rid of that vectors in 2D.

292
00:18:06.900 --> 00:18:09.200
The x-axis will go from negative 15 to

293
00:18:09.200 --> 00:18:09.400
 15.

294
00:18:10.800 --> 00:18:13.200
The y-axis will go from 0 to 10.

295
00:18:14.300 --> 00:18:17.700
So we'll have the two quadrants of the Cartesian system.

296
00:18:21.700 --> 00:18:23.600
Then I'm going to create.

297
00:18:27.600 --> 00:18:28.700
a sequence of points

298
00:18:29.900 --> 00:18:32.200
So again, how do we plot a simple Point

299
00:18:32.200 --> 00:18:33.600
 Let's see. We have P1.

300
00:18:34.500 --> 00:18:35.400
and this will be

301
00:18:36.500 --> 00:18:37.900
let's say five and five.

302
00:18:39.200 --> 00:18:42.100
of obviously the order is X and Y always the case

303
00:18:42.100 --> 00:18:43.700
 XY and then if there was a third of

304
00:18:44.600 --> 00:18:45.800
Third axis. It will be Z.

305
00:18:46.800 --> 00:18:48.400
And then the plot this point we would go.

306
00:18:49.500 --> 00:18:50.200
It would go.

307
00:18:53.200 --> 00:18:54.600
a x Dot Plot

308
00:18:59.100 --> 00:19:01.900
P1 0 P 1

309
00:19:04.000 --> 00:19:04.400
one

310
00:19:09.500 --> 00:19:13.100
so P0 will be the point on the x-axis P1

311
00:19:12.100 --> 00:19:14.300
 would be the point of the y axis.

312
00:19:14.900 --> 00:19:15.700
very straightforward

313
00:19:20.500 --> 00:19:21.300
import the libraries

314
00:19:28.600 --> 00:19:28.800
and

315
00:19:32.100 --> 00:19:34.900
I need to set the marker and the color.

316
00:19:45.900 --> 00:19:48.200
now actually, no, I don't need to do that, but why isn't

317
00:19:48.200 --> 00:19:49.200
 appearing so I actually

318
00:19:55.400 --> 00:19:58.000
Set the color here. Try making it black.

319
00:20:00.100 --> 00:20:01.500
and the size

320
00:20:06.500 --> 00:20:09.400
No, actually this the first two arguments would be sufficient. It's

321
00:20:09.400 --> 00:20:10.300
 not appearing because

322
00:20:12.400 --> 00:20:13.300
It should be here.

323
00:20:15.500 --> 00:20:16.000
one of my missing

324
00:20:29.100 --> 00:20:30.000
that's correct.

325
00:20:38.200 --> 00:20:41.400
Come on, this is just a simple Point. Why am I not able to get it to

326
00:20:41.400 --> 00:20:41.500
 appear?

327
00:20:42.600 --> 00:20:44.500
Okay, let's go. Are you?

328
00:20:46.100 --> 00:20:50.000
You're only plotting one one element of the point. Yeah, I

329
00:20:49.200 --> 00:20:52.300
 just want it's just supposed to be one. That's if

330
00:20:52.300 --> 00:20:55.600
 I pull up the P1 is P1 is

331
00:20:55.600 --> 00:20:57.100
 one point or two points.

332
00:20:58.100 --> 00:21:01.300
It's one point. So that's it's a position on the x-axis. So

333
00:21:01.300 --> 00:21:05.000
 five. Sorry only plotting the y coordinate.

334
00:21:06.700 --> 00:21:09.000
No, this is the so it's supposed to

335
00:21:09.100 --> 00:21:12.600
 be five steps on the x-axis and

336
00:21:12.600 --> 00:21:15.200
 then five steps up the y axis so it

337
00:21:15.200 --> 00:21:15.300
 should be here.

338
00:21:16.900 --> 00:21:19.100
Let me see what I'm doing wrong here.

339
00:21:20.900 --> 00:21:24.100
Let me pull up the code I used for linear programming.

340
00:21:25.100 --> 00:21:26.200
and P

341
00:21:31.800 --> 00:21:33.300
here composition

342
00:21:38.600 --> 00:21:41.200
export P color black marker size.

343
00:21:41.200 --> 00:21:44.100
 Okay, I shouldn't do I mean I don't need to put the marker size so

344
00:21:45.600 --> 00:21:48.500
Maybe I maybe yeah, maybe for one point. I do need a markers.

345
00:21:48.500 --> 00:21:50.700
 So let's go back here. Put the markers.

346
00:21:54.400 --> 00:21:55.900
It should have a default value, right?

347
00:21:56.800 --> 00:21:57.100
anyway

348
00:21:58.800 --> 00:22:01.500
Let me make the markers. Well, thank you Richard. So yeah,

349
00:22:01.500 --> 00:22:03.900
 so that's that's what I want to show you. That's the marker.

350
00:22:04.900 --> 00:22:05.800
and so

351
00:22:09.300 --> 00:22:11.700
in order for us to draw a line from the origin.

352
00:22:12.800 --> 00:22:14.400
to this point

353
00:22:15.200 --> 00:22:17.200
we need to create a sequence of these points.

354
00:22:18.500 --> 00:22:19.200
So something.

355
00:22:20.500 --> 00:22:21.200
to this effect

356
00:22:22.500 --> 00:22:23.100
this would be

357
00:22:25.600 --> 00:22:26.300
let's say

358
00:22:27.600 --> 00:22:28.500
this is the first point.

359
00:22:29.700 --> 00:22:31.900
A second point this is the third point.

360
00:22:33.700 --> 00:22:36.900
And let's just make this two to two five five.

361
00:22:40.100 --> 00:22:40.700
and seven seven

362
00:22:45.100 --> 00:22:46.500
and I will write this code.

363
00:22:47.400 --> 00:22:48.300
copy this code

364
00:22:49.500 --> 00:22:50.600
This will be P2.

365
00:22:56.900 --> 00:22:58.000
This will be P2.

366
00:23:01.400 --> 00:23:02.600
This will be P3.

367
00:23:07.300 --> 00:23:10.200
So we can get a line to go this way.

368
00:23:10.200 --> 00:23:13.600
 Now. There are two types of vector three types of vectors. There

369
00:23:13.600 --> 00:23:13.700
 are.

370
00:23:15.900 --> 00:23:16.800
positioned vectors

371
00:23:20.300 --> 00:23:21.400
That can appear anywhere.

372
00:23:23.100 --> 00:23:24.900
There are displacement vectors.

373
00:23:25.800 --> 00:23:28.500
at this

374
00:23:29.700 --> 00:23:32.900
A position Vector is one where let me

375
00:23:32.900 --> 00:23:35.700
 actually show you the pictures. Just easier to explain what

376
00:23:35.700 --> 00:23:37.300
 pictures so position.

377
00:23:39.300 --> 00:23:40.400
versus displacement

378
00:23:41.400 --> 00:23:41.900
vector

379
00:23:42.900 --> 00:23:45.500
and there's something called. I have velocity Vector. We're

380
00:23:45.500 --> 00:23:48.400
 going to look at this, but the one that we're doing is called a displacement vector.

381
00:23:50.100 --> 00:23:51.200
so a position vector

382
00:23:52.700 --> 00:23:54.300
Is something like this?

383
00:23:55.600 --> 00:23:58.600
It's for example the line segment, OA.

384
00:23:59.400 --> 00:24:00.100
But it is not.

385
00:24:01.400 --> 00:24:04.400
Associated with some origin or as displacement Vector

386
00:24:04.400 --> 00:24:07.300
 is associated with position and the from the origin.

387
00:24:08.400 --> 00:24:08.600
Okay.

388
00:24:11.100 --> 00:24:14.400
and I'll tell you why I'm bringing that

389
00:24:14.400 --> 00:24:14.700
 up because

390
00:24:16.100 --> 00:24:17.900
when we do vector addition I want to

391
00:24:18.900 --> 00:24:21.000
We will displace a vector to show

392
00:24:21.200 --> 00:24:24.500
 you so we can understand what's going on with the with

393
00:24:24.500 --> 00:24:24.800
 the addition.

394
00:24:25.700 --> 00:24:28.200
Anyway, what I'm going to do now is I'm going to use a

395
00:24:28.200 --> 00:24:31.200
 code from numpy. They'll allow me to

396
00:24:31.200 --> 00:24:31.400
 generate.

397
00:24:32.300 --> 00:24:34.200
Like a hundred such points.

398
00:24:35.900 --> 00:24:37.900
And that will give the appearance of a line.

399
00:24:38.900 --> 00:24:41.600
Okay, so instead of doing this manually, I'm

400
00:24:41.600 --> 00:24:42.200
 going to get rid of these.

401
00:24:43.200 --> 00:24:44.300
and I'm going to use

402
00:24:45.400 --> 00:24:48.000
a sequence of points to you know

403
00:24:48.200 --> 00:24:49.200
 to give the impression of a line.

404
00:24:50.300 --> 00:24:52.100
And here's the code. So the Republic called.

405
00:24:55.600 --> 00:24:57.800
lens space linear space from numpy

406
00:25:01.300 --> 00:25:03.500
so we go and P Dublin space.

407
00:25:04.500 --> 00:25:06.400
And this takes three arguments.

408
00:25:08.000 --> 00:25:08.300
the

409
00:25:10.200 --> 00:25:11.700
so you're going to create a list of values, right?

410
00:25:12.800 --> 00:25:13.700
the starting number

411
00:25:15.500 --> 00:25:17.000
the ending number. Let's say 5.

412
00:25:18.300 --> 00:25:19.200
and then the number of

413
00:25:22.100 --> 00:25:24.000
values

414
00:25:25.300 --> 00:25:28.000
that you will generate from 0 to 5. So if I say 100

415
00:25:30.200 --> 00:25:32.000
and you will get something, you know like this.

416
00:25:37.100 --> 00:25:40.300
Small links leading all the way to 5 that's 100 points.

417
00:25:41.200 --> 00:25:44.000
That's for the now let's say this is for the x-axis. So I'm going to

418
00:25:44.100 --> 00:25:46.900
 go x equals NP that linear space.

419
00:25:48.800 --> 00:25:51.600
0 to 5 and then the same thing for the y-axis.

420
00:25:54.200 --> 00:25:57.900
And I can go back to ax Dot

421
00:25:57.900 --> 00:25:58.100
 Plot.

422
00:26:02.200 --> 00:26:05.400
The plot argument can the plot method can either take a single

423
00:26:05.400 --> 00:26:08.700
 a scalar value or in this case a list

424
00:26:08.700 --> 00:26:09.100
 of values?

425
00:26:09.800 --> 00:26:10.800
I'm going to go X and Y.

426
00:26:11.900 --> 00:26:14.400
And I don't need to do anything else. I believe there

427
00:26:14.400 --> 00:26:17.400
 we go. Yeah, for some reason when you when you

428
00:26:17.400 --> 00:26:19.700
 are plotting with lists of

429
00:26:20.500 --> 00:26:22.300
with a list of code, excuse me.

430
00:26:23.300 --> 00:26:26.600
What the values that are lists you don't need to supply the additional arguments,

431
00:26:26.600 --> 00:26:27.300
 but there we go.

432
00:26:27.900 --> 00:26:30.100
The way the reason we're able to see this line is because

433
00:26:30.100 --> 00:26:30.300
 we have

434
00:26:32.700 --> 00:26:35.300
100 points on this quarter 100x and

435
00:26:35.300 --> 00:26:35.500
 y's

436
00:26:37.700 --> 00:26:40.300
Now what I want to do is I want to show multiple vectors, but

437
00:26:40.300 --> 00:26:42.300
 I don't want to use this kind of code. So I've created.

438
00:26:43.200 --> 00:26:45.200
or have abstract the way the code so

439
00:26:47.600 --> 00:26:48.400
there is this function.

440
00:26:51.300 --> 00:26:53.000
That I have created it's called.

441
00:26:54.800 --> 00:26:55.300
back

442
00:26:57.200 --> 00:26:58.400
So I'm going to get rid of these.

443
00:27:02.900 --> 00:27:04.300
And it takes as argument.

444
00:27:05.700 --> 00:27:06.800
the X and Y points

445
00:27:08.200 --> 00:27:10.900
as a tuple so points will be a tuple of XY.

446
00:27:11.900 --> 00:27:14.400
Then the optionally the displacement along

447
00:27:14.400 --> 00:27:15.400
 the X and Y axis.

448
00:27:18.500 --> 00:27:22.200
And all it's going to do is it's going to well start

449
00:27:21.200 --> 00:27:24.300
 at the on the x-axis. It will start at the

450
00:27:24.300 --> 00:27:25.400
 origin by default at zero.

451
00:27:25.900 --> 00:27:27.100
It will start at the origin.

452
00:27:28.700 --> 00:27:28.900
and

453
00:27:30.100 --> 00:27:30.300
the

454
00:27:32.300 --> 00:27:34.000
stopping position on the x-axis

455
00:27:34.900 --> 00:27:37.100
and it will generate a hundred sequence of numbers just like

456
00:27:37.100 --> 00:27:37.400
 we saw.

457
00:27:39.200 --> 00:27:41.900
And then it will return the Tuple.

458
00:27:43.000 --> 00:27:43.300
of

459
00:27:44.500 --> 00:27:47.800
this so this will be a list. This will be a list and there

460
00:27:47.800 --> 00:27:50.200
 will be in a tuple, but we'll convert this to not

461
00:27:50.200 --> 00:27:53.300
 by array. Why because what we want to perform the vector addition

462
00:27:53.300 --> 00:27:54.900
 and scalar multiplication.

463
00:27:55.600 --> 00:27:58.300
And numpy object would allow us to do

464
00:27:58.300 --> 00:27:58.900
 that do that.

465
00:28:00.500 --> 00:28:02.800
Then I have another function called Draw.

466
00:28:13.200 --> 00:28:16.200
So this will create a linear space for a vector.

467
00:28:17.400 --> 00:28:19.100
And this will draw the vector on the subplot.

468
00:28:20.400 --> 00:28:22.500
So this will take as argument a vector.

469
00:28:23.500 --> 00:28:24.100
which will be

470
00:28:25.400 --> 00:28:27.600
a tuple where the elements are lists

471
00:28:28.600 --> 00:28:28.800
so

472
00:28:31.200 --> 00:28:33.000
Basically, we will be this V.

473
00:28:34.700 --> 00:28:36.100
Will be something that looks like this.

474
00:28:39.300 --> 00:28:41.400
Okay a list of values from 0.

475
00:28:42.700 --> 00:28:45.300
0.01 Baba all the

476
00:28:45.300 --> 00:28:46.300
 way to for example 5

477
00:28:47.500 --> 00:28:49.000
and the same thing for the y-axis.

478
00:28:50.800 --> 00:28:53.000
So when we do math, we really just need.

479
00:28:54.400 --> 00:28:57.100
One point on the x-axis one point on the y-axis.

480
00:28:57.600 --> 00:29:00.100
That will give us for example somewhere there. But since we

481
00:29:00.100 --> 00:29:03.800
 want to draw the line, we also have to generate the points leading

482
00:29:03.800 --> 00:29:04.500
 up to that point.

483
00:29:05.900 --> 00:29:07.000
So that's what this function does.

484
00:29:09.400 --> 00:29:12.000
That's what this function does that we pass it to the draw function.

485
00:29:13.100 --> 00:29:15.400
And of course we can we once we have

486
00:29:16.700 --> 00:29:19.800
Generated the vector. We can also displace it

487
00:29:19.800 --> 00:29:20.900
 after having generated it.

488
00:29:22.200 --> 00:29:23.500
So if I remove these displacement

489
00:29:25.300 --> 00:29:27.300
values you can see it's just

490
00:29:28.500 --> 00:29:31.400
this is going to be the list of X points on

491
00:29:31.400 --> 00:29:33.900
 the along the x-axis. This will be the points along the y-axis.

492
00:29:34.700 --> 00:29:37.000
And these are just additions to displaced the vector.

493
00:29:40.600 --> 00:29:43.800
then I have this third function GP short for

494
00:29:45.500 --> 00:29:47.000
get points.

495
00:29:49.300 --> 00:29:51.400
I'll show you what this does in a second.

496
00:29:52.500 --> 00:29:54.900
Okay, let me remove it for now. Let's just keep things simple.

497
00:29:55.500 --> 00:29:56.900
Now I'm going to create two vectors.

498
00:29:58.700 --> 00:29:59.700
V sub 1

499
00:30:01.500 --> 00:30:02.600
Which will be a vector.

500
00:30:04.400 --> 00:30:05.000
at the point

501
00:30:06.000 --> 00:30:06.400
zero

502
00:30:08.200 --> 00:30:08.500
five

503
00:30:10.300 --> 00:30:13.300
So I don't need to what once I have created this

504
00:30:13.300 --> 00:30:16.200
 functions. I have abstracted the way the numpy stuff and

505
00:30:16.200 --> 00:30:19.500
 I can just you know, use Simple notation. So

506
00:30:19.500 --> 00:30:21.700
 V1 will be a vector from 0 to

507
00:30:22.700 --> 00:30:25.000
5 V 2 will be a vector.

508
00:30:27.300 --> 00:30:28.100
Let's make this one.

509
00:30:31.500 --> 00:30:32.300
well

510
00:30:34.400 --> 00:30:35.900
zero to negative 5

511
00:30:38.800 --> 00:30:39.900
actually negative

512
00:30:40.900 --> 00:30:44.000
Five, so this is five steps negative

513
00:30:43.400 --> 00:30:45.500
 five steps to the left.

514
00:30:46.100 --> 00:30:47.700
and it will appear so we'll get a v

515
00:30:48.300 --> 00:30:50.400
and then I'm going to draw these factors. I'm going to go draw.

516
00:30:51.900 --> 00:30:54.300
The argument has to be the first

517
00:30:54.300 --> 00:30:54.900
 vector.

518
00:30:55.800 --> 00:30:56.800
or V sub 1

519
00:30:57.900 --> 00:30:59.300
and then V oops

520
00:31:00.900 --> 00:31:01.800
T sub 2

521
00:31:05.200 --> 00:31:08.000
and the draw function needs to know.

522
00:31:09.100 --> 00:31:12.100
which method to call so I'm going to use

523
00:31:13.500 --> 00:31:16.300
They plot method of the ax object

524
00:31:16.300 --> 00:31:17.100
 the axis object.

525
00:31:20.700 --> 00:31:23.600
And this is supposed to be 5.

526
00:31:26.100 --> 00:31:27.800
So there's five. There we go.

527
00:31:30.300 --> 00:31:30.500
Okay.

528
00:31:32.300 --> 00:31:35.700
so I'm gonna I'm not the reason I set the x-axis to

529
00:31:35.700 --> 00:31:38.100
 go from negative 15 to positive 15 because I don't

530
00:31:38.100 --> 00:31:38.300
 want to

531
00:31:41.200 --> 00:31:42.200
move away from this point

532
00:31:43.100 --> 00:31:44.500
It's just easier that way.

533
00:31:45.800 --> 00:31:48.200
Okay. So, let's see what vectorization does.

534
00:31:49.200 --> 00:31:51.500
I'm going to create a third vector.

535
00:31:54.500 --> 00:31:57.300
And the third Vector will be the sum of the first

536
00:31:57.300 --> 00:31:57.800
 two vectors.

537
00:32:00.300 --> 00:32:01.400
so in order to do this

538
00:32:02.400 --> 00:32:03.200
I need to grab.

539
00:32:04.300 --> 00:32:06.500
the coordinates of the first vector

540
00:32:09.800 --> 00:32:10.300
so this function

541
00:32:12.500 --> 00:32:15.800
GP get points will well give me the points of

542
00:32:15.800 --> 00:32:17.300
 the first Vector which is 5 and 5.

543
00:32:19.200 --> 00:32:19.500
and

544
00:32:21.100 --> 00:32:23.200
the point of the second Vector so V sub 2

545
00:32:25.300 --> 00:32:28.300
and the way this function works is a pretty straightforward.

546
00:32:31.600 --> 00:32:32.500
And bring it back here.

547
00:32:35.100 --> 00:32:36.200
or we will take the

548
00:32:37.500 --> 00:32:38.100
the list

549
00:32:40.300 --> 00:32:44.800
from the vectors remember a vector in this notebook.

550
00:32:45.700 --> 00:32:47.600
Is a tuple of arrays?

551
00:32:48.400 --> 00:32:51.500
So we'll take the array and the x-axis and it

552
00:32:51.500 --> 00:32:52.600
 will just grab the last element.

553
00:32:54.800 --> 00:32:57.200
So the ending the ending number and the same

554
00:32:57.200 --> 00:32:59.400
 thing for the y-axis and then we'll return and appearing.

555
00:33:00.500 --> 00:33:00.800
Okay.

556
00:33:02.200 --> 00:33:04.900
And then so I'm going to add these points together.

557
00:33:05.900 --> 00:33:07.200
And then turn it to a vector.

558
00:33:09.700 --> 00:33:11.200
I'm gonna draw this third.

559
00:33:12.800 --> 00:33:13.600
Now back here.

560
00:33:19.100 --> 00:33:21.200
And you might be able to see it.

561
00:33:22.800 --> 00:33:25.300
But you can see now that the size of

562
00:33:25.300 --> 00:33:27.000
 this Vector is double.

563
00:33:28.400 --> 00:33:28.800
these two vectors

564
00:33:29.800 --> 00:33:31.100
So I'm going to draw this in a different way.

565
00:33:32.200 --> 00:33:32.500
I'm going to

566
00:33:34.100 --> 00:33:35.700
not draw the third Vector for a second.

567
00:33:36.700 --> 00:33:39.200
And what I'm going to do is I'm going to align these vectors.

568
00:33:40.200 --> 00:33:43.200
I'm gonna stack them up on top of each other actually. So the first

569
00:33:43.200 --> 00:33:45.200
 Vector will go from 0 to 0 to

570
00:33:46.700 --> 00:33:49.400
Well zero to five so be a vertical

571
00:33:49.400 --> 00:33:49.600
 line.

572
00:33:50.400 --> 00:33:54.100
And I'm going to take the second vector and

573
00:33:53.100 --> 00:33:56.200
 draw it on top of the first vector.

574
00:33:57.300 --> 00:33:58.000
so this will be

575
00:33:59.500 --> 00:34:02.500
0 on the axis x axis

576
00:34:04.100 --> 00:34:05.200
okay, and

577
00:34:08.100 --> 00:34:11.700
I'm gonna have to displace it here. So we get

578
00:34:11.700 --> 00:34:12.000
 this.

579
00:34:12.900 --> 00:34:15.400
But I'm going to displace the second Vector. So

580
00:34:15.400 --> 00:34:17.700
 let's also use the colors here.

581
00:34:18.300 --> 00:34:20.400
for colors I can use the

582
00:34:22.900 --> 00:34:25.200
To which functions that I like color?

583
00:34:26.700 --> 00:34:29.100
See, so second Vector. I will make it red.

584
00:34:31.300 --> 00:34:33.300
And the first factor I will make it blue.

585
00:34:35.200 --> 00:34:35.500
Okay.

586
00:34:39.900 --> 00:34:42.100
why is it complaining about C because

587
00:34:47.600 --> 00:34:48.700
yeah, these belong to the

588
00:34:49.700 --> 00:34:50.800
draw function, sorry

589
00:34:56.700 --> 00:34:58.200
And this will become blue.

590
00:35:01.600 --> 00:35:04.400
Okay. Now I'm going to the I'm gonna displace the

591
00:35:05.900 --> 00:35:08.100
Red line by Five Points. I'm

592
00:35:08.100 --> 00:35:08.400
 going to go.

593
00:35:10.700 --> 00:35:11.200
Why displacement?

594
00:35:12.400 --> 00:35:12.800
five

595
00:35:15.300 --> 00:35:17.300
and then when I draw the Third

596
00:35:18.200 --> 00:35:22.300
Vector I'm going to displace it five points

597
00:35:21.300 --> 00:35:24.500
 across the along the x-axis so

598
00:35:24.500 --> 00:35:27.600
 we can see these two we can see these vectors side by

599
00:35:27.600 --> 00:35:31.300
 side. So X displacement equals five.

600
00:35:32.900 --> 00:35:35.100
There we go. So this is what the vectorization does.

601
00:35:36.100 --> 00:35:37.300
you will get

602
00:35:39.300 --> 00:35:41.700
the well

603
00:35:43.300 --> 00:35:46.400
This is what it means you get the it becomes twice the length.

604
00:35:47.400 --> 00:35:50.600
So I use this example because the examples, you know you I've

605
00:35:50.600 --> 00:35:53.300
 seen in books will not clear enough if I

606
00:35:53.300 --> 00:35:54.300
 type here vector addition.

607
00:35:55.800 --> 00:35:57.100
You see examples like this.

608
00:35:59.200 --> 00:36:00.400
Okay. Well, maybe this is clear enough.

609
00:36:03.900 --> 00:36:04.600
or even this one

610
00:36:07.500 --> 00:36:10.300
but by here, you know displacing it. I think it made it

611
00:36:10.300 --> 00:36:11.300
 very very clear.

612
00:36:15.700 --> 00:36:16.000
Okay.

613
00:36:19.300 --> 00:36:22.500
So I will now extend this code to create

614
00:36:22.500 --> 00:36:23.800
 a three-dimensional plot.

615
00:36:25.300 --> 00:36:28.600
Okay, I'm going to collapse this create a new

616
00:36:28.600 --> 00:36:28.900
 section.

617
00:36:31.100 --> 00:36:32.600
And this will be called.

618
00:36:35.500 --> 00:36:36.600
vectors in 3D

619
00:36:41.200 --> 00:36:44.300
So I've introducing to this code because we're going to later use this

620
00:36:44.300 --> 00:36:46.000
 for more advanced examples.

621
00:36:48.800 --> 00:36:49.100
Okay.

622
00:36:50.600 --> 00:36:52.100
Let me just copy the code.

623
00:36:56.800 --> 00:36:57.600
So these

624
00:36:58.500 --> 00:37:01.800
Are the same functions we saw before but for three

625
00:37:01.800 --> 00:37:02.100
 dimensions?

626
00:37:08.600 --> 00:37:11.400
same as before, but now we have a z Axis or a

627
00:37:13.400 --> 00:37:16.500
You know a linear space for the points along the

628
00:37:16.500 --> 00:37:17.400
 Z axis.

629
00:37:18.200 --> 00:37:20.200
And of course, we're now adding a third.

630
00:37:21.200 --> 00:37:22.500
list in this Tuple

631
00:37:23.100 --> 00:37:24.500
to the points on

632
00:37:26.200 --> 00:37:30.000
The three axes so same function just adapted for three

633
00:37:29.000 --> 00:37:30.400
 dimensions.

634
00:37:32.500 --> 00:37:33.800
and if I want to create

635
00:37:35.100 --> 00:37:37.600
one vector in this three-dimensional

636
00:37:39.100 --> 00:37:41.000
as coordinate system

637
00:37:41.700 --> 00:37:45.100
So for example 10 on the X and

638
00:37:44.100 --> 00:37:47.200
 Y and Z axis would get something that looks

639
00:37:47.200 --> 00:37:47.400
 like.

640
00:37:48.500 --> 00:37:51.700
Like this, let me copy the figure information.

641
00:38:01.200 --> 00:38:02.900
So this is the x-axis.

642
00:38:06.100 --> 00:38:08.500
You can see if we look at it from the x-axis.

643
00:38:09.900 --> 00:38:12.800
If I follow this Gray Line I go

644
00:38:12.800 --> 00:38:13.300
 all the way here.

645
00:38:15.100 --> 00:38:17.800
It is 10 points away from the 10.

646
00:38:19.200 --> 00:38:20.000
from the x-axis

647
00:38:21.600 --> 00:38:22.800
case maybe here

648
00:38:23.800 --> 00:38:25.300
then on the y-axis same thing.

649
00:38:28.100 --> 00:38:29.100
on the y-axis

650
00:38:31.100 --> 00:38:32.700
And of course the Z axis.

651
00:38:35.300 --> 00:38:38.500
So you kind of have to imagine this is in a three-dimensional space.

652
00:38:39.300 --> 00:38:39.600
right

653
00:38:41.900 --> 00:38:43.600
And of course we can probably second one.

654
00:38:44.800 --> 00:38:50.300
Let's change

655
00:38:50.300 --> 00:38:50.700
 this to.

656
00:38:53.600 --> 00:38:56.300
20 on the Z axis, for

657
00:38:56.300 --> 00:38:56.400
 example

658
00:38:58.700 --> 00:39:00.800
So going forward we're going to use this code to draw.

659
00:39:02.300 --> 00:39:03.800
a vectors needed two or three dimensions

660
00:39:05.900 --> 00:39:08.400
Okay. So the orange one obvious second Vector is higher.

661
00:39:09.200 --> 00:39:12.800
And now this one goes up to 15. So let's make these point

662
00:39:12.800 --> 00:39:13.800
 on the Z axis 15.

663
00:39:19.100 --> 00:39:22.000
Okay, so going forward we're going to use this source code.

664
00:39:24.100 --> 00:39:24.800
Now, let me show you.

665
00:39:33.500 --> 00:39:34.000
practical example

666
00:39:36.200 --> 00:39:39.200
But now with vector addition because I think outside of

667
00:39:39.200 --> 00:39:41.300
 I can outside of physics. I can't come up with any.

668
00:39:43.700 --> 00:39:46.500
practical example, so I'm just going to turn our

669
00:39:46.500 --> 00:39:46.800
 attention to

670
00:39:50.500 --> 00:39:52.500
the polar coordinate system

671
00:39:54.500 --> 00:39:56.800
We will talk about the polar coordinate system.

672
00:40:01.300 --> 00:40:02.500
the magnitude of a vector

673
00:40:04.600 --> 00:40:07.200
and then once we have the the magnitude we will

674
00:40:07.200 --> 00:40:07.600
 also look at

675
00:40:10.300 --> 00:40:11.500
scalar multiplication

676
00:40:13.300 --> 00:40:16.500
And then once we've covered these three, yeah, so

677
00:40:16.500 --> 00:40:19.900
 the polar coordinate system magnitude of

678
00:40:19.900 --> 00:40:22.300
 a vector scale of multiplication and then

679
00:40:22.300 --> 00:40:26.500
 we can Implement cosine Simon. It would be cool to plot the

680
00:40:25.500 --> 00:40:28.800
 rotate space. Yeah what there

681
00:40:28.800 --> 00:40:31.300
 was a greater library, but not math

682
00:40:31.300 --> 00:40:34.200
 problem that math problem is flat if you want to interactive one. There's something

683
00:40:34.200 --> 00:40:34.500
 called.

684
00:40:35.800 --> 00:40:38.500
I think Seaborn does it but there's also one called

685
00:40:38.500 --> 00:40:40.600
 plot the I really like I really like this Library.

686
00:40:41.600 --> 00:40:43.900
So if I could apply for python

687
00:40:47.500 --> 00:40:50.200
Let me just Google pull partly 3D.

688
00:40:51.100 --> 00:40:51.500
plot

689
00:40:54.700 --> 00:40:57.500
It's a very simple to use Library when it comes in JavaScript. So

690
00:40:58.600 --> 00:41:01.100
You know, you can create. Yeah, this is the one.

691
00:41:02.900 --> 00:41:05.300
This is very cool. It can take snapshots of it.

692
00:41:06.600 --> 00:41:08.700
You take that's a snapshot.

693
00:41:09.600 --> 00:41:11.000
You can zoom in pan.

694
00:41:13.400 --> 00:41:16.400
And maybe I'll give you the source code for using this Library. It's

695
00:41:16.400 --> 00:41:19.200
 pretty straightforward by them. Nothing spectacles. It's very

696
00:41:19.200 --> 00:41:19.800
 analogous to

697
00:41:23.000 --> 00:41:23.900
matplotlip

698
00:41:24.500 --> 00:41:26.000
So the same convention, you know.

699
00:41:27.600 --> 00:41:30.200
You well this well, you need a daily frame. So

700
00:41:30.200 --> 00:41:33.300
 this could be the list of values and then so DF stands

701
00:41:33.300 --> 00:41:35.700
 for data frame and the data frame is simply a table.

702
00:41:37.400 --> 00:41:40.100
X and Y points. So the left column would be the X

703
00:41:40.100 --> 00:41:42.300
 points y kind of would be the Y points.

704
00:41:44.600 --> 00:41:46.700
Yeah, and you can also have you know, like a

705
00:41:50.600 --> 00:41:51.400
heat density

706
00:41:52.600 --> 00:41:55.100
It's a bit finicky to play around but this is this is one option.

707
00:41:58.700 --> 00:42:01.200
I was just when you interacting with this not to keep your

708
00:42:01.200 --> 00:42:04.600
 mouse and on the on the plot move your

709
00:42:04.600 --> 00:42:06.100
 mouse outside of it if you don't want it to move.

710
00:42:06.600 --> 00:42:09.300
But that's what that's what an optional I have. I have

711
00:42:09.300 --> 00:42:11.900
 several notebooks using this code. So I'll share that with you.

712
00:42:13.300 --> 00:42:13.500
Okay.

713
00:42:14.600 --> 00:42:17.000
Okay, let's return to our code.

714
00:42:26.800 --> 00:42:29.500
And then we let's also see if we can do an example just on vector.

715
00:42:30.100 --> 00:42:30.800
operations

716
00:42:32.700 --> 00:42:32.900
so

717
00:42:39.200 --> 00:42:39.400
let me give you.

718
00:42:42.300 --> 00:42:45.000
Some background, of course hide similarity.

719
00:42:47.300 --> 00:42:49.300
Before we cover the people acquisites.

720
00:42:51.200 --> 00:42:54.500
cosine similarly for wood vectors if you remember

721
00:42:54.500 --> 00:42:57.300
 if you were there for the ml papers episode 1

722
00:42:58.700 --> 00:43:00.400
I talked about representing words.

723
00:43:01.900 --> 00:43:02.500
as

724
00:43:03.800 --> 00:43:04.500
vectors

725
00:43:05.500 --> 00:43:07.800
for each component in the vector was

726
00:43:08.800 --> 00:43:11.500
a distribution. No, excuse me, a probability

727
00:43:11.500 --> 00:43:12.400
 under a topic.

728
00:43:15.400 --> 00:43:16.600
For example something like this.

729
00:43:20.600 --> 00:43:21.200
we had

730
00:43:23.700 --> 00:43:25.200
two words word number one

731
00:43:26.600 --> 00:43:27.600
and word number two

732
00:43:30.600 --> 00:43:33.200
Where word number one I think was something like

733
00:43:33.200 --> 00:43:33.900
 cattle dog.

734
00:43:35.200 --> 00:43:38.000
Okay, so it was up like 0.6.

735
00:43:39.300 --> 00:43:39.700
zero point

736
00:43:41.900 --> 00:43:42.400
five

737
00:43:45.100 --> 00:43:45.500
0

738
00:43:46.800 --> 00:43:49.400
.1. And let's just make this and by

739
00:43:49.400 --> 00:43:50.600
 the way, it has to add up to one so

740
00:43:51.600 --> 00:43:54.300
This has to be less than 1 let's make this two.

741
00:43:56.300 --> 00:43:58.500
That's eight nine and let's speak to 0.1.

742
00:43:59.500 --> 00:44:03.200
And then for the second word, this could be 0.5.

743
00:44:05.100 --> 00:44:05.400
5

744
00:44:07.500 --> 00:44:08.400
zero point

745
00:44:10.800 --> 00:44:11.400
two as well.

746
00:44:17.500 --> 00:44:20.400
0.05 0.05

747
00:44:22.100 --> 00:44:25.600
And the these numbers so these are probabilities,

748
00:44:25.600 --> 00:44:28.200
 which means they are a number between 0 and

749
00:44:28.200 --> 00:44:28.300
 1.

750
00:44:29.900 --> 00:44:31.600
but the order

751
00:44:32.600 --> 00:44:33.800
of these values matters

752
00:44:35.300 --> 00:44:38.100
so if we talking about and by the way, we're going to look in an

753
00:44:38.100 --> 00:44:38.700
 application for

754
00:44:41.500 --> 00:44:44.400
natural language processing module for so we're already setting

755
00:44:44.400 --> 00:44:46.400
 up the foundation here the first element.

756
00:44:48.500 --> 00:44:51.300
Is every element here this every probability here is

757
00:44:51.300 --> 00:44:54.300
 a social topic. So for example, we can have team of topic

758
00:44:54.300 --> 00:44:55.300
 one topic two.

759
00:44:56.500 --> 00:44:57.300
topic 3

760
00:44:59.600 --> 00:44:59.800
topic 4

761
00:45:01.200 --> 00:45:03.500
where topic the topics are

762
00:45:04.700 --> 00:45:05.700
about the following

763
00:45:07.700 --> 00:45:10.400
So let's say this is a DOT. This is Kevin. This

764
00:45:10.400 --> 00:45:10.700
 is dog.

765
00:45:13.100 --> 00:45:15.600
This could have to do with mammals.

766
00:45:20.100 --> 00:45:20.600
mmm

767
00:45:23.800 --> 00:45:24.900
this can have to do with

768
00:45:27.900 --> 00:45:29.800
I think these numbers are too close to each other.

769
00:45:31.700 --> 00:45:33.100
They're not strong enough.

770
00:45:34.800 --> 00:45:37.400
Let me make this four and make this.

771
00:45:40.800 --> 00:45:42.000
And let's pop up these numbers.

772
00:45:43.500 --> 00:45:43.700
three

773
00:45:45.400 --> 00:45:47.900
So the first one has to with let's say pets.

774
00:45:49.300 --> 00:45:51.000
Then the second one has to with mammals.

775
00:45:51.800 --> 00:45:54.800
And then basically it becomes

776
00:45:54.800 --> 00:45:56.900
 less relevant. What could be something that is?

777
00:45:59.100 --> 00:46:02.100
It's very slightly relevant to cats and dogs.

778
00:46:10.100 --> 00:46:11.100
anesthesia

779
00:46:13.200 --> 00:46:15.000
And the fort will be something really irrelevant.

780
00:46:16.500 --> 00:46:16.900
building

781
00:46:17.900 --> 00:46:19.100
or not as relevant, you know.

782
00:46:20.600 --> 00:46:23.200
Basically to produce what vectors like

783
00:46:23.200 --> 00:46:26.000
 this you would go through series of articles.

784
00:46:27.100 --> 00:46:28.000
or pages in a book

785
00:46:28.900 --> 00:46:29.400
and

786
00:46:32.300 --> 00:46:35.400
Books come in different topics. We have novels. We

787
00:46:35.400 --> 00:46:37.800
 have fiction. We have textbooks on.

788
00:46:38.700 --> 00:46:39.500
linear algebra

789
00:46:41.800 --> 00:46:44.400
And the way we will know what

790
00:46:44.400 --> 00:46:47.500
 these words mean semantically is how

791
00:46:47.500 --> 00:46:49.000
 frequently they appear.

792
00:46:50.100 --> 00:46:53.400
in books of different subject matters

793
00:46:54.200 --> 00:46:57.700
Now we'll talk about producing vectors like this by the way. Okay, when

794
00:46:57.700 --> 00:47:00.400
 we get to module 4, we'll talk about producing board

795
00:47:00.400 --> 00:47:01.500
 vectors. But anyway.

796
00:47:03.100 --> 00:47:06.000
Here as if the number is higher for the first.

797
00:47:07.700 --> 00:47:10.400
Index that that means these two words

798
00:47:10.400 --> 00:47:13.100
 are associated with pets. Okay. So let's say this is

799
00:47:13.100 --> 00:47:14.000
 a word for dog.

800
00:47:17.600 --> 00:47:20.200
And this is a word for cat.

801
00:47:23.900 --> 00:47:26.400
Okay, so since they both are talking they're both pets

802
00:47:26.400 --> 00:47:26.800
 so they would.

803
00:47:27.400 --> 00:47:29.000
Have higher probabilities.

804
00:47:30.200 --> 00:47:31.300
They also a mammals so they have.

805
00:47:32.400 --> 00:47:35.200
Higher probability at least compared to

806
00:47:35.200 --> 00:47:36.200
 anesthesia and buildings.

807
00:47:37.400 --> 00:47:39.800
But that's the idea. Let's say there was a third word.

808
00:47:43.300 --> 00:47:46.200
Something unrelated. This would be zero point.

809
00:47:47.200 --> 00:47:48.000
zero one

810
00:47:49.900 --> 00:47:51.000
just flat zero.

811
00:47:53.200 --> 00:47:54.900
or anesthesia

812
00:48:00.600 --> 00:48:01.800
It will be zero point.

813
00:48:05.100 --> 00:48:08.100
seven no zero point three

814
00:48:10.200 --> 00:48:11.600
And this will be zero point.

815
00:48:14.100 --> 00:48:14.400
7

816
00:48:15.300 --> 00:48:15.600
9

817
00:48:19.500 --> 00:48:20.500
I can make it six nine.

818
00:48:21.100 --> 00:48:24.200
So 69 plus 0.1 would be 70 plus 3. Can

819
00:48:24.200 --> 00:48:25.000
 you imagine what this would

820
00:48:26.100 --> 00:48:28.100
what what this word could possibly be?

821
00:48:30.500 --> 00:48:33.700
It is highly it has a high distribution for anesthesia. And

822
00:48:33.700 --> 00:48:36.100
 it's very likely of building. What do you think this?

823
00:48:37.200 --> 00:48:38.600
would could be

824
00:48:41.200 --> 00:48:43.700
strong association with anesthesia and buildings

825
00:48:44.400 --> 00:48:45.400
Hospital exactly

826
00:48:46.500 --> 00:48:46.900
Hospital

827
00:48:48.500 --> 00:48:48.800
No.

828
00:48:51.700 --> 00:48:53.800
let's say we want to have a system where we

829
00:48:55.400 --> 00:48:58.100
group or put words under categories

830
00:48:59.800 --> 00:49:02.800
and we want to do this automatically. We don't want to do this manually.

831
00:49:03.600 --> 00:49:06.500
So for example, let's say you want to create

832
00:49:06.500 --> 00:49:09.300
 a social media application and you want to

833
00:49:14.400 --> 00:49:16.200
maybe remove words or remove

834
00:49:17.100 --> 00:49:18.300
posts that have to do with

835
00:49:19.200 --> 00:49:20.600
you know inappropriate topics.

836
00:49:21.400 --> 00:49:24.200
I guess for something inappropriate you could make a list of words.

837
00:49:25.700 --> 00:49:28.600
So you won't need to use cosine similarity. But let's

838
00:49:28.600 --> 00:49:31.200
 let's think about a more useful example where we

839
00:49:31.200 --> 00:49:31.500
 want to.

840
00:49:36.600 --> 00:49:39.200
You know, like let's think about words that can mean

841
00:49:39.200 --> 00:49:40.700
 very different things in different contexts.

842
00:49:41.800 --> 00:49:44.600
So the name of a company like apple,

843
00:49:44.600 --> 00:49:47.000
 right? Apple could be the fruit. It can also be

844
00:49:47.200 --> 00:49:47.500
 a company.

845
00:49:48.400 --> 00:49:51.100
How we know what it means? It depends on the text surrounding it.

846
00:49:52.600 --> 00:49:55.700
Or topics or books if you want to or a

847
00:49:55.700 --> 00:49:58.200
 web pages you want to associate web pages by

848
00:49:58.200 --> 00:50:01.600
 different topics. So this webpage is about Finance. This

849
00:50:01.600 --> 00:50:04.300
 web page is about sports. This web page is about

850
00:50:05.500 --> 00:50:06.300
You know.

851
00:50:08.100 --> 00:50:09.000
football whatever

852
00:50:10.400 --> 00:50:11.000
How would we?

853
00:50:13.200 --> 00:50:15.700
How would you go about classifying it when everything we have?

854
00:50:16.600 --> 00:50:18.400
is a vector of numbers like so

855
00:50:20.000 --> 00:50:20.300
okay.

856
00:50:21.700 --> 00:50:22.800
Let me show you what an example.

857
00:50:24.900 --> 00:50:27.400
Let's say we have we have these three words and they represented

858
00:50:27.400 --> 00:50:29.000
 as vectors of distributions.

859
00:50:31.600 --> 00:50:33.200
Cosine similarity is about this.

860
00:50:37.700 --> 00:50:39.300
I'll show you how we calculus in a moment.

861
00:50:41.800 --> 00:50:42.800
But it is the angle.

862
00:50:46.200 --> 00:50:48.300
created by these two vectors

863
00:50:49.400 --> 00:50:52.200
the smaller the angle the closer they are to

864
00:50:52.200 --> 00:50:52.300
 each other.

865
00:50:53.200 --> 00:50:56.600
They have a closer meaning they're associated with each other enough. Obviously the farther they're

866
00:50:56.600 --> 00:50:56.800
 apart.

867
00:50:57.400 --> 00:51:00.200
The the less similar they

868
00:51:00.200 --> 00:51:03.700
 are this is a very good example. This is a very nice picture so you

869
00:51:03.700 --> 00:51:05.800
 can see the cosine similarity of

870
00:51:06.800 --> 00:51:07.600
drone

871
00:51:09.500 --> 00:51:12.500
or they call the the angle of drone and helicopter

872
00:51:12.500 --> 00:51:13.300
 and Rocket are

873
00:51:14.300 --> 00:51:17.000
Closer to each other relative to you know

874
00:51:17.700 --> 00:51:18.200
 Goose eagle and B.

875
00:51:19.100 --> 00:51:23.000
So if you would take the cosine similarity of drone and

876
00:51:22.600 --> 00:51:24.400
 Eagle you would have

877
00:51:25.200 --> 00:51:27.100
what we call an up.

878
00:51:27.700 --> 00:51:30.000
Is that an obtuse is that an obtuse angle? But it's a

879
00:51:32.400 --> 00:51:34.500
it's not even it's even less than 45 degrees.

880
00:51:35.500 --> 00:51:38.800
Anyway, you'll get a bigger cosine symbolarity and

881
00:51:38.800 --> 00:51:39.500
 acute angle.

882
00:51:40.700 --> 00:51:43.400
And a cute angle. Thank you. And I actually yeah a cute

883
00:51:43.400 --> 00:51:44.200
 would be narrow, right?

884
00:51:45.600 --> 00:51:48.600
Anyway, what I'm trying to say is the the larger the

885
00:51:48.600 --> 00:51:51.400
 angle the less similar they are so for example B and Rocket,

886
00:51:51.400 --> 00:51:52.100
 you know.

887
00:51:53.600 --> 00:51:55.000
They're very dissimilar.

888
00:51:56.200 --> 00:51:58.200
So what I want to show you is how to produce such a thing.

889
00:52:01.100 --> 00:52:03.200
In order for us to plot vectors like this.

890
00:52:04.100 --> 00:52:07.100
After having calculated their cosine similarity. We need

891
00:52:07.100 --> 00:52:09.400
 to talk about the polar coordinate system.

892
00:52:11.500 --> 00:52:13.200
So let's first talk about.

893
00:52:14.100 --> 00:52:16.000
The first prerequisite okay.

894
00:52:16.900 --> 00:52:18.100
this is going to be about

895
00:52:24.100 --> 00:52:24.900
cosine

896
00:52:26.200 --> 00:52:28.800
similarities or similarity

897
00:52:32.300 --> 00:52:34.400
And the polar coordinate system.

898
00:52:40.500 --> 00:52:42.700
and this this will be a foundation for

899
00:52:44.300 --> 00:52:47.600
other topics that will be covering this course, but later on even for differential equations

900
00:52:47.600 --> 00:52:49.100
 why differential equations but because

901
00:52:51.300 --> 00:52:54.800
The prerequisite for differential equations in particular partial differential

902
00:52:54.800 --> 00:52:56.400
 equations is complex analysis.

903
00:52:57.400 --> 00:53:00.400
And you know in complex analysis we have these imaginary numbers.

904
00:53:02.300 --> 00:53:04.800
And so we use the polar coordinate system extensively.

905
00:53:05.700 --> 00:53:05.800
Okay.

906
00:53:07.500 --> 00:53:07.800
anyway

907
00:53:09.200 --> 00:53:12.300
The first thing we need to what I'm going to show you is the formula for

908
00:53:12.300 --> 00:53:14.100
 cosine similarity. So I'm going to return to

909
00:53:15.100 --> 00:53:15.900
vectors

910
00:53:17.200 --> 00:53:19.600
That's create a new section here. Call cosine.

911
00:53:21.200 --> 00:53:22.200
similarity

912
00:53:32.700 --> 00:53:34.000
And the formula is this.

913
00:53:36.300 --> 00:53:37.400
If I can remember correctly.

914
00:53:38.700 --> 00:53:40.500
it is cosine of

915
00:53:42.300 --> 00:53:42.800
Theta

916
00:53:44.300 --> 00:53:44.600
would be

917
00:53:48.400 --> 00:53:50.500
the product of two

918
00:53:53.600 --> 00:53:54.000
vectors

919
00:53:55.600 --> 00:53:56.500
A and B

920
00:54:07.800 --> 00:54:08.300
Okay.

921
00:54:10.800 --> 00:54:11.900
dot actually not

922
00:54:15.400 --> 00:54:18.300
sum out here. See what I'm doing wrong teeth rack.

923
00:54:22.900 --> 00:54:25.500
and the magnitude of the

924
00:54:25.500 --> 00:54:25.900
 vector

925
00:54:35.100 --> 00:54:38.500
Vector a c dot. Okay, there's the problem of activity.

926
00:54:41.500 --> 00:54:43.000
over the magnitude

927
00:54:45.800 --> 00:54:48.600
What was the code what I keep forgetting cosine similarity

928
00:54:48.600 --> 00:54:49.600
 to formulas boy?

929
00:54:50.600 --> 00:54:53.300
Yeah, the magnitude of the first Vector times. The magnet is

930
00:54:53.300 --> 00:54:54.800
 not the second Vector. So I'm going to go.

931
00:54:57.800 --> 00:54:59.000
Vector a

932
00:55:01.500 --> 00:55:02.300
times

933
00:55:06.500 --> 00:55:07.300
Vector B

934
00:55:10.000 --> 00:55:10.300
Okay.

935
00:55:11.200 --> 00:55:12.000
You use double bar?

936
00:55:16.300 --> 00:55:17.000
As far as I know.

937
00:55:21.300 --> 00:55:22.400
using two bars or

938
00:55:23.700 --> 00:55:27.600
Single bar doesn't make a difference. Actually, it

939
00:55:26.600 --> 00:55:29.400
 is preferable to use double bar

940
00:55:29.400 --> 00:55:32.600
 because single bar could be mistaken for the absolute value.

941
00:55:33.400 --> 00:55:34.800
It's best to use double bars.

942
00:55:36.100 --> 00:55:39.200
And I don't want to create a space. That's that big. I just want a small space.

943
00:55:39.200 --> 00:55:41.300
 So I'm just going to use the column.

944
00:55:43.900 --> 00:55:44.800
Yeah, that's much better.

945
00:55:45.700 --> 00:55:47.700
That's how we calculate the cosine similarity.

946
00:55:56.500 --> 00:55:58.200
Let me show you how this is done with python.

947
00:56:00.800 --> 00:56:02.800
And of course, this will give you a number.

948
00:56:04.300 --> 00:56:06.300
We'll give you an angle.

949
00:56:08.100 --> 00:56:09.300
So, let's see how this is done.

950
00:56:11.200 --> 00:56:14.900
And this is incorrect. This is you will get the angle Theta that

951
00:56:14.900 --> 00:56:15.300
 will be the

952
00:56:16.600 --> 00:56:18.300
result of this evaluation whereas

953
00:56:19.300 --> 00:56:23.200
this is not cosine. This is cosine similarities.

954
00:56:22.200 --> 00:56:24.100
 So I'm gonna

955
00:56:27.100 --> 00:56:28.700
make it cosine somewhere.

956
00:56:31.900 --> 00:56:34.300
And this would be it will take two arguments.

957
00:56:36.100 --> 00:56:37.200
vectors A

958
00:56:37.900 --> 00:56:38.600
and P

959
00:56:40.100 --> 00:56:40.700
that's much better.

960
00:56:41.400 --> 00:56:45.000
So yeah, if you calculate the cosine similarity of these two

961
00:56:44.000 --> 00:56:45.400
 vectors.

962
00:56:48.600 --> 00:56:49.300
both sides similarity

963
00:56:50.500 --> 00:56:53.100
you would get the angle Theta and that's how you'll know how far

964
00:56:53.100 --> 00:56:54.200
 these words are apart from each other.

965
00:56:55.400 --> 00:56:58.200
So let me show you how to do first calculate this with python and

966
00:56:58.200 --> 00:56:59.200
 then how to plot it.

967
00:57:01.400 --> 00:57:04.000
So I'll return to vectors IP ymb.

968
00:57:08.500 --> 00:57:09.500
And then we bring you the code.

969
00:57:11.900 --> 00:57:13.900
cosine similarity

970
00:57:15.400 --> 00:57:16.500
first we have the magnitude.

971
00:57:18.300 --> 00:57:19.900
Now, let me talk about the magnitude by the way.

972
00:57:20.700 --> 00:57:23.400
The magnitude of a vector is

973
00:57:23.400 --> 00:57:26.100
 calculated as follows. I think I had it from before but let me

974
00:57:26.100 --> 00:57:26.800
 write it down anyway.

975
00:57:27.400 --> 00:57:29.500
mangani, tude

976
00:57:30.200 --> 00:57:32.600
So that's this term here in the denominator.

977
00:57:33.800 --> 00:57:35.200
to calculate the magnitude

978
00:57:37.800 --> 00:57:40.400
is to stick this is the square all

979
00:57:40.400 --> 00:57:40.700
 the

980
00:57:42.600 --> 00:57:43.300
components of the vector

981
00:57:46.600 --> 00:57:49.400
add them all up and then take the square root of the sum.

982
00:57:51.100 --> 00:57:53.200
So we get something that looks like this.

983
00:57:54.400 --> 00:57:56.800
We will first add up all the components of the vector.

984
00:57:58.700 --> 00:58:01.800
So let's say the vector has components ABC and

985
00:58:01.800 --> 00:58:02.400
 we'll have

986
00:58:03.300 --> 00:58:03.800
a squared

987
00:58:08.200 --> 00:58:11.500
Again, we have an arrow over the AOK. So these two are distinct

988
00:58:11.500 --> 00:58:14.100
 are over Amy's Vector. This is component of that

989
00:58:14.100 --> 00:58:17.400
 Vector a squared plus b squared plus c squared.

990
00:58:19.200 --> 00:58:22.200
If for example, this is over R3.

991
00:58:23.500 --> 00:58:25.200
and then we take the square root of

992
00:58:27.200 --> 00:58:27.900
this sum.

993
00:58:38.700 --> 00:58:41.700
So down here we're doing we're taking the magnitude 4.

994
00:58:42.900 --> 00:58:43.500
both vectors

995
00:58:46.300 --> 00:58:47.800
So, how do we calculation python?

996
00:58:52.200 --> 00:58:53.300
Here, let me close this.

997
00:58:56.900 --> 00:58:57.900
what I'm doing here is

998
00:59:07.600 --> 00:59:08.500
enumerating

999
00:59:09.600 --> 00:59:12.300
over all the components in the vector v. So V is

1000
00:59:12.300 --> 00:59:12.600
 a vector.

1001
00:59:13.300 --> 00:59:15.600
And we denote X.

1002
00:59:16.700 --> 00:59:20.100
Let me put x sub. I just to make it especially clear x

1003
00:59:19.100 --> 00:59:21.000
 sub I is a component.

1004
00:59:22.400 --> 00:59:24.800
Xabi is a component in v in the vector v.

1005
00:59:26.100 --> 00:59:29.400
Now what we're doing is I have I'm going to import the math Library by

1006
00:59:29.400 --> 00:59:30.700
 the way. We need to import the math Library.

1007
00:59:34.100 --> 00:59:37.300
I will take every extra by

1008
00:59:37.300 --> 00:59:40.400
 of v and it raise it to the power too. So this is the power method.

1009
00:59:41.200 --> 00:59:44.300
X is the base 2 is the power just like we saw

1010
00:59:44.300 --> 00:59:44.600
 earlier.

1011
00:59:45.600 --> 00:59:46.400
This will give us a list.

1012
00:59:48.800 --> 00:59:51.300
X sub 1 squared x sub 2 squared x sub 3

1013
00:59:51.300 --> 00:59:54.200
 squared and then we will use the sum function that's built into python to

1014
00:59:54.200 --> 00:59:55.900
 add up all the elements in this set.

1015
00:59:57.400 --> 00:59:58.500
Once we have the sum.

1016
00:59:59.500 --> 01:00:00.400
I think the square root.

1017
01:00:01.200 --> 01:00:02.900
And that's of course how you calculate the magnitude?

1018
01:00:04.400 --> 01:00:07.000
To calculate cosine similarity of two vectors we do

1019
01:00:07.000 --> 01:00:07.100
 this.

1020
01:00:10.800 --> 01:00:13.500
Okay, this function will take two arguments two vectors.

1021
01:00:18.100 --> 01:00:19.100
First we have the numerator.

1022
01:00:25.200 --> 01:00:27.100
So we multiply these two vectors together.

1023
01:00:29.400 --> 01:00:31.200
and then the denominator

1024
01:00:32.800 --> 01:00:33.600
which is the product of

1025
01:00:34.400 --> 01:00:35.200
their magnitude

1026
01:00:37.400 --> 01:00:39.600
and then the return value of course is the fraction.

1027
01:00:48.900 --> 01:00:49.100
Okay.

1028
01:00:57.100 --> 01:00:58.200
So now let me show you.

1029
01:01:01.400 --> 01:01:04.700
Let me show you how to calculate this for those three wood

1030
01:01:04.700 --> 01:01:05.000
 vectors.

1031
01:01:07.800 --> 01:01:08.000
Okay.

1032
01:01:17.800 --> 01:01:20.300
Just one

1033
01:01:20.300 --> 01:01:20.700
 of the copy.

1034
01:01:34.500 --> 01:01:34.800
and

1035
01:01:42.800 --> 01:01:45.200
For the numerative actually want to take the dot product. Let

1036
01:01:45.200 --> 01:01:47.800
 me make sure numpy doesn't have a method for the dot product.

1037
01:01:50.200 --> 01:01:52.600
Okay, there is another three dot product.

1038
01:01:55.700 --> 01:01:56.700
You're about to say something.

1039
01:01:57.900 --> 01:01:58.200
wrong

1040
01:01:59.700 --> 01:02:03.000
I was just gonna say yeah, there is a DOT product on NP

1041
01:02:02.000 --> 01:02:03.300
 array.

1042
01:02:05.000 --> 01:02:05.300
Yes.

1043
01:02:08.700 --> 01:02:11.200
Okay, when I use this I got the correct results. So is I

1044
01:02:11.200 --> 01:02:13.200
 want to make sure I want to see if Matt Mall.

1045
01:02:15.400 --> 01:02:15.800
is a

1046
01:02:16.800 --> 01:02:19.300
is the general case of the dot method?

1047
01:02:20.200 --> 01:02:20.500
Okay.

1048
01:02:22.100 --> 01:02:25.300
Let me what I'll do is I'll first run the cosine similarity on those two

1049
01:02:25.300 --> 01:02:26.000
 word vectors.

1050
01:02:26.800 --> 01:02:29.800
And then I'll change this to dots if I get a different result. Okay.

1051
01:02:29.800 --> 01:02:32.400
 So let's go first let's do that. I'm gonna

1052
01:02:32.400 --> 01:02:35.400
 go cosine similarity of word Vector

1053
01:02:35.400 --> 01:02:35.500
 one.

1054
01:02:38.500 --> 01:02:39.600
and would Vector 2

1055
01:02:41.600 --> 01:02:42.300
if I run this

1056
01:02:43.600 --> 01:02:45.900
it has a midst undefined maybe run this again.

1057
01:02:47.700 --> 01:02:48.400
not that

1058
01:02:49.300 --> 01:02:51.300
We get well, it's almost 1.

1059
01:02:53.100 --> 01:02:56.300
If I do the same for let me see first of all, if I put dot do

1060
01:02:56.300 --> 01:02:57.100
 I get a different value?

1061
01:02:59.600 --> 01:03:02.700
No, okay, so Matt Mall as a

1062
01:03:02.700 --> 01:03:06.200
 general you the the dot method it's

1063
01:03:05.200 --> 01:03:08.300
 a method on NP. So you have to

1064
01:03:08.300 --> 01:03:11.500
 write it as V1 dot Paran V2

1065
01:03:11.500 --> 01:03:12.300
 close friend.

1066
01:03:16.200 --> 01:03:17.000
Is it not this?

1067
01:03:21.400 --> 01:03:24.300
But that's not I guess that works too.

1068
01:03:24.300 --> 01:03:27.800
 But the one I use it's that is also a method on NP

1069
01:03:27.800 --> 01:03:30.900
 array so you can do V1 dot

1070
01:03:30.900 --> 01:03:33.400
 V2. Okay, so

1071
01:03:33.400 --> 01:03:36.800
 like so be two one dot or would

1072
01:03:36.800 --> 01:03:37.700
 one for example what?

1073
01:03:38.700 --> 01:03:39.400
Is that what you mean?

1074
01:03:43.100 --> 01:03:46.000
Yeah, we would see yeah, then put the r value in the

1075
01:03:46.800 --> 01:03:46.900
 parenthesis. Yeah.

1076
01:03:48.300 --> 01:03:51.300
But yeah, but I think is I haven't turn this into MP race so that would

1077
01:03:51.300 --> 01:03:53.200
 mean I'd have to make this in pra.

1078
01:03:57.700 --> 01:03:59.700
And then this would be MP array.

1079
01:04:02.800 --> 01:04:05.300
How many arguments what are the parameters of dot if

1080
01:04:05.300 --> 01:04:05.900
 I expand this?

1081
01:04:07.100 --> 01:04:07.800
But this should work.

1082
01:04:08.700 --> 01:04:09.200
Yeah, okay.

1083
01:04:10.900 --> 01:04:13.500
Yeah, okay fine that Auto's awesome

1084
01:04:13.500 --> 01:04:13.800
 option.

1085
01:04:16.200 --> 01:04:19.300
Okay. So yes, we take the dot put the new

1086
01:04:19.300 --> 01:04:20.700
 bridge the dot product of those two vectors.

1087
01:04:23.700 --> 01:04:26.200
And I'll show you the picture. I'll go to Google Images to show

1088
01:04:26.200 --> 01:04:28.200
 you an example of that product how it's done the order.

1089
01:04:28.900 --> 01:04:31.200
And the denominator is the

1090
01:04:31.200 --> 01:04:32.600
 product of the magnitude.

1091
01:04:33.200 --> 01:04:36.100
So anyway, that's the cosine similarity of the first two words.

1092
01:04:37.400 --> 01:04:40.100
Let's look at the cosine similarity of Ward 1 and Ward 3.

1093
01:04:41.700 --> 01:04:42.900
I can see it's it's

1094
01:04:44.200 --> 01:04:45.500
it's smaller number.

1095
01:04:46.400 --> 01:04:46.900
So they are.

1096
01:04:48.300 --> 01:04:51.100
Not relevant. What about word to one word three?

1097
01:04:52.500 --> 01:04:55.100
Yeah, still not as high as these two.

1098
01:04:56.600 --> 01:04:57.900
Now these are angles.

1099
01:04:59.700 --> 01:05:01.500
How do you plot these angles on?

1100
01:05:03.100 --> 01:05:03.900
a plot like

1101
01:05:05.400 --> 01:05:07.500
like that one. So, how can we visualize this?

1102
01:05:11.300 --> 01:05:12.700
So to do this we need to

1103
01:05:14.300 --> 01:05:17.200
Convert from Polar to coordinate system. What

1104
01:05:17.200 --> 01:05:19.000
 is a polar quad system? Let's come over here.

1105
01:05:20.300 --> 01:05:21.100
I'm going to go.

1106
01:05:23.000 --> 01:05:23.800
folder

1107
01:05:24.700 --> 01:05:26.100
Cartesian coordinates

1108
01:05:28.700 --> 01:05:29.500
Let's look at this picture.

1109
01:05:32.800 --> 01:05:34.900
I wish this was a high resolution, but this should do.

1110
01:05:37.200 --> 01:05:40.900
when you if you remember how we started our session today, we we

1111
01:05:40.900 --> 01:05:41.200
 said that

1112
01:05:42.400 --> 01:05:45.100
we put a point on the Cartesian space.

1113
01:05:45.900 --> 01:05:48.500
And in math, we just draw a line, but in

1114
01:05:48.500 --> 01:05:51.500
 Python, we have to create a sequence of points leading up to that

1115
01:05:51.500 --> 01:05:51.500
 point.

1116
01:05:53.600 --> 01:05:56.800
so for example five steps of along the

1117
01:05:56.800 --> 01:05:59.600
 x-axis and then five steps along the y-axis and

1118
01:06:00.700 --> 01:06:03.000
that's where we put the point and that we do a line leading to

1119
01:06:03.200 --> 01:06:03.300
 that point.

1120
01:06:05.100 --> 01:06:08.400
But if you notice here when we do draw this Vector we have now formed an

1121
01:06:08.400 --> 01:06:08.500
 angle.

1122
01:06:10.900 --> 01:06:13.200
We have formed an angle from the

1123
01:06:13.200 --> 01:06:15.500
 x-axis to the

1124
01:06:16.400 --> 01:06:17.500
line

1125
01:06:19.300 --> 01:06:22.400
There's a word for this I think there's initial side

1126
01:06:22.400 --> 01:06:24.400
 and the terminal side. So there's the initial side.

1127
01:06:25.500 --> 01:06:28.200
Relative to the x-axis is the initial side. That's the terminal

1128
01:06:28.200 --> 01:06:31.400
 side relative to the Y axis that would be the initial side and

1129
01:06:31.400 --> 01:06:31.900
 this would be

1130
01:06:32.300 --> 01:06:35.400
The terminal side and any

1131
01:06:35.400 --> 01:06:38.100
 rate. So on the Cartesian coordinate system,

1132
01:06:38.100 --> 01:06:40.000
 we have the points X and Y, excuse me.

1133
01:06:41.200 --> 01:06:43.300
We have the values X and Y and that produces the point.

1134
01:06:45.200 --> 01:06:46.800
in the polar coordinate system we have

1135
01:06:47.700 --> 01:06:49.300
R which is the radius

1136
01:06:51.200 --> 01:06:54.200
and the coordinate the polar quarter system is a circle. We'll see

1137
01:06:54.200 --> 01:06:55.900
 this in a second and the angle Theta

1138
01:06:56.700 --> 01:07:00.300
So if you know these values if you know the the length

1139
01:06:59.300 --> 01:07:00.900
 of the vector.

1140
01:07:01.700 --> 01:07:02.700
and it's

1141
01:07:05.700 --> 01:07:08.600
Angle from the initial side, then you will know its

1142
01:07:08.600 --> 01:07:11.300
 position on the polar coordinate system, but there's a way we can convert we

1143
01:07:11.300 --> 01:07:13.300
 can go from one system to another system.

1144
01:07:14.700 --> 01:07:17.800
Let me show you the polar coordinate system on its own polar coordinate

1145
01:07:17.800 --> 01:07:18.000
 system.

1146
01:07:23.500 --> 01:07:24.500
Yeah, this is how it's done.

1147
01:07:29.500 --> 01:07:29.800
Okay.

1148
01:07:31.100 --> 01:07:32.100
These are the coordinates.

1149
01:07:34.300 --> 01:07:34.400
on the

1150
01:07:35.900 --> 01:07:37.100
political system obviously

1151
01:07:39.500 --> 01:07:42.700
the point one point would be the length of the vector that

1152
01:07:42.700 --> 01:07:44.100
 will always be the case and then

1153
01:07:45.600 --> 01:07:46.000
the

1154
01:07:52.200 --> 01:07:55.100
there is radian. And what's the other one? Yeah in radians how

1155
01:07:55.100 --> 01:07:58.400
 how far it is from the

1156
01:07:58.400 --> 01:07:59.200
 initial side.

1157
01:08:00.100 --> 01:08:00.400
Okay.

1158
01:08:01.900 --> 01:08:04.300
And this is the radiant system you get

1159
01:08:04.300 --> 01:08:04.900
 the idea. Hope.

1160
01:08:06.600 --> 01:08:09.600
okay, so if you want to for example go from

1161
01:08:09.600 --> 01:08:10.200
 Polar to

1162
01:08:11.500 --> 01:08:13.900
Cartesian you calculate it this way.

1163
01:08:15.300 --> 01:08:18.300
Let me write it down here. I have a comment. I have a

1164
01:08:18.300 --> 01:08:18.500
 note here.

1165
01:08:19.100 --> 01:08:20.000
So if you want to go from

1166
01:08:26.200 --> 01:08:27.000
Artesian

1167
01:08:31.300 --> 01:08:34.300
To polar or polar to court to Polo to

1168
01:08:34.300 --> 01:08:35.200
 Cartesian from Polar.

1169
01:08:36.700 --> 01:08:37.500
coordinate

1170
01:08:39.100 --> 01:08:40.500
to Cartesian

1171
01:08:44.700 --> 01:08:45.800
we do this.

1172
01:09:00.100 --> 01:09:02.200
For the for the point on the x-axis.

1173
01:09:03.900 --> 01:09:06.200
We go X will be equal to

1174
01:09:06.200 --> 01:09:06.900
 R.

1175
01:09:08.500 --> 01:09:09.600
Which is the radius?

1176
01:09:10.500 --> 01:09:10.900
times

1177
01:09:16.800 --> 01:09:19.100
sine of sine of yeah sign of

1178
01:09:19.100 --> 01:09:19.900
 the angle Theta

1179
01:09:23.300 --> 01:09:24.800
And if you want the Y.

1180
01:09:27.500 --> 01:09:27.900
You multiply by.

1181
01:09:29.100 --> 01:09:29.800
the cosine

1182
01:09:30.600 --> 01:09:31.100
Theta

1183
01:09:33.400 --> 01:09:34.300
This is how you convert.

1184
01:09:37.100 --> 01:09:40.700
We know have the angle Theta for our cosine similarity

1185
01:09:40.700 --> 01:09:44.000
 now. We just need to multiply it. But well

1186
01:09:43.200 --> 01:09:44.300
 we need to

1187
01:09:45.400 --> 01:09:46.900
Calculate the sign of that.

1188
01:09:48.300 --> 01:09:50.100
Angle which will give us the ratio.

1189
01:09:50.600 --> 01:09:53.000
for sign it will be the ratio will be

1190
01:09:54.100 --> 01:09:57.400
opposite over opposite over hypotenuse, right

1191
01:09:57.400 --> 01:09:59.400
 and cosine would be

1192
01:10:01.600 --> 01:10:04.600
Opposite, hold on a minute. What was the what was the mnemonic sign

1193
01:10:04.600 --> 01:10:07.200
 is? So katoa, right? Yeah, I just over

1194
01:10:07.200 --> 01:10:07.800
 hypotenuse.

1195
01:10:08.700 --> 01:10:12.000
I don't like the mnemonic what is house by the way, I I was hoping

1196
01:10:11.100 --> 01:10:14.400
 that maybe if this time I'll tell you where this word sign

1197
01:10:14.400 --> 01:10:14.700
 comes from.

1198
01:10:15.700 --> 01:10:17.800
If we know the origin of the word sign.

1199
01:10:18.900 --> 01:10:21.300
It will be nothing it will

1200
01:10:21.300 --> 01:10:23.200
 okay immediately tell you where the other words come from.

1201
01:10:25.200 --> 01:10:28.500
But anyway, let's let's do this first let's get this out of the way. So if

1202
01:10:28.500 --> 01:10:31.200
 I want the X and Y from my cosines and similarity, I'm

1203
01:10:31.200 --> 01:10:32.900
 going to come back to my notebook.

1204
01:10:34.500 --> 01:10:35.200
Let me bring this up here.

1205
01:10:37.400 --> 01:10:38.300
I will call this.

1206
01:10:41.700 --> 01:10:44.700
Cos or see some one

1207
01:10:44.700 --> 01:10:47.200
 because I'm similarity for the first comparison.

1208
01:10:48.100 --> 01:10:48.900
cosine

1209
01:10:51.200 --> 01:10:54.400
let's make it one and two right the cosine similarity of vectors

1210
01:10:54.400 --> 01:10:57.100
 1 and 2 the cosine similarity of

1211
01:10:57.100 --> 01:10:57.800
 vectors.

1212
01:11:00.300 --> 01:11:02.900
Two and three or let's make this one and three.

1213
01:11:07.500 --> 01:11:08.300
to convert to

1214
01:11:14.600 --> 01:11:15.400
Cartesian

1215
01:11:19.700 --> 01:11:20.000
what's

1216
01:11:21.800 --> 01:11:22.800
now

1217
01:11:27.500 --> 01:11:30.100
we cannot plot these wood vectors because

1218
01:11:33.900 --> 01:11:36.500
these are we gonna We

1219
01:11:36.500 --> 01:11:38.600
 have to project projectors in the two-dimensionals.

1220
01:11:39.900 --> 01:11:41.400
Space these are four dimensional.

1221
01:11:43.600 --> 01:11:46.700
So what we're going to do is we're going to create two

1222
01:11:46.700 --> 01:11:47.100
 vectors.

1223
01:11:50.400 --> 01:11:53.500
That go from all from 0 to 5. Basically, let

1224
01:11:53.500 --> 01:11:55.400
 me show you what I mean. Okay, so

1225
01:11:56.700 --> 01:11:58.600
I'm going to create those three vectors again.

1226
01:12:00.900 --> 01:12:01.600
Let this be.

1227
01:12:06.800 --> 01:12:07.200
w

1228
01:12:08.200 --> 01:12:12.400
Sub V1, or the vector 4 would

1229
01:12:11.400 --> 01:12:12.500
 1.

1230
01:12:13.800 --> 01:12:16.500
And this will be a vector with points.

1231
01:12:19.200 --> 01:12:19.900
0 to 5

1232
01:12:24.600 --> 01:12:26.200
and I'm going to draw this.

1233
01:12:28.200 --> 01:12:29.200
So we'll first draw.

1234
01:12:31.200 --> 01:12:33.300
the vector for word one

1235
01:12:34.700 --> 01:12:37.400
And then once now they have calculate this

1236
01:12:37.400 --> 01:12:40.200
 of course as similarity, we know how far the other

1237
01:12:40.200 --> 01:12:44.400
 two words are. This will be V. We what

1238
01:12:43.400 --> 01:12:46.100
 one if I run this.

1239
01:12:47.700 --> 01:12:49.700
I need to type in your PX.

1240
01:12:51.600 --> 01:12:52.400
Okay.

1241
01:12:53.600 --> 01:12:54.200
equals

1242
01:12:55.200 --> 01:12:55.500
X

1243
01:12:59.200 --> 01:13:01.300
I need to borrow the code from about.

1244
01:13:01.800 --> 01:13:02.900
All the way up here.

1245
01:13:06.200 --> 01:13:07.300
copy these

1246
01:13:21.200 --> 01:13:24.600
the x-axis will go from 0 to 15. And also the y-axis will

1247
01:13:24.600 --> 01:13:25.500
 go from 0 to 15.

1248
01:13:26.700 --> 01:13:27.800
On this one more time.

1249
01:13:30.600 --> 01:13:32.800
And what was my mistake here?

1250
01:13:33.700 --> 01:13:36.000
Let me come up here see right there before.

1251
01:13:37.200 --> 01:13:39.000
and 2D I

1252
01:13:40.500 --> 01:13:41.700
let's have actor.

1253
01:13:44.700 --> 01:13:45.900
just borrow this

1254
01:14:03.300 --> 01:14:05.700
what's the other mistake?

1255
01:14:19.400 --> 01:14:20.300
What's the issue?

1256
01:14:25.400 --> 01:14:26.300
It's literally the same code.

1257
01:14:27.500 --> 01:14:29.700
0 to 5 0 and 5

1258
01:14:39.700 --> 01:14:41.800
Let me just copy these functions again. Maybe I

1259
01:14:43.400 --> 01:14:45.300
Did something to overwrite what these were?

1260
01:14:46.700 --> 01:14:47.400
one more time

1261
01:14:53.300 --> 01:14:53.700
here

1262
01:14:58.700 --> 01:14:58.900
Okay.

1263
01:15:02.300 --> 01:15:03.700
These are the functions from before.

1264
01:15:04.600 --> 01:15:08.000
Again, the X will go from 0 to 15. This

1265
01:15:07.100 --> 01:15:10.000
 will go shoot 15.

1266
01:15:11.700 --> 01:15:14.100
Okay, there are everything else is the same

1267
01:15:14.100 --> 01:15:16.100
 run this one more time.

1268
01:15:19.100 --> 01:15:19.700
Now what?

1269
01:15:23.200 --> 01:15:23.600
Is it me or?

1270
01:15:25.600 --> 01:15:25.900
Something's different here.

1271
01:15:27.500 --> 01:15:29.300
the draw functions the same as before

1272
01:15:31.200 --> 01:15:33.600
That's the same as before. Why is it not up here?

1273
01:15:35.400 --> 01:15:37.200
Come on now.

1274
01:15:43.000 --> 01:15:43.100
see

1275
01:15:49.100 --> 01:15:51.200
Here should we right there?

1276
01:15:58.800 --> 01:16:00.900
This cannot be this has nothing to do with it.

1277
01:16:02.200 --> 01:16:03.600
Does have something to do with it?

1278
01:16:04.200 --> 01:16:05.600
something is wrong because

1279
01:16:06.700 --> 01:16:09.100
yes, yes. Yes. See I keep

1280
01:16:10.100 --> 01:16:10.900
making the mistake

1281
01:16:11.800 --> 01:16:13.000
This is not the origin. This is

1282
01:16:15.400 --> 01:16:19.000
Five five okay five steps from the x-axis five

1283
01:16:18.400 --> 01:16:20.200
 steps for the y-axis.

1284
01:16:21.200 --> 01:16:22.700
Let me go back to what I had before.

1285
01:16:25.600 --> 01:16:27.600
I need to be more careful.

1286
01:16:28.800 --> 01:16:31.100
Okay, so that's the let me let me let me make

1287
01:16:31.100 --> 01:16:33.900
 the vector a bit longer. So we'll go from 10 to 10.

1288
01:16:38.500 --> 01:16:41.400
Now after we have calculated the cosine similarity.

1289
01:16:44.500 --> 01:16:47.900
We need to grab the X and Y for the second.

1290
01:16:50.600 --> 01:16:51.000
vector

1291
01:16:53.100 --> 01:16:53.800
so

1292
01:16:55.400 --> 01:16:58.400
the formula was as follows if I want to draw the second

1293
01:16:58.400 --> 01:16:58.900
 vector.

1294
01:17:01.600 --> 01:17:02.700
I'm going to go V.

1295
01:17:03.800 --> 01:17:04.500
W2

1296
01:17:05.800 --> 01:17:06.100
Okay.

1297
01:17:06.900 --> 01:17:09.300
the position of this Vector is relative to

1298
01:17:09.300 --> 01:17:09.900
 Vector 1

1299
01:17:10.600 --> 01:17:11.800
so for its X

1300
01:17:15.700 --> 01:17:18.100
Or it's X I'm going to call the vector function to draw a

1301
01:17:18.100 --> 01:17:18.300
 vector.

1302
01:17:20.200 --> 01:17:22.200
And this will have to be a tool.

1303
01:17:23.700 --> 01:17:25.500
So for we have X and Y, correct.

1304
01:17:26.500 --> 01:17:29.600
What is the X going to be X is going to be the radius? So

1305
01:17:29.600 --> 01:17:32.100
 right now what what do you think is the radius of this vector?

1306
01:17:34.700 --> 01:17:37.300
I mean if this was our if this were on the polar coordinate step,

1307
01:17:37.300 --> 01:17:39.600
 which it isn't right now, what would be its radius?

1308
01:17:42.200 --> 01:17:43.200
square root of 200

1309
01:17:46.700 --> 01:17:47.500
exactly 10

1310
01:17:49.800 --> 01:17:51.600
it will be 10. So that's the r

1311
01:17:52.700 --> 01:17:53.800
what was it then times?

1312
01:17:54.800 --> 01:17:56.800
the cosine of

1313
01:18:00.200 --> 01:18:02.500
Data, so here this is the our data.

1314
01:18:03.200 --> 01:18:04.100
So it's going to be mad.

1315
01:18:06.400 --> 01:18:09.800
What the signal of course? I think it was signed math that

1316
01:18:09.800 --> 01:18:11.400
 sign of C.

1317
01:18:12.900 --> 01:18:14.400
Because I'm similarity of one or two.

1318
01:18:15.700 --> 01:18:18.200
Same thing for why it's gonna copy this bit.

1319
01:18:20.800 --> 01:18:22.300
But this would be cosine.

1320
01:18:25.200 --> 01:18:27.100
Okay. Now I'm going to draw the second vector.

1321
01:18:29.800 --> 01:18:30.900
We'll make this red.

1322
01:18:36.200 --> 01:18:36.400
Okay.

1323
01:18:39.100 --> 01:18:42.100
Oh, well, is it good or bad or it is closed or

1324
01:18:42.100 --> 01:18:45.200
 not not close. There's only one way to not just to create a third vector.

1325
01:18:45.800 --> 01:18:47.600
So I'm going to create a third vector.

1326
01:18:49.300 --> 01:18:52.300
This will be the cause now the angle for these functions would

1327
01:18:52.300 --> 01:18:54.200
 be the cosine similarity of 1 and 3.

1328
01:18:55.100 --> 01:18:57.900
So we first compare one and two now we compare one and three.

1329
01:18:59.300 --> 01:19:02.100
And let me make the first Vector black.

1330
01:19:03.800 --> 01:19:05.100
That's the def. That's our.

1331
01:19:08.400 --> 01:19:09.200
point of reference

1332
01:19:10.400 --> 01:19:12.300
and then we will make the green one.

1333
01:19:13.200 --> 01:19:14.400
Let me let me draw this again.

1334
01:19:15.300 --> 01:19:17.000
Just so you can see the black vector.

1335
01:19:18.400 --> 01:19:19.500
That's the original one.

1336
01:19:21.800 --> 01:19:22.300
and then

1337
01:19:24.200 --> 01:19:25.600
let's add the third vector.

1338
01:19:30.300 --> 01:19:31.000
third Factor

1339
01:19:32.900 --> 01:19:35.400
Now one more time because I forgot to change reassign

1340
01:19:35.400 --> 01:19:38.300
 this value. So again, this is the first vector.

1341
01:19:39.300 --> 01:19:42.200
This was a dog right supposedly dog. This

1342
01:19:42.200 --> 01:19:42.600
 was cat.

1343
01:19:43.300 --> 01:19:44.600
And now let's do the building.

1344
01:19:48.400 --> 01:19:49.300
And let's make the color.

1345
01:19:51.100 --> 01:19:51.300
green

1346
01:19:54.000 --> 01:19:54.300
Yeah.

1347
01:19:55.500 --> 01:19:56.100
So you can see.

1348
01:19:57.100 --> 01:19:58.000
dog and cat

1349
01:19:59.200 --> 01:20:00.800
all closer to each other have a

1350
01:20:03.300 --> 01:20:04.000
smaller angle

1351
01:20:06.300 --> 01:20:09.100
This cosine similar. I really like because

1352
01:20:12.600 --> 01:20:15.600
the broad applications and natural language processing

1353
01:20:19.200 --> 01:20:21.300
let me so let me see if I can show you an example.

1354
01:20:22.300 --> 01:20:25.400
a very simplified version of

1355
01:20:26.800 --> 01:20:27.600
autocomplete

1356
01:20:29.400 --> 01:20:33.100
But it's this idea clear that you understood what

1357
01:20:33.100 --> 01:20:37.000
 we've done here like the purpose that up practical use

1358
01:20:36.200 --> 01:20:37.800
 case of vectors.

1359
01:20:38.900 --> 01:20:41.100
And here the cosine similarity of

1360
01:20:41.100 --> 01:20:41.700
 two word vectors.

1361
01:20:45.100 --> 01:20:46.100
Any questions before I?

1362
01:20:47.100 --> 01:20:47.700
Go any further.

1363
01:20:54.100 --> 01:20:54.800
No questions at all.

1364
01:20:56.300 --> 01:20:57.800
Okay. Why do you think about a question let me

1365
01:21:00.600 --> 01:21:02.600
Show you how we do this information retriever.

1366
01:21:05.800 --> 01:21:07.000
Now, how do we do it?

1367
01:21:09.800 --> 01:21:11.500
There's something called the individed index.

1368
01:21:13.600 --> 01:21:16.200
But that's not relevant. So let's

1369
01:21:16.200 --> 01:21:18.000
 say we have the following words, right? We have apple.

1370
01:21:19.100 --> 01:21:20.700
We have application.

1371
01:21:23.300 --> 01:21:23.600
we have

1372
01:21:26.300 --> 01:21:28.000
what that doesn't even start with.

1373
01:21:29.400 --> 01:21:30.500
a Brazil

1374
01:21:32.100 --> 01:21:33.600
and let's do one more word.

1375
01:21:35.600 --> 01:21:36.200
We'll make this.

1376
01:21:40.800 --> 01:21:41.600
catapult

1377
01:21:48.600 --> 01:21:51.300
How these how are these words represented? Let

1378
01:21:51.300 --> 01:21:54.900
 me let me let me look up something my quote on GitHub because I implemented this

1379
01:21:54.900 --> 01:21:56.300
 for a search engine.

1380
01:21:57.500 --> 01:21:58.400
Let me cheat.

1381
01:21:58.900 --> 01:21:59.800
How did I do it?

1382
01:22:00.400 --> 01:22:01.800
It's gonna go to get up very quickly.

1383
01:22:06.900 --> 01:22:08.500
See W3.

1384
01:22:11.100 --> 01:22:14.200
I know we have to represent this as wood vectors, but

1385
01:22:14.200 --> 01:22:17.700
 how do we do it when the woods are of different length? I don't remember.

1386
01:22:19.700 --> 01:22:20.700
So I'm going to go to.

1387
01:22:22.300 --> 01:22:22.800
0

1388
01:22:42.500 --> 01:22:44.000
I'll show you now. I think I found it.

1389
01:22:57.300 --> 01:23:00.300
Oh, this is not well. Yeah, but okay. This one

1390
01:23:00.300 --> 01:23:03.400
 would be too complicated because then I've talked about something called

1391
01:23:03.400 --> 01:23:03.900
 a posting.

1392
01:23:04.500 --> 01:23:08.000
Anyway, what I'll do is this okay. I will turn this

1393
01:23:07.200 --> 01:23:08.700
 into a dictionary.

1394
01:23:11.600 --> 01:23:11.800
and

1395
01:23:14.100 --> 01:23:17.200
how many letters is this how many characters zero?

1396
01:23:18.200 --> 01:23:22.600
One two, three, four, five six seven eight nine 10 11. I

1397
01:23:21.600 --> 01:23:24.000
 will represent these as vectors.

1398
01:23:27.500 --> 01:23:28.300
But I need to make them.

1399
01:23:37.200 --> 01:23:40.300
basically what I'm trying to show you this when

1400
01:23:40.300 --> 01:23:42.900
 you do something like this, how is Google able to figure out

1401
01:23:43.900 --> 01:23:46.100
And suggest did you meet Apple Mac? How does it do

1402
01:23:46.100 --> 01:23:46.200
 this?

1403
01:23:46.900 --> 01:23:49.500
So let me I need to make this implementation work

1404
01:23:49.500 --> 01:23:51.100
 and I only have four minutes.

1405
01:23:53.700 --> 01:23:55.900
Should this be a probability distribution?

1406
01:23:57.600 --> 01:24:00.300
So this is going to be the index. That's

1407
01:24:00.300 --> 01:24:00.600
 what we call it.

1408
01:24:05.200 --> 01:24:07.700
and the word or the query that the user types

1409
01:24:10.100 --> 01:24:11.200
is going to be apple.

1410
01:24:19.300 --> 01:24:20.300
These will all be

1411
01:24:23.800 --> 01:24:25.200
numerical values

1412
01:24:26.500 --> 01:24:27.300
How do we do this?

1413
01:24:29.900 --> 01:24:31.500
How can I simplify the code?

1414
01:24:43.100 --> 01:24:44.500
I have the full implementation, by the way.

1415
01:24:45.400 --> 01:24:48.400
It's going to use this from module 4, but I want to do it

1416
01:24:48.400 --> 01:24:48.600
 now.

1417
01:24:54.900 --> 01:24:57.500
Okay, what we do is we will calculate the cosine similarity

1418
01:24:57.500 --> 01:24:59.200
 of all four all four words.

1419
01:25:00.300 --> 01:25:03.200
So let me let me keep this very simple. I will make this.

1420
01:25:06.100 --> 01:25:07.500
0.7.

1421
01:25:09.600 --> 01:25:11.700
0.3 0.2.

1422
01:25:12.700 --> 01:25:15.600
I will make the 0.5 0.5.

1423
01:25:17.500 --> 01:25:18.400
zero point

1424
01:25:20.000 --> 01:25:20.300
well

1425
01:25:21.400 --> 01:25:22.200
That's all we get.

1426
01:25:22.800 --> 01:25:25.300
This will be 0.2. I'm just

1427
01:25:25.300 --> 01:25:28.700
 making up numbers and making sure they're different

1428
01:25:28.700 --> 01:25:31.200
 0.3 0.5.

1429
01:25:33.600 --> 01:25:34.200
0

1430
01:25:37.500 --> 01:25:38.600
0.8.

1431
01:25:40.900 --> 01:25:41.700
zero point

1432
01:25:44.100 --> 01:25:45.500
2 0.1

1433
01:25:48.300 --> 01:25:52.100
now the trick here is also the query has to be made a

1434
01:25:54.500 --> 01:25:55.400
distribution

1435
01:26:07.600 --> 01:26:09.000
how would I make this distribution?

1436
01:26:13.600 --> 01:26:15.100
When it's not even an index.

1437
01:26:19.100 --> 01:26:22.500
But we need something called an alphabet and alphabet basically represents every

1438
01:26:22.500 --> 01:26:23.200
 letter with a number.

1439
01:26:24.400 --> 01:26:25.900
You know like UTF encoding.

1440
01:26:27.400 --> 01:26:30.100
Well we need to do is we would need to go from we would need

1441
01:26:30.100 --> 01:26:30.800
 to take every character.

1442
01:26:32.200 --> 01:26:35.500
Look up it's encoding like yes, depending on what version

1443
01:26:35.500 --> 01:26:39.800
 of python you're running and actually

1444
01:26:39.800 --> 01:26:42.600
 in this case what what point release you're

1445
01:26:42.600 --> 01:26:42.700
 using?

1446
01:26:43.800 --> 01:26:45.000
dictionaries

1447
01:26:46.100 --> 01:26:46.900
are

1448
01:26:48.100 --> 01:26:51.400
automatically ordered dictionary so you can access them

1449
01:26:51.400 --> 01:26:52.300
 by an index.

1450
01:26:53.600 --> 01:26:56.400
but you have to be careful about what version you

1451
01:26:56.400 --> 01:26:58.100
 are using because they turned it on and like

1452
01:26:58.900 --> 01:27:01.300
3.6 something and they turn it off

1453
01:27:01.300 --> 01:27:05.000
 and 3.62 and then turned it back on and 3.63.

1454
01:27:06.100 --> 01:27:09.400
So, I don't know not sure if you could try it, but basically they

1455
01:27:09.400 --> 01:27:12.500
 decided at some point that all dictionary should be Auto ordered.

1456
01:27:13.300 --> 01:27:14.700
instead of randomly ordered

1457
01:27:15.700 --> 01:27:18.100
The order won't matter, but then they turned it on

1458
01:27:18.100 --> 01:27:21.400
 and off. But if it's auto-ordered then you can access it

1459
01:27:21.400 --> 01:27:24.200
 by index. Let me tell you why the order is not important.

1460
01:27:27.600 --> 01:27:30.600
Let's say the user has typed this one. Correct? We

1461
01:27:30.600 --> 01:27:32.000
 don't need to go through all of the

1462
01:27:33.600 --> 01:27:35.700
then we don't we don't need to go through the entire.

1463
01:27:37.100 --> 01:27:37.600
index

1464
01:27:38.200 --> 01:27:39.800
because we can say all right, just

1465
01:27:40.600 --> 01:27:41.700
look at the first two letters.

1466
01:27:42.500 --> 01:27:44.800
It's AP. Well we can do is we can just

1467
01:27:46.200 --> 01:27:47.800
extract from the syntax

1468
01:27:48.700 --> 01:27:50.100
all the words that begin with ap

1469
01:27:50.700 --> 01:27:53.400
and then if we're going to do a cosine similarity, we'll

1470
01:27:53.400 --> 01:27:56.100
 do cosine similarity only on the words that begin with

1471
01:27:56.100 --> 01:27:56.900
 again p

1472
01:27:57.900 --> 01:27:58.100
so

1473
01:27:59.100 --> 01:28:02.100
our search time complexity won't be

1474
01:28:02.100 --> 01:28:06.200
 all of them. It will be something substantially well.

1475
01:28:08.100 --> 01:28:08.700
Less than that.

1476
01:28:09.300 --> 01:28:12.500
He yeah, but can you search a dictionary

1477
01:28:12.500 --> 01:28:13.800
 on a partial keyword?

1478
01:28:17.700 --> 01:28:20.400
Yeah, so we can do yes,

1479
01:28:20.400 --> 01:28:23.500
 we can turn this into well, there

1480
01:28:23.500 --> 01:28:24.600
 are different implementations of this.

1481
01:28:27.700 --> 01:28:28.700
Let me show you something.

1482
01:28:31.700 --> 01:28:34.400
So if you want to get the keys of this dictionary would

1483
01:28:34.400 --> 01:28:34.500
 go.

1484
01:28:35.400 --> 01:28:37.300
index dot keys

1485
01:28:39.600 --> 01:28:42.500
and that will give us these letters. Now you're saying that in different

1486
01:28:42.500 --> 01:28:45.300
 implementation of python these may or

1487
01:28:45.300 --> 01:28:46.100
 may not be ordered, correct?

1488
01:28:48.200 --> 01:28:51.000
Right there and by order, I mean they're in the

1489
01:28:51.300 --> 01:28:55.000
 order. They were entered not not necessary if I

1490
01:28:54.100 --> 01:28:56.900
 would put catapult up here. Yeah.

1491
01:28:58.400 --> 01:29:01.200
If it's using order dictionaries, you could just search

1492
01:29:01.200 --> 01:29:05.100
 it by you starting its index zero and and walk

1493
01:29:04.100 --> 01:29:07.200
 through it. But this works too. I mean,

1494
01:29:07.200 --> 01:29:10.800
 but you still have you still have a list that you have to walk through, right? Mmm.

1495
01:29:13.300 --> 01:29:13.500
No.

1496
01:29:16.200 --> 01:29:18.100
We would have to sort this array.

1497
01:29:20.500 --> 01:29:23.100
Now here's a thing. Yeah. He's the thing

1498
01:29:23.100 --> 01:29:24.000
 about search engines, right?

1499
01:29:24.600 --> 01:29:27.300
they put the entirety of the index which

1500
01:29:27.300 --> 01:29:30.400
 can be really huge into memory into

1501
01:29:30.400 --> 01:29:34.000
 random access memory now the computers that

1502
01:29:33.300 --> 01:29:34.600
 Google have

1503
01:29:35.700 --> 01:29:36.000
have

1504
01:29:37.600 --> 01:29:39.200
especially large amounts of

1505
01:29:40.100 --> 01:29:41.300
Random Access Memory

1506
01:29:42.200 --> 01:29:45.000
Because well they want the search to be

1507
01:29:45.000 --> 01:29:45.600
 instantaneous.

1508
01:29:47.800 --> 01:29:50.400
So where time complexity

1509
01:29:50.400 --> 01:29:51.200
 is a problem?

1510
01:29:52.200 --> 01:29:54.400
So for example sorting a large.

1511
01:29:55.300 --> 01:29:58.900
list of words space complexity can

1512
01:29:59.800 --> 01:30:02.400
Come into handy why well, we don't need we don't

1513
01:30:02.400 --> 01:30:05.200
 need to yes. This is a list but we can what we

1514
01:30:05.200 --> 01:30:08.100
 can do is we can turn this list into a binary tree.

1515
01:30:08.500 --> 01:30:11.200
We can Traverse it beforehand. This is it.

1516
01:30:11.200 --> 01:30:14.900
 This is a key Point by the way, we won't do this run in

1517
01:30:14.900 --> 01:30:17.100
 runtime when the switch is usually we will do this well ahead.

1518
01:30:17.800 --> 01:30:20.300
So we can we will spare like one hour or

1519
01:30:20.300 --> 01:30:21.600
 a couple of hours of the day.

1520
01:30:22.500 --> 01:30:25.000
So basically we have this right we have

1521
01:30:25.500 --> 01:30:28.900
 imagine we have two inverted indices one that has already been sorted and

1522
01:30:28.900 --> 01:30:30.200
 one that is consistently growing.

1523
01:30:30.900 --> 01:30:32.100
So while we are

1524
01:30:34.700 --> 01:30:37.100
converting this alphabet this Innovative indexer to

1525
01:30:37.100 --> 01:30:41.200
 a binary tree and making sure everything is alphabetically sorted

1526
01:30:40.200 --> 01:30:43.100
 and and the correct order we want

1527
01:30:43.100 --> 01:30:46.900
 we already have a pre-existing inverted index that's

1528
01:30:46.900 --> 01:30:50.100
 once we have indexed and converted this

1529
01:30:49.100 --> 01:30:52.200
 list into a binary research

1530
01:30:52.200 --> 01:30:55.800
 tree. We will replace the new inverter index with

1531
01:30:55.800 --> 01:30:56.100
 the old one.

1532
01:30:57.300 --> 01:31:00.400
once we have binary search tree implementation

1533
01:31:00.400 --> 01:31:03.400
 of this in-memory then again we

1534
01:31:03.400 --> 01:31:03.800
 could

1535
01:31:06.100 --> 01:31:09.200
Our search time complexity will become all log oven.

1536
01:31:10.400 --> 01:31:11.700
So it will be a fraction of the time.

1537
01:31:15.500 --> 01:31:18.800
The point I'm trying to say is the point. I'm trying to make it in practice.

1538
01:31:18.800 --> 01:31:21.400
 This wouldn't be a problem. So whether it's Alpha

1539
01:31:21.400 --> 01:31:24.500
 alphabetically sorted or not. We're not going to go through a

1540
01:31:24.500 --> 01:31:24.600
 list.

1541
01:31:25.200 --> 01:31:27.700
We're going to go through a binary binary tree.

1542
01:31:33.100 --> 01:31:36.500
He's what I'm going to do since we've run out of time. I'm going to take this.

1543
01:31:36.500 --> 01:31:39.900
 This is the code I had by the way, this is the source code. I'm referring

1544
01:31:39.900 --> 01:31:41.500
 to so, this is for an actual project we had.

1545
01:31:42.800 --> 01:31:45.100
Where we use cosine similarity to go now. This is

1546
01:31:45.100 --> 01:31:47.300
 a small subset of the inverted index.

1547
01:31:48.800 --> 01:31:49.600
the

1548
01:31:52.800 --> 01:31:55.700
actual search engine has millions of

1549
01:31:55.700 --> 01:31:57.500
 web pages. So it's a very large.

1550
01:31:58.800 --> 01:32:01.000
the dictionary of words

1551
01:32:02.500 --> 01:32:03.800
So what I'll do is I will.

1552
01:32:05.200 --> 01:32:08.800
Use this code I will modify this code and obviously add

1553
01:32:08.800 --> 01:32:11.900
 comments to it so you can see how cosine similarity

1554
01:32:11.900 --> 01:32:13.100
 could be used to do.

1555
01:32:14.300 --> 01:32:14.600
this

1556
01:32:16.500 --> 01:32:19.200
I mean, we just looked at an example where we compared the words

1557
01:32:19.200 --> 01:32:21.900
 wooden dog to building.

1558
01:32:22.600 --> 01:32:23.200
and we've seen

1559
01:32:26.400 --> 01:32:29.500
You know how cosine similarity can help us and how

1560
01:32:29.500 --> 01:32:32.100
 we can go from political Cartesian space, but I

1561
01:32:32.100 --> 01:32:35.400
 I want to include this because later on

1562
01:32:35.400 --> 01:32:38.100
 we're going to reference it in module 4.

1563
01:32:39.500 --> 01:32:43.500
Anyway, that's it for today's session Everyone. By the

1564
01:32:43.500 --> 01:32:45.500
 way, if you did not notice I posted.

1565
01:32:46.800 --> 01:32:47.400
the first assignment

1566
01:32:48.400 --> 01:32:49.200
very similar to

1567
01:32:50.300 --> 01:32:53.200
the linear program store we did in module 1

1568
01:32:54.200 --> 01:32:55.300
so just keep

1569
01:32:56.200 --> 01:32:57.900
just keep that in mind. It's due.

1570
01:32:59.300 --> 01:33:00.100
next Monday

1571
01:33:01.100 --> 01:33:04.900
and very shortly. I'll also post the assignment for module 2.

1572
01:33:05.600 --> 01:33:08.300
But thank you for joining me today. I will see you again

1573
01:33:08.300 --> 01:33:08.700
 on.

1574
01:33:09.800 --> 01:33:10.400
Friday

1575
01:33:11.300 --> 01:33:12.600
until then. Take care. Bye.
