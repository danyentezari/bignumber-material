WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.100 --> 00:00:03.000
Now, let me go ahead and return to the notebook.

1
00:00:04.200 --> 00:00:07.200
And we will also see how this appears when we

2
00:00:07.200 --> 00:00:07.900
 plot the numbers.

3
00:00:08.500 --> 00:00:09.400
When we plot the vectors.

4
00:00:10.200 --> 00:00:13.600
now I'm going to I've written some created some

5
00:00:13.600 --> 00:00:14.700
 functions that allow us to

6
00:00:19.100 --> 00:00:19.400
create

7
00:00:20.500 --> 00:00:21.100
vectors

8
00:00:22.100 --> 00:00:23.600
let me show you one example of

9
00:00:25.400 --> 00:00:28.300
creating a drawing a line on math product because with mathpot lip

10
00:00:28.300 --> 00:00:30.700
 the way you draw a line on a plot.

11
00:00:31.300 --> 00:00:32.600
is by creating

12
00:00:33.400 --> 00:00:35.100
a sequence of points

13
00:00:36.100 --> 00:00:37.000
XY points

14
00:00:37.900 --> 00:00:39.500
and then get that gives the

15
00:00:42.300 --> 00:00:46.100
the appearance of there being aligned. So let me show you some simple

16
00:00:45.100 --> 00:00:46.400
 example.

17
00:00:49.700 --> 00:00:52.600
First I will create a figure.

18
00:00:54.700 --> 00:00:55.700
and assign

19
00:00:56.900 --> 00:00:59.200
a variable ax to the axes of the figure

20
00:01:01.300 --> 00:01:04.200
by doing this we can set the limits of

21
00:01:04.200 --> 00:01:05.000
 the axes.

22
00:01:06.100 --> 00:01:09.000
Set the labels of the axes. So I'll show

23
00:01:09.200 --> 00:01:09.400
 you what I mean.

24
00:01:10.300 --> 00:01:13.300
And I'm going so here I'll do just that I'm going

25
00:01:13.300 --> 00:01:16.000
 to have this is going to be a two-dimensional example. So this is

26
00:01:17.500 --> 00:01:20.100
get rid of that vectors into the

27
00:01:24.800 --> 00:01:27.300
the x-axis will go from negative 15 to 15.

28
00:01:28.700 --> 00:01:31.100
The y-axis will go from 0 to 10.

29
00:01:32.200 --> 00:01:35.600
So we'll have the two quadrants of the Cartesian system.

30
00:01:39.600 --> 00:01:41.500
Then I'm going to create.

31
00:01:45.500 --> 00:01:46.600
a sequence of points

32
00:01:47.900 --> 00:01:50.200
So again, how do we plot a simple Point? Let's

33
00:01:50.200 --> 00:01:51.500
 say we have P1.

34
00:01:52.400 --> 00:01:53.300
and this will be

35
00:01:54.400 --> 00:01:55.300
let's say five and five.

36
00:01:56.900 --> 00:01:59.900
of obviously the order is X and Y always the

37
00:01:59.900 --> 00:02:01.700
 case XY and then if there was a third of

38
00:02:02.400 --> 00:02:03.800
Third axis. It will be Z.

39
00:02:04.200 --> 00:02:06.400
And then the plot this point we would go.

40
00:02:07.400 --> 00:02:08.100
It would go.

41
00:02:11.100 --> 00:02:12.600
ax.plot

42
00:02:17.700 --> 00:02:19.800
P1 0 P 1

43
00:02:21.900 --> 00:02:22.200
1

44
00:02:27.500 --> 00:02:30.900
so P0 will be the point on the x-axis P1

45
00:02:30.900 --> 00:02:32.200
 would be the point of the y axis.

46
00:02:32.800 --> 00:02:35.000
Very straightforward. That's what I want to show you.

47
00:02:35.800 --> 00:02:36.200
 That's the marker.

48
00:02:37.700 --> 00:02:38.100
and so

49
00:02:41.500 --> 00:02:44.000
in order for us to draw a line from the origin.

50
00:02:45.200 --> 00:02:48.500
To this point we need to create a

51
00:02:48.500 --> 00:02:49.500
 sequence of these points.

52
00:02:50.800 --> 00:02:51.500
So something.

53
00:02:52.700 --> 00:02:53.500
to this effect

54
00:02:54.800 --> 00:02:55.300
this would be

55
00:02:57.800 --> 00:02:58.400
let's say

56
00:02:59.900 --> 00:03:00.700
this is the first point.

57
00:03:01.900 --> 00:03:04.100
A second point this is the third point.

58
00:03:05.900 --> 00:03:08.900
And let's just make this two to two five

59
00:03:08.900 --> 00:03:09.000
 five.

60
00:03:12.300 --> 00:03:13.200
and seven seven

61
00:03:17.400 --> 00:03:18.800
and I will write this code.

62
00:03:19.600 --> 00:03:20.800
copy this code twice

63
00:03:21.700 --> 00:03:22.600
This will be P2.

64
00:03:29.100 --> 00:03:30.200
This will be P2.

65
00:03:33.600 --> 00:03:34.700
This will be P3.

66
00:03:39.500 --> 00:03:42.200
Okay, so we can get a light to go this

67
00:03:42.200 --> 00:03:45.800
 way. Now. There are two types of three types of vectors. There

68
00:03:45.800 --> 00:03:45.900
 are.

69
00:03:48.100 --> 00:03:49.000
position vectors

70
00:03:52.500 --> 00:03:53.700
That can appear anywhere.

71
00:03:55.400 --> 00:03:57.100
There are displacement vectors.

72
00:03:58.500 --> 00:04:00.700
at this

73
00:04:02.600 --> 00:04:05.400
Position Vector is one where let me actually show

74
00:04:05.400 --> 00:04:09.000
 you the pictures just easier to explain with pictures so

75
00:04:08.000 --> 00:04:09.500
 position.

76
00:04:11.200 --> 00:04:12.600
versus displacement

77
00:04:13.600 --> 00:04:14.100
vector

78
00:04:15.100 --> 00:04:18.800
and there's something called I have velocity Vector. We're going to look at the one

79
00:04:18.800 --> 00:04:20.600
 that we're doing is called a displacement vector.

80
00:04:22.300 --> 00:04:23.500
so a position vector

81
00:04:25.400 --> 00:04:26.700
Is something like this?

82
00:04:27.800 --> 00:04:30.900
It's for example the line segment, OA.

83
00:04:31.700 --> 00:04:32.400
But it is not.

84
00:04:33.600 --> 00:04:36.600
Associated with some origin or as displacement Vector

85
00:04:36.600 --> 00:04:39.200
 is associated with a position in the from the

86
00:04:39.200 --> 00:04:39.500
 origin.

87
00:04:40.600 --> 00:04:40.900
Okay.

88
00:04:43.300 --> 00:04:46.600
And I'll tell you why I'm bringing that

89
00:04:46.600 --> 00:04:49.700
 up because what we do Vector Edition,

90
00:04:49.700 --> 00:04:52.700
 I want to we will displace a

91
00:04:52.700 --> 00:04:55.400
 vector to show you so we can understand what's going

92
00:04:55.400 --> 00:04:57.100
 on with the with the addition.

93
00:04:57.900 --> 00:05:00.800
Anyway, what I'm going to do now is I'm going to use a

94
00:05:00.800 --> 00:05:03.200
 code from numpy. They'll allow

95
00:05:03.200 --> 00:05:03.700
 me to generate.

96
00:05:04.500 --> 00:05:06.400
Like a hundred such points.

97
00:05:08.200 --> 00:05:09.900
And that will give the appearance of a line.

98
00:05:11.100 --> 00:05:14.100
Okay, so instead of doing this manually, I'm going to get rid

99
00:05:14.100 --> 00:05:14.500
 of these.

100
00:05:15.500 --> 00:05:16.500
and I'm going to use

101
00:05:17.600 --> 00:05:20.100
sequence of points to to you know

102
00:05:20.100 --> 00:05:23.200
 to give the impression of a line and here's the

103
00:05:23.200 --> 00:05:24.300
 code. So there's something called.

104
00:05:27.200 --> 00:05:30.000
lens space linear space from numpy

105
00:05:33.500 --> 00:05:35.800
so we go NP double in space.

106
00:05:36.700 --> 00:05:38.600
And this takes three arguments.

107
00:05:40.200 --> 00:05:40.500
the

108
00:05:42.400 --> 00:05:44.000
so you're going to create a list of values, right?

109
00:05:45.300 --> 00:05:46.100
the starting number

110
00:05:47.700 --> 00:05:49.200
the ending number. Let's say 5.

111
00:05:50.500 --> 00:05:51.500
and then the number of

112
00:05:54.400 --> 00:05:56.200
values

113
00:05:57.500 --> 00:06:00.100
that you will generate from 0 to 5. So if I say 100

114
00:06:02.200 --> 00:06:04.300
then you'll get something, you know like this.

115
00:06:09.300 --> 00:06:12.400
Small link criminals leading all the way to five. So that's 100

116
00:06:12.400 --> 00:06:12.600
 points.

117
00:06:13.200 --> 00:06:16.200
That's for the egg. Now. Let's say this is for the x-axis. So I'm

118
00:06:16.200 --> 00:06:19.100
 going to go x equals NP that linear space.

119
00:06:21.400 --> 00:06:23.800
0 to 5 and then the same thing for the y-axis.

120
00:06:26.400 --> 00:06:27.500
And I can go.

121
00:06:28.400 --> 00:06:30.300
back to ax Dot Plot

122
00:06:34.400 --> 00:06:37.500
the plot argument can the plot method can either take a

123
00:06:37.500 --> 00:06:40.400
 single a scalar value or in this case a

124
00:06:40.400 --> 00:06:41.300
 list of values?

125
00:06:42.200 --> 00:06:43.000
I'm going to go X and Y.

126
00:06:44.200 --> 00:06:47.700
And I don't need to do anything else I please there we go. Yeah for

127
00:06:47.700 --> 00:06:50.600
 some reason when you when you are plotting with

128
00:06:50.600 --> 00:06:51.900
 lists of

129
00:06:52.700 --> 00:06:54.500
With a list of what? Excuse me?

130
00:06:55.500 --> 00:06:58.500
What the values that are lists you don't need to supply the additional

131
00:06:58.500 --> 00:06:59.600
 arguments, but there we go.

132
00:07:00.100 --> 00:07:02.500
The way the reason we're able to see this line is because we have

133
00:07:04.900 --> 00:07:07.500
100 points on this quarter 100x and

134
00:07:07.500 --> 00:07:07.700
 y's

135
00:07:10.100 --> 00:07:13.100
now what I want to do is I want to show multiple vectors, but I don't want to use this

136
00:07:13.100 --> 00:07:14.600
 kind of code 5 created.

137
00:07:15.500 --> 00:07:17.400
or of abstract the way the code so

138
00:07:19.800 --> 00:07:20.600
there is this function.

139
00:07:23.500 --> 00:07:25.200
That I've created it's called.

140
00:07:29.500 --> 00:07:30.600
Vic so I'm going to get rid of these.

141
00:07:35.100 --> 00:07:36.500
And it takes as argument.

142
00:07:37.900 --> 00:07:38.900
the X and Y points

143
00:07:40.400 --> 00:07:43.200
as a tuple so points will be at Tuple of XY.

144
00:07:44.100 --> 00:07:47.200
Then the optionally the displacement along the X and

145
00:07:47.200 --> 00:07:47.600
 Y axis.

146
00:07:50.800 --> 00:07:54.400
And all it's going to do is it's going to well start

147
00:07:53.400 --> 00:07:56.200
 at the on the x-axis. It will start at

148
00:07:56.200 --> 00:07:57.500
 the origin by default at zero.

149
00:07:58.300 --> 00:07:59.400
It will start at the origin.

150
00:08:00.900 --> 00:08:01.100
and

151
00:08:02.300 --> 00:08:05.500
the stopping position

152
00:08:05.500 --> 00:08:06.200
 on the x-axis

153
00:08:07.200 --> 00:08:09.700
And it will generate a hundred sequence of numbers just like we saw.

154
00:08:11.400 --> 00:08:14.100
And then it will return the Tuple.

155
00:08:15.200 --> 00:08:15.500
of

156
00:08:16.800 --> 00:08:19.700
lists, so this will be a list. This will be a list and

157
00:08:19.700 --> 00:08:22.200
 there will be the Tuple but we'll convert this to

158
00:08:22.200 --> 00:08:25.500
 another by array. Why because what we want to perform the vector addition

159
00:08:25.500 --> 00:08:27.200
 and scalar multiplication.

160
00:08:27.800 --> 00:08:30.100
And numpy object will allow us

161
00:08:30.100 --> 00:08:31.100
 to do that do that.

162
00:08:32.700 --> 00:08:35.100
Then I have another function called Draw.

163
00:08:45.300 --> 00:08:48.500
So this will create a linear space for a vector.

164
00:08:49.700 --> 00:08:51.300
And this will draw the vector on the subplot.

165
00:08:52.700 --> 00:08:54.800
So this will take as argument a vector.

166
00:08:55.700 --> 00:08:56.300
which will be

167
00:08:57.600 --> 00:08:59.800
a tuple where the elements are lists

168
00:09:00.700 --> 00:09:00.900
so

169
00:09:03.400 --> 00:09:05.000
Basically, we will be this V.

170
00:09:06.900 --> 00:09:08.300
Will be something that looks like this.

171
00:09:11.500 --> 00:09:13.600
Okay a list of values from 0.

172
00:09:14.900 --> 00:09:17.400
0.01 Baba all

173
00:09:17.400 --> 00:09:18.500
 the way to for example 5

174
00:09:19.700 --> 00:09:21.200
the same thing for the y-axis

175
00:09:23.200 --> 00:09:25.400
So when we do math, we really just need.

176
00:09:26.600 --> 00:09:29.100
One point on the x-axis one point on the y

177
00:09:29.100 --> 00:09:29.300
 axis.

178
00:09:29.900 --> 00:09:32.400
That will give us for example somewhere there. But since we

179
00:09:32.400 --> 00:09:35.400
 want to draw the line, we also have to generate the points

180
00:09:35.400 --> 00:09:36.800
 leading up to that point.

181
00:09:38.200 --> 00:09:39.200
So that's what this function does.

182
00:09:41.600 --> 00:09:44.300
That's what this function does that we pass it to the draw function.

183
00:09:45.300 --> 00:09:47.500
And of course we can we once we have

184
00:09:48.900 --> 00:09:51.100
Generated the vector. We can

185
00:09:51.100 --> 00:09:53.000
 also displace it after having generated it.

186
00:09:54.400 --> 00:09:55.800
So if I remove these displacement

187
00:09:57.500 --> 00:09:59.700
values you can see it's just

188
00:10:00.700 --> 00:10:03.700
This is going to be the list of X points on

189
00:10:03.700 --> 00:10:06.100
 the along the x-axis. This will be the points along the y axis.

190
00:10:07.100 --> 00:10:09.300
And these are just additions to displace the vector.

191
00:10:12.800 --> 00:10:16.000
Then I have this third function GP short for

192
00:10:17.700 --> 00:10:19.200
get points.

193
00:10:21.200 --> 00:10:23.600
I'll show you what this does in a second.

194
00:10:24.700 --> 00:10:27.200
Okay, let me move it for now. Let's just keep things simple.

195
00:10:27.800 --> 00:10:29.100
Now I'm going to create two vectors.

196
00:10:30.900 --> 00:10:31.900
the sub one

197
00:10:33.700 --> 00:10:34.900
which will be a vector.

198
00:10:36.600 --> 00:10:37.200
at the point

199
00:10:38.300 --> 00:10:38.600
zero

200
00:10:40.400 --> 00:10:40.700
five

201
00:10:42.600 --> 00:10:45.500
so I don't need to what once I have created these

202
00:10:45.500 --> 00:10:48.200
 functions. I have abstracted the way the numpy stuff

203
00:10:48.200 --> 00:10:51.700
 and I can just you know, you simple notation. So

204
00:10:51.700 --> 00:10:53.900
 V1 will be a vector from 0 to

205
00:10:54.900 --> 00:10:57.100
5 V 2 will be a vector.

206
00:10:59.500 --> 00:11:00.300
Let's make this one.

207
00:11:03.800 --> 00:11:04.500
well

208
00:11:06.600 --> 00:11:08.100
zero to negative 5

209
00:11:11.400 --> 00:11:12.200
actually negative

210
00:11:13.100 --> 00:11:16.600
Five, so this is five steps negative five

211
00:11:16.600 --> 00:11:17.700
 steps to the left.

212
00:11:18.400 --> 00:11:19.900
and it will appear so we'll get a v

213
00:11:20.600 --> 00:11:22.700
and then I'm going to draw these vectors. I'm going to go draw.

214
00:11:24.100 --> 00:11:27.100
The argument has to be the first vector.

215
00:11:28.200 --> 00:11:29.000
or V sub 1

216
00:11:30.100 --> 00:11:31.600
and then V oops

217
00:11:33.200 --> 00:11:34.100
T sub 2

218
00:11:37.400 --> 00:11:40.100
and the draw function needs to

219
00:11:40.100 --> 00:11:40.300
 know.

220
00:11:42.300 --> 00:11:44.300
which method to call so I'm going to use

221
00:11:45.800 --> 00:11:48.500
they plot method of the ax object

222
00:11:48.500 --> 00:11:49.400
 the axis object.

223
00:11:52.900 --> 00:11:55.900
And this is supposed to be 5.

224
00:11:58.600 --> 00:12:00.000
Supposedly five. There we go.

225
00:12:02.500 --> 00:12:02.700
Okay.

226
00:12:04.700 --> 00:12:08.000
so I'm gonna I'm not the reason I set the x-axis to

227
00:12:07.100 --> 00:12:10.300
 go from negative 15 to positive 15 because I

228
00:12:10.300 --> 00:12:10.600
 don't want to

229
00:12:13.400 --> 00:12:14.400
move away from this point

230
00:12:15.300 --> 00:12:16.700
It's just easier that way.

231
00:12:18.100 --> 00:12:20.300
Okay. So, let's see what vectorization does.

232
00:12:21.400 --> 00:12:23.700
I'm going to create a third vector.

233
00:12:26.100 --> 00:12:29.100
And the third Vector will be the sum of

234
00:12:29.100 --> 00:12:30.000
 the first two vectors.

235
00:12:32.500 --> 00:12:33.600
so in order to do this

236
00:12:34.600 --> 00:12:35.400
I need to grab.

237
00:12:36.500 --> 00:12:38.700
the coordinates of the first vector

238
00:12:42.100 --> 00:12:42.600
so this function

239
00:12:44.700 --> 00:12:47.300
GP get points will well give me the points

240
00:12:47.300 --> 00:12:49.600
 of the first Vector which is 5 and 5.

241
00:12:51.400 --> 00:12:51.600
and

242
00:12:53.300 --> 00:12:55.400
the point of the second Vector so V sub 2

243
00:12:57.500 --> 00:13:00.500
and the way this function works is a pretty straightforward.

244
00:13:03.900 --> 00:13:04.800
Let me back here.

245
00:13:07.400 --> 00:13:08.500
It will take the

246
00:13:09.700 --> 00:13:10.300
the list

247
00:13:12.600 --> 00:13:17.000
from the vectors remember a vector in this notebook.

248
00:13:18.200 --> 00:13:19.800
Is a tuple of arrays?

249
00:13:20.700 --> 00:13:23.500
So we'll take the array and the x-axis and

250
00:13:23.500 --> 00:13:24.800
 it will just grab the last element.

251
00:13:27.100 --> 00:13:30.200
So the ending the ending number and the same thing for the y-axis and

252
00:13:30.200 --> 00:13:31.500
 then we will return and appearing.

253
00:13:32.800 --> 00:13:33.000
Okay.

254
00:13:34.400 --> 00:13:37.100
And then so I'm gonna add these points together.

255
00:13:38.100 --> 00:13:39.500
And then turn it to a vector.

256
00:13:41.900 --> 00:13:43.500
I'm gonna draw this third.

257
00:13:45.300 --> 00:13:45.900
Now back here.

258
00:13:51.400 --> 00:13:53.400
And you might be able to see it.

259
00:13:55.100 --> 00:13:58.500
But you can see now that the size of this Vector is

260
00:13:58.500 --> 00:13:59.200
 double.

261
00:14:00.300 --> 00:14:01.000
these two vectors

262
00:14:01.900 --> 00:14:03.300
So I'm going to draw this in a different way.

263
00:14:04.300 --> 00:14:04.700
I'm going to

264
00:14:06.300 --> 00:14:07.900
not draw the third Vector for second.

265
00:14:08.900 --> 00:14:11.000
And what I'm gonna do is I'm gonna align these

266
00:14:11.000 --> 00:14:11.500
 vectors.

267
00:14:12.400 --> 00:14:15.400
I'm gonna stack them up on top of each other actually. So the first

268
00:14:15.400 --> 00:14:17.400
 Vector will go from 0 to 0 to

269
00:14:18.900 --> 00:14:21.700
well 0 to 5. So be a vertical

270
00:14:21.700 --> 00:14:21.900
 line.

271
00:14:22.600 --> 00:14:25.600
And I'm going to take the second vector

272
00:14:25.600 --> 00:14:28.400
 and draw it on top of the first vector.

273
00:14:29.200 --> 00:14:30.200
So this will be

274
00:14:31.700 --> 00:14:34.400
0 on the axis x

275
00:14:34.400 --> 00:14:34.600
 axis

276
00:14:36.400 --> 00:14:37.300
okay, and

277
00:14:40.400 --> 00:14:43.800
I'm gonna have to displace it here. So we

278
00:14:43.800 --> 00:14:44.200
 get this.

279
00:14:45.100 --> 00:14:48.800
But I'm going to displace the second Vector. So let's also

280
00:14:48.800 --> 00:14:49.900
 use the colors here.

281
00:14:50.600 --> 00:14:52.700
for colors I can use the

282
00:14:55.100 --> 00:14:57.500
to which function did I added color?

283
00:14:58.900 --> 00:15:01.200
See, so second Vector. I will make it

284
00:15:01.200 --> 00:15:01.400
 red.

285
00:15:03.500 --> 00:15:05.500
And the first factor I will make it blue.

286
00:15:07.400 --> 00:15:07.600
Okay.

287
00:15:12.200 --> 00:15:13.300
yeah, these belong to the

288
00:15:14.300 --> 00:15:15.300
draw function, sorry

289
00:15:21.300 --> 00:15:22.800
And this will become blue.

290
00:15:26.200 --> 00:15:29.100
Okay. Now I'm going to the I'm gonna displace the

291
00:15:30.600 --> 00:15:32.900
red line by Five Points. I'm going to go.

292
00:15:34.600 --> 00:15:35.800
Why displacement?

293
00:15:37.100 --> 00:15:37.500
five

294
00:15:39.900 --> 00:15:41.900
and then when I draw the Third

295
00:15:42.900 --> 00:15:43.400
vector

296
00:15:44.200 --> 00:15:47.400
I'm going to displace it five points across

297
00:15:47.400 --> 00:15:50.900
 the along the x-axis so we can see these two we

298
00:15:50.900 --> 00:15:53.600
 can see these vectors side by side. So X

299
00:15:53.600 --> 00:15:55.900
 displacement equals five.

300
00:15:57.500 --> 00:15:59.700
There we go. So this is what vectorization does.

301
00:16:00.700 --> 00:16:01.900
you will get

302
00:16:03.900 --> 00:16:06.300
the well

303
00:16:07.900 --> 00:16:10.300
This is what it means you get the it becomes

304
00:16:10.300 --> 00:16:11.100
 twice the length.

305
00:16:12.100 --> 00:16:15.400
So I use this example because the examples, you know you I've seen

306
00:16:15.400 --> 00:16:18.100
 in books. We're not clear enough if I type here

307
00:16:18.100 --> 00:16:19.000
 vector addition.

308
00:16:20.400 --> 00:16:21.700
You see examples like this.

309
00:16:23.700 --> 00:16:25.000
Okay. Well, maybe this is clear enough.

310
00:16:28.500 --> 00:16:29.200
or even this one

311
00:16:32.200 --> 00:16:35.600
but by here, you know displacing it. I think it made it very very

312
00:16:35.600 --> 00:16:35.900
 clear.
