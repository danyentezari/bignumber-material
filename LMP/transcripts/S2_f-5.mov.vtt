WEBVTT - This file was automatically generated by VIMEO

0
00:00:02.800 --> 00:00:03.700
vectors in Python

1
00:00:04.600 --> 00:00:06.400
essentially a list or you can even use

2
00:00:08.200 --> 00:00:09.300
two poles to do this

3
00:00:11.700 --> 00:00:14.300
Create three vectors and python.

4
00:00:17.700 --> 00:00:18.000
over

5
00:00:19.600 --> 00:00:21.400
and I'm going to use linear algebra terminology.

6
00:00:22.600 --> 00:00:23.100
are

7
00:00:30.900 --> 00:00:31.300
Yeah.

8
00:00:38.200 --> 00:00:38.500
to the power

9
00:00:39.400 --> 00:00:40.300
and where

10
00:00:43.500 --> 00:00:44.000
it is equal to 5.

11
00:00:47.900 --> 00:00:48.100
Okay.

12
00:00:50.100 --> 00:00:52.600
And call or declare.

13
00:00:53.800 --> 00:00:54.300
these

14
00:00:55.400 --> 00:00:56.100
vectors

15
00:01:01.500 --> 00:01:01.900
with

16
00:01:03.600 --> 00:01:05.800
you know, we sub 1 V sub 2 V sub 3

17
00:01:09.100 --> 00:01:11.800
so in Python, we use something called snake notation.

18
00:01:12.600 --> 00:01:15.100
As opposed to camera case stack notation is when you

19
00:01:15.100 --> 00:01:15.700
 deliver it.

20
00:01:16.200 --> 00:01:19.800
characters or variable or even functions with underscore instead

21
00:01:19.800 --> 00:01:19.900
 of

22
00:01:21.700 --> 00:01:22.600
Cowboy casing them

23
00:01:31.300 --> 00:01:32.300
Put the vectors.

24
00:01:36.100 --> 00:01:37.800
V sub one is up to we sub three.

25
00:01:40.000 --> 00:01:40.300
oops

26
00:01:49.200 --> 00:01:50.600
inside the Matrix

27
00:01:55.100 --> 00:01:56.000
Math, yeah.

28
00:01:58.900 --> 00:01:59.200
M.

29
00:02:00.600 --> 00:02:01.300
and this would be

30
00:02:06.800 --> 00:02:07.200
so we have

31
00:02:08.300 --> 00:02:09.500
each Vector has five.

32
00:02:12.200 --> 00:02:15.100
A components and we have three vectors. So that's three.

33
00:02:16.300 --> 00:02:18.700
times five

34
00:02:21.300 --> 00:02:22.900
and you want to declare this Matrix?

35
00:02:25.200 --> 00:02:26.000
the clear

36
00:02:27.800 --> 00:02:28.800
this Matrix

37
00:02:30.600 --> 00:02:31.000
with

38
00:02:32.600 --> 00:02:35.700
See, here's the problem in Python. We use uppercase letters

39
00:02:35.700 --> 00:02:36.200
 for classes.

40
00:02:37.300 --> 00:02:37.800
not

41
00:02:42.600 --> 00:02:45.300
yeah, we don't use uppercase that is because it met for classes, but

42
00:02:46.400 --> 00:02:49.700
and well, let's take the lower class big lower

43
00:02:49.700 --> 00:02:52.600
 clusters because we cannot violate Python Programming conventions.

44
00:02:57.200 --> 00:02:58.100
and then for number three

45
00:03:02.800 --> 00:03:03.400
convert

46
00:03:04.600 --> 00:03:04.900
the

47
00:03:06.300 --> 00:03:07.200
Matrix

48
00:03:07.900 --> 00:03:10.400
to a numpy

49
00:03:12.500 --> 00:03:15.400
array, how do you do this using the code?

50
00:03:18.900 --> 00:03:20.400
NP dot array

51
00:03:22.300 --> 00:03:22.800
the method

52
00:03:25.300 --> 00:03:28.600
so there's a difference you what you cannot you cannot perform.

53
00:03:29.600 --> 00:03:33.100
Matrix operations on python lists not

54
00:03:32.100 --> 00:03:35.200
 unless you you write a function to implement them,

55
00:03:35.200 --> 00:03:38.000
 but you can do this with the numpy array. So if you

56
00:03:38.100 --> 00:03:41.500
 have two numpy arrays, you can add them as if they were two vectors and that's

57
00:03:41.500 --> 00:03:42.400
 what the library is built for.

58
00:03:43.300 --> 00:03:44.100
and then finally

59
00:03:46.200 --> 00:03:47.100
add the

60
00:03:52.500 --> 00:03:52.900
elements

61
00:03:55.400 --> 00:03:57.900
of the row space

62
00:03:59.600 --> 00:03:59.900
of

63
00:04:01.400 --> 00:04:01.700
M.

64
00:04:03.300 --> 00:04:04.500
Remember the word space.

65
00:04:05.800 --> 00:04:06.600
means set

66
00:04:08.200 --> 00:04:11.000
so we're talking about the set of elements.

67
00:04:12.100 --> 00:04:12.500
So if

68
00:04:13.400 --> 00:04:16.600
It's a space of a matrix then the

69
00:04:16.600 --> 00:04:19.800
 elements of a matrix could only the row space

70
00:04:19.800 --> 00:04:21.700
 of a matrix can only be three vectors.

71
00:04:22.900 --> 00:04:25.300
So I might suggestion is

72
00:04:25.300 --> 00:04:28.500
 to see if we can do the first two. I just want to see if everybody's clear

73
00:04:28.500 --> 00:04:31.400
 on the terminology so far and then you can attempt to

74
00:04:31.400 --> 00:04:31.900
 do three to four.

75
00:04:32.900 --> 00:04:34.700
Okay, let me add a note here.

76
00:04:36.300 --> 00:04:38.400
For number three, you need to import.

77
00:04:41.200 --> 00:04:42.600
Numpy and you can do this.

78
00:04:44.600 --> 00:04:46.700
With this code so it would go import.

79
00:04:48.700 --> 00:04:50.700
NP and numpy as MP

80
00:04:53.100 --> 00:04:53.300
Okay.
