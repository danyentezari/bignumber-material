WEBVTT - This file was automatically generated by VIMEO

0
00:00:01.200 --> 00:00:02.100
So step one.

1
00:00:02.800 --> 00:00:05.300
For step one we need to take the product.

2
00:00:06.700 --> 00:00:08.100
of a and its transpose

3
00:00:09.700 --> 00:00:10.600
and then we do this again.

4
00:00:11.800 --> 00:00:14.400
for a times the trans the transpose

5
00:00:14.400 --> 00:00:14.700
 of a

6
00:00:15.300 --> 00:00:18.500
Why do you do this? Because once we have these two matrices who

7
00:00:18.500 --> 00:00:22.400
 will then be able to extract the eigenvalues, but

8
00:00:21.400 --> 00:00:24.400
 when we do extract the eigenvalues?

9
00:00:26.200 --> 00:00:28.300
We need to take the square root. So step three.

10
00:00:30.800 --> 00:00:33.600
We want to calculate the eigenvalues if

11
00:00:33.600 --> 00:00:35.300
 you like the single the singular values.

12
00:00:36.000 --> 00:00:36.200
for

13
00:00:37.500 --> 00:00:38.300
steps one and two

14
00:00:38.900 --> 00:00:41.400
what's you have those singular values? We need to take the

15
00:00:41.400 --> 00:00:44.300
 square root of those angular of those singular values.

16
00:00:44.300 --> 00:00:47.200
 Once we have done this we have then we will

17
00:00:47.200 --> 00:00:48.900
 have then created the

18
00:00:50.600 --> 00:00:51.500
Matrix S

19
00:00:54.900 --> 00:00:56.000
And what about Matrix?

20
00:00:57.600 --> 00:00:59.400
You and V transpose.

21
00:01:00.300 --> 00:01:04.000
To calculate or to find this Matrix. We

22
00:01:03.200 --> 00:01:06.100
 need to orthogonalize.

23
00:01:06.800 --> 00:01:07.800
this Matrix

24
00:01:10.200 --> 00:01:12.700
and then orthogonalize that Matrix.

25
00:01:14.600 --> 00:01:15.700
or the transpose

26
00:01:16.400 --> 00:01:19.400
so this we will orthogonalize it and what is

27
00:01:19.400 --> 00:01:21.200
 orthogonized we all content one in a moment.

28
00:01:21.600 --> 00:01:24.000
We need to orthogonize orthogonalize this to get

29
00:01:24.500 --> 00:01:25.200
 that Matrix.

30
00:01:26.700 --> 00:01:29.700
And then orthogonalize this Matrix to get that

31
00:01:29.700 --> 00:01:30.200
 Matrix.

32
00:01:31.400 --> 00:01:34.800
Now there are different algorithms for orthogonalization.

33
00:01:36.600 --> 00:01:39.100
Okay, I'll tell you I'll describe to you

34
00:01:39.100 --> 00:01:41.300
 the problems of an orthogonal and orthonormal Matrix.

35
00:01:42.100 --> 00:01:46.400
But there are different algorithms for orthogonalizing making

36
00:01:45.400 --> 00:01:47.600
 whatever this Matrix is.

37
00:01:48.900 --> 00:01:51.400
The one we're going to look at is going to is called a

38
00:01:51.400 --> 00:01:52.200
 gram Schmidt.

39
00:01:52.700 --> 00:01:53.200
algorithm

40
00:01:55.300 --> 00:01:58.500
which is also supported by numpy and

41
00:01:58.500 --> 00:01:58.800
 even

42
00:02:00.200 --> 00:02:03.300
well, not that algorithm specifically, I think the

43
00:02:03.300 --> 00:02:06.700
 ones numpy and Matlab support are

44
00:02:06.700 --> 00:02:09.500
 called a QR but these are both similar.

45
00:02:10.600 --> 00:02:11.300
In what they do.

46
00:02:11.900 --> 00:02:12.700
They both produce.

47
00:02:13.400 --> 00:02:14.600
an orthogonal Matrix

48
00:02:15.600 --> 00:02:17.400
now before let me just write down the steps.

49
00:02:18.400 --> 00:02:20.900
And we'll do the same for step number six.

50
00:02:21.700 --> 00:02:23.800
then once we have done this

51
00:02:24.900 --> 00:02:27.800
Yeah, we would have been we had we would have had a produced

52
00:02:27.800 --> 00:02:28.400
 SVD.
