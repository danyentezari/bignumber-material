WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.100 --> 00:00:03.600
But let me come up here. So the purpose I have some comments

1
00:00:03.600 --> 00:00:05.800
 in C++ is free to understand again.

2
00:00:06.900 --> 00:00:09.300
What your data structures are doing to memory

3
00:00:09.300 --> 00:00:11.100
 because if you want to solve data structures.

4
00:00:11.800 --> 00:00:15.500
Or if you want to write algorithms search algorithms insertion algorithms

5
00:00:15.500 --> 00:00:19.200
 deletion algorithms for any particular data structure, especially graph

6
00:00:18.200 --> 00:00:20.400
 and binding data structures.

7
00:00:21.400 --> 00:00:22.500
You need to know.

8
00:00:23.900 --> 00:00:26.200
What your program is doing to the memory if you understand

9
00:00:26.200 --> 00:00:27.800
 the memory you'll be able to solve those algorithms.

10
00:00:29.000 --> 00:00:29.300
Okay.

11
00:00:30.900 --> 00:00:33.300
But let me give you a quick background about

12
00:00:33.300 --> 00:00:34.800
 these two, so.

13
00:00:36.700 --> 00:00:39.200
oh, by the way, I noticed I even made a mistake in

14
00:00:39.200 --> 00:00:39.200
 the

15
00:00:40.100 --> 00:00:43.400
C++ this is C++ was created

16
00:00:43.400 --> 00:00:45.000
 when in the 70s or 80s, right?

17
00:00:46.300 --> 00:00:49.200
I copy this from this was meant for

18
00:00:49.200 --> 00:00:50.700
 JavaScript 1985, by the way.

19
00:00:51.300 --> 00:00:52.200
We also collect this.

20
00:00:57.500 --> 00:00:57.800
right

21
00:01:00.100 --> 00:01:00.700
python

22
00:01:02.500 --> 00:01:05.500
is a programming that is a general what we call a general purpose

23
00:01:05.500 --> 00:01:08.100
 program language. What is in what do we mean when we said, you know

24
00:01:08.100 --> 00:01:10.500
 purpose it means that you can use it for different purposes.

25
00:01:11.200 --> 00:01:14.200
You all know that python is used for machine learning you can

26
00:01:14.200 --> 00:01:15.200
 use it for visualization.

27
00:01:16.200 --> 00:01:19.900
You can write programs for

28
00:01:19.900 --> 00:01:21.100
 web servers.

29
00:01:23.200 --> 00:01:26.500
So it is a general purpose program language, but was initially

30
00:01:26.500 --> 00:01:29.600
 meant for operating system applications. So applications on

31
00:01:29.600 --> 00:01:30.400
 the operating system level.

32
00:01:31.300 --> 00:01:32.700
desktop applications, basically

33
00:01:33.700 --> 00:01:36.000
Now python is what we call strong retired.

34
00:01:37.200 --> 00:01:40.600
That means when you declare a variable, excuse me,

35
00:01:40.600 --> 00:01:43.100
 that means when you cannot mix data types

36
00:01:43.100 --> 00:01:45.700
 together. So for example, if you have a string and the number you cannot.

37
00:01:47.500 --> 00:01:49.900
Make them together. You cannot concatenate them.

38
00:01:51.600 --> 00:01:54.000
compare that to a Loosely type programmable language or JavaScript

39
00:01:55.400 --> 00:01:58.100
lose the type program language like JavaScript if you have a string and a number and

40
00:01:58.100 --> 00:01:58.900
 you try to add it together.

41
00:01:59.900 --> 00:02:02.900
This is a defective operations. So

42
00:02:02.900 --> 00:02:05.000
 what JavaScript will do is it will correct it for you.

43
00:02:06.400 --> 00:02:09.400
It will take the number turn it into a string and then put those two strings

44
00:02:09.400 --> 00:02:09.500
 together.

45
00:02:12.400 --> 00:02:14.200
And I'll tell you why I'm even discussing this.

46
00:02:16.700 --> 00:02:19.400
Python is that also dynamically typed meaning when

47
00:02:19.400 --> 00:02:24.100
 you declare a variable you do not need to declare its

48
00:02:23.100 --> 00:02:24.500
 data type.

49
00:02:25.200 --> 00:02:27.700
So for example, if you say if you do something like this.

50
00:02:29.500 --> 00:02:32.200
If you want to create let's say a price.

51
00:02:34.800 --> 00:02:37.000
You can declare the variable and assign it some value.

52
00:02:38.400 --> 00:02:41.400
Whereas in C++ or Java or

53
00:02:41.400 --> 00:02:44.600
 any other strongly statically type programmable language,

54
00:02:44.600 --> 00:02:46.100
 you would have to also declare the data type.

55
00:02:47.700 --> 00:02:50.600
And even though this is variable in a

56
00:02:50.600 --> 00:02:53.300
 statically type program language. You cannot assign it to a different

57
00:02:53.300 --> 00:02:53.900
 data type.

58
00:02:54.900 --> 00:02:57.400
So we cannot do something like this, you know, we cannot

59
00:02:57.400 --> 00:02:57.600
 say whatever.

60
00:02:59.200 --> 00:03:02.700
Because once you set this to integer, then it has to only work

61
00:03:02.700 --> 00:03:05.700
 with integers. Well as in Python, you don't

62
00:03:05.700 --> 00:03:07.000
 have to declare the data type.

63
00:03:08.200 --> 00:03:11.400
And you can assign the variable to a different value. This is

64
00:03:11.400 --> 00:03:13.100
 what we mean by dynamically typed.

65
00:03:14.200 --> 00:03:14.300
Okay.

66
00:03:16.900 --> 00:03:19.900
Both of them are object-oriented programmable

67
00:03:19.900 --> 00:03:22.600
 languages now python is a white space scope.

68
00:03:22.600 --> 00:03:25.100
 So if you have not worked python, this might be new to you.

69
00:03:27.500 --> 00:03:31.100
Again, when you watch the recorded tutorial see what I mean by what white

70
00:03:30.100 --> 00:03:31.600
 space code.

71
00:03:33.300 --> 00:03:36.500
now if you've only worked with python he

72
00:03:41.100 --> 00:03:41.500
then

73
00:03:42.800 --> 00:03:44.900
there are some things you won't appreciate.

74
00:03:45.900 --> 00:03:48.300
Which C++ helps you appreciate?

75
00:03:50.100 --> 00:03:53.700
Here's why you want to look at those materials and c++? And

76
00:03:53.700 --> 00:03:55.900
 here's a comment. I want to make about programming in general.

77
00:03:57.600 --> 00:04:01.400
programming languages that are Dynamic light dynamically

78
00:04:00.400 --> 00:04:03.500
 type and especially if they're Loosely typed

79
00:04:03.500 --> 00:04:04.100
 they

80
00:04:07.100 --> 00:04:08.100
because they're so flexible.

81
00:04:09.100 --> 00:04:11.000
like the example I showed you they

82
00:04:12.200 --> 00:04:15.200
increase the likelihood of defects appearing in your code.

83
00:04:16.700 --> 00:04:19.800
They increase the likelihood of you producing spaghetti code.

84
00:04:24.500 --> 00:04:27.800
And that just means it will take you longer to solve problems.

85
00:04:27.800 --> 00:04:28.700
 It will take you longer to.

86
00:04:31.200 --> 00:04:32.700
You know work with Advanced data structures.

87
00:04:33.500 --> 00:04:36.300
Really the the point I'm

88
00:04:36.300 --> 00:04:39.300
 trying to make in general is this and you want to keep this in mind when

89
00:04:39.300 --> 00:04:42.400
 you are programming you want to be as strict as possible

90
00:04:42.400 --> 00:04:44.100
 the more strict you are.

91
00:04:45.900 --> 00:04:48.500
And the better you understand what your programming is

92
00:04:48.500 --> 00:04:51.700
 doing it to the computer the less defective. Your

93
00:04:51.700 --> 00:04:54.700
 code will be the less frequent. The number

94
00:04:54.700 --> 00:04:57.300
 of defects will occur and

95
00:04:58.400 --> 00:04:59.700
The better you'll be able to work with.

96
00:05:00.900 --> 00:05:02.500
Like I said Advanced data structures.

97
00:05:03.800 --> 00:05:07.000
Okay, so that's really the purpose of why I'm also

98
00:05:06.200 --> 00:05:08.600
 going to expose you to some C++.
