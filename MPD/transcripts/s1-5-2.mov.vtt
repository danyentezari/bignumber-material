WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.400 --> 00:00:03.400
So these are the data types in pythonia strings

1
00:00:03.400 --> 00:00:05.200
 text types numerical Etc.

2
00:00:07.200 --> 00:00:10.600
A variable can be assigned to any one of these data

3
00:00:10.600 --> 00:00:10.600
 types.

4
00:00:12.100 --> 00:00:15.200
Now we don't have this in Python. We have this in C++. There's a special

5
00:00:15.200 --> 00:00:17.600
 type of variable called The Pointer variable.

6
00:00:19.200 --> 00:00:20.400
What is the point of variable do?

7
00:00:22.700 --> 00:00:25.800
And in C++ when you declare this variable you put

8
00:00:25.800 --> 00:00:26.600
 a star next to it.

9
00:00:27.700 --> 00:00:29.300
the pointer variable allows you to

10
00:00:31.500 --> 00:00:34.400
get the address or assign a variable

11
00:00:34.400 --> 00:00:37.300
 to any address of anything in memory

12
00:00:37.300 --> 00:00:38.700
 in your program at least.

13
00:00:40.800 --> 00:00:41.700
Why is this relevant?

14
00:00:45.200 --> 00:00:48.200
Now you don't have this problem a python when C++ you do

15
00:00:48.200 --> 00:00:51.600
 whenever you create something in a C++

16
00:00:51.600 --> 00:00:54.300
 program that thing will take up space

17
00:00:54.300 --> 00:00:57.200
 in memory and if you are to reassign a variable.

18
00:00:58.500 --> 00:01:01.300
To another piece of data, in fact declaring another

19
00:01:01.300 --> 00:01:04.600
 valuable. You're still creating a new piece of

20
00:01:04.600 --> 00:01:07.400
 data in memory, but the

21
00:01:07.400 --> 00:01:09.700
 ones to which you were pointing before are still there.

22
00:01:10.700 --> 00:01:10.900
now

23
00:01:12.400 --> 00:01:15.400
New C++ compilers have garbage collection. This is

24
00:01:15.400 --> 00:01:17.000
 taken care of but

25
00:01:19.400 --> 00:01:20.700
You still need to be careful with?

26
00:01:22.700 --> 00:01:24.300
when we later on when we work with

27
00:01:25.300 --> 00:01:28.600
Graph data structures you need to be careful when you're declaring variables.

28
00:01:28.600 --> 00:01:31.800
 So for example, one of the things we want to do in binary tree

29
00:01:31.800 --> 00:01:32.900
 is rebalanced the binary tree.

30
00:01:33.500 --> 00:01:36.300
and knowing what we're what our data

31
00:01:36.300 --> 00:01:39.400
 structure is doing to the temporary storage will allow us to implement

32
00:01:39.400 --> 00:01:40.500
 something like

33
00:01:41.800 --> 00:01:44.100
You know an algorithm for rebalancing a binary tree.
