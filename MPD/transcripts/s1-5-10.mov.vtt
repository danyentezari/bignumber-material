WEBVTT - This file was automatically generated by VIMEO

0
00:00:01.100 --> 00:00:04.300
Okay, but if you want to pass arguments to a car, so

1
00:00:04.300 --> 00:00:07.500
 if you want to specify if you want instantiate and let's let's see

2
00:00:07.500 --> 00:00:09.900
 how we can instantiate a class. I'm going to collapse this code.

3
00:00:10.900 --> 00:00:13.100
If you want to instantiate a car.

4
00:00:19.300 --> 00:00:22.500
You would have you would first type in a variable.

5
00:00:23.700 --> 00:00:26.900
The name of variable. So for example, you know

6
00:00:26.900 --> 00:00:27.400
 Tesla.

7
00:00:28.200 --> 00:00:29.300
Or the Model S.

8
00:00:32.600 --> 00:00:32.900
and

9
00:00:35.700 --> 00:00:36.900
assign this to car

10
00:00:38.200 --> 00:00:41.600
and then this is not calling a function rather your constructing

11
00:00:41.600 --> 00:00:44.400
 a class your instantiating the class. So this is now called an instance.

12
00:00:45.100 --> 00:00:48.500
This is an object now and it is now an instance of the class car.

13
00:00:50.500 --> 00:00:50.900
now

14
00:00:52.700 --> 00:00:54.200
the model S has certain

15
00:00:56.400 --> 00:00:59.000
Characteristics there are some things that are specific to a Model

16
00:00:59.300 --> 00:01:01.000
 S. So here let's say we have a Honda Civic.

17
00:01:02.200 --> 00:01:04.000
Both of these are cars, but they're not the same car.

18
00:01:06.400 --> 00:01:08.700
There are things that distinguish them apart from each other.

19
00:01:09.600 --> 00:01:12.900
So a Model S for example belongs to the company

20
00:01:12.900 --> 00:01:13.400
 Tesla.

21
00:01:15.200 --> 00:01:18.000
And a Civic belongs to Honda.

22
00:01:19.300 --> 00:01:20.500
This could be a black car.

23
00:01:22.200 --> 00:01:23.300
This could be a red car.

24
00:01:26.100 --> 00:01:27.000
this could have

25
00:01:28.900 --> 00:01:29.300
a price

26
00:01:30.200 --> 00:01:31.400
I don't know how much it goes for.

27
00:01:32.400 --> 00:01:33.800
Maybe $300,000. I don't know.

28
00:01:35.300 --> 00:01:38.300
And this one, you know is more economical. Let's say I don't know 60.

29
00:01:40.600 --> 00:01:42.600
Okay, so these are the arguments.

30
00:01:45.400 --> 00:01:48.100
Of the for the class. However, you're not

31
00:01:48.100 --> 00:01:49.000
 passing these.

32
00:01:50.200 --> 00:01:53.500
These would you would not open the you would not indicate the

33
00:01:53.500 --> 00:01:54.100
 parameters in here.

34
00:01:55.300 --> 00:01:57.400
If you want to receive these arguments.

35
00:01:59.300 --> 00:02:01.300
Then you would there's a special method.

36
00:02:02.400 --> 00:02:05.200
Called Thunder in it. Why is it called Dunder in

37
00:02:05.200 --> 00:02:05.300
 it?

38
00:02:06.100 --> 00:02:06.900
You'll see now.

39
00:02:10.900 --> 00:02:13.800
It's called Dunder because it has double underscores.

40
00:02:16.500 --> 00:02:19.500
And it's fast. It's say thunder in it. That's a

41
00:02:19.500 --> 00:02:20.500
 double underscore in it.

42
00:02:22.100 --> 00:02:23.900
So if you want to accept arguments.

43
00:02:26.400 --> 00:02:29.300
And if you want to declare the parameters for this class, you would

44
00:02:29.300 --> 00:02:30.200
 do it inside this method.

45
00:02:31.700 --> 00:02:34.000
So you have the brand of the car the color of

46
00:02:34.100 --> 00:02:35.500
 the car the price of the car?

47
00:02:36.600 --> 00:02:39.400
And one thing you need to know, is that whatever you create a class.

48
00:02:40.600 --> 00:02:41.200
method

49
00:02:41.900 --> 00:02:44.400
he there's one parameter. You must always put at

50
00:02:44.400 --> 00:02:44.600
 the beginning.

51
00:02:45.800 --> 00:02:48.600
You can have as many parameters as you want for any of your methods, but

52
00:02:48.600 --> 00:02:51.400
 there's one parameter that was always go at the beginning and that is the self

53
00:02:51.400 --> 00:02:51.600
 method.

54
00:02:52.900 --> 00:02:54.000
And it has to be called that.

55
00:02:54.700 --> 00:02:56.600
So it has to be called self and it must go the beginning.

56
00:02:57.900 --> 00:03:00.600
And even if a method doesn't accept any parameters,

57
00:03:00.600 --> 00:03:01.700
 it must still have self.

58
00:03:02.900 --> 00:03:05.300
So you would self in here self in here self in here,

59
00:03:05.300 --> 00:03:07.100
 but why do we do this? Why do we?

60
00:03:08.500 --> 00:03:09.000
Why do we?

61
00:03:11.500 --> 00:03:12.200
include self

62
00:03:13.300 --> 00:03:13.700
Well again.

63
00:03:14.500 --> 00:03:15.200
this class

64
00:03:16.100 --> 00:03:16.900
has four

65
00:03:18.800 --> 00:03:20.400
methods and three variables

66
00:03:21.600 --> 00:03:23.500
the reason they are put inside.

67
00:03:24.600 --> 00:03:27.100
The same class is because they are meant to

68
00:03:27.100 --> 00:03:27.500
 work with each other.

69
00:03:33.700 --> 00:03:37.100
And they're supposed to be able to read the variables inside the

70
00:03:36.100 --> 00:03:37.400
 class.

71
00:03:39.500 --> 00:03:40.300
so, how would

72
00:03:41.300 --> 00:03:44.500
how would if you want to if the car is meant to let's

73
00:03:44.500 --> 00:03:45.100
 say break?

74
00:03:46.100 --> 00:03:48.000
That means they must accelerate to zero, right?

75
00:03:49.400 --> 00:03:52.500
To break a car means to bring the speed of the car to

76
00:03:52.500 --> 00:03:52.700
 zero.

77
00:03:53.300 --> 00:03:55.700
That means brake must have access to the accelerate method.

78
00:03:56.800 --> 00:03:58.300
So if you type in accelerate.

79
00:03:59.200 --> 00:04:02.600
Just like that and pass in the argument zero. So let's

80
00:04:02.600 --> 00:04:05.300
 say the accelerate method will take to arguments self is

81
00:04:05.300 --> 00:04:07.600
 mandatory. It has to go to the beginning but the second argument is speed.

82
00:04:10.100 --> 00:04:10.300
Okay.

83
00:04:11.400 --> 00:04:13.300
when you type a function

84
00:04:15.300 --> 00:04:19.200
this implies that the function is global meaning python

85
00:04:18.200 --> 00:04:20.700
 will think you have a function out here.

86
00:04:21.700 --> 00:04:22.000
called

87
00:04:23.100 --> 00:04:23.900
accelerate

88
00:04:26.100 --> 00:04:27.700
And you can actually do this you can have.

89
00:04:28.600 --> 00:04:31.600
They will not contribute they will be no conflict. They

90
00:04:31.600 --> 00:04:32.500
 can have a function.

91
00:04:33.600 --> 00:04:36.700
And a class method with the same name in the same file, and

92
00:04:36.700 --> 00:04:40.000
 that's not going to cause any problems. Maybe you'll get confused but positive

93
00:04:39.200 --> 00:04:40.600
 will have no issues.

94
00:04:41.800 --> 00:04:42.700
but either way when you

95
00:04:44.800 --> 00:04:47.600
type an accelerate as a function python will

96
00:04:47.600 --> 00:04:47.900
 think

97
00:04:48.700 --> 00:04:51.100
There's a function outside the class, which is not

98
00:04:51.100 --> 00:04:51.300
 the case.

99
00:04:53.800 --> 00:04:57.200
So what we do is we would type in self dot accelerate.

100
00:05:01.300 --> 00:05:04.600
All right, so that's why we have to put self

101
00:05:04.600 --> 00:05:05.900
 as a parameter of every single method.

102
00:05:08.200 --> 00:05:12.100
And even in the internet method if you wanted to change these any

103
00:05:11.100 --> 00:05:12.400
 of this information.

104
00:05:13.600 --> 00:05:16.500
Okay, so properties shouldn't be shouldn't have

105
00:05:16.500 --> 00:05:17.300
 any values initially.

106
00:05:18.900 --> 00:05:19.000
Okay.

107
00:05:21.600 --> 00:05:24.000
We don't want a hard code the properties of a car. We want to

108
00:05:24.100 --> 00:05:27.200
 do it after we instantiate the class. So if you want to change

109
00:05:27.200 --> 00:05:28.600
 the color of the car.

110
00:05:30.300 --> 00:05:32.600
Then you would say self.

111
00:05:33.900 --> 00:05:34.700
dot color

112
00:05:35.800 --> 00:05:38.600
equals to and I'm just going to rename these

113
00:05:38.600 --> 00:05:39.700
 so you can tell them apart.

114
00:05:42.700 --> 00:05:44.400
This this will be parameter.

115
00:05:47.300 --> 00:05:49.300
So the values for these parameters will come.

116
00:05:50.300 --> 00:05:53.300
From outside the class so self color would be

117
00:05:53.300 --> 00:05:53.900
 color parameter.

118
00:05:55.200 --> 00:05:56.400
and for example self Dot

119
00:05:57.700 --> 00:05:59.100
brand

120
00:06:00.500 --> 00:06:01.500
Would be brand parameter.

121
00:06:02.200 --> 00:06:02.300
Okay.

122
00:06:04.600 --> 00:06:06.700
So this is where you receive arguments of a class.

123
00:06:07.400 --> 00:06:08.000
Not up there.

124
00:06:10.100 --> 00:06:10.300
Okay.

125
00:06:12.500 --> 00:06:15.700
So and I'm going to come and we're gonna

126
00:06:15.700 --> 00:06:18.600
 come to class. We're gonna return the list in a moment. But if

127
00:06:18.600 --> 00:06:21.400
 you want to watch this now, this is this is this this is

128
00:06:21.400 --> 00:06:22.400
 what dot syntax is about

129
00:06:23.700 --> 00:06:24.000
Okay.

130
00:06:24.900 --> 00:06:27.800
If you want to access a property of

131
00:06:27.800 --> 00:06:29.700
 a class or a method of a class.

132
00:06:31.300 --> 00:06:33.100
Remember we said property is a variable.

133
00:06:34.500 --> 00:06:38.400
Of a class method is a function of a class if

134
00:06:37.400 --> 00:06:40.600
 you want to access a property or a method you

135
00:06:40.600 --> 00:06:42.000
 must use the DOT.

136
00:06:43.300 --> 00:06:45.400
Now you can of course do it this way.

137
00:06:48.100 --> 00:06:49.500
You can you can do it that way as well.

138
00:06:51.400 --> 00:06:52.000
Okay, but

139
00:06:54.200 --> 00:06:54.400
the

140
00:06:58.300 --> 00:07:00.000
more common convention is to use the dots attacks.

141
00:07:01.200 --> 00:07:01.400
Okay.

142
00:07:02.400 --> 00:07:04.600
so if you wanted to

143
00:07:06.300 --> 00:07:06.800
down here

144
00:07:07.700 --> 00:07:09.300
after we instantiate the class.

145
00:07:10.100 --> 00:07:11.200
Call a method.

146
00:07:11.900 --> 00:07:14.400
Who of a car so we know that cars can accelerate right?

147
00:07:15.100 --> 00:07:17.000
How would you do it? You would say model.

148
00:07:17.900 --> 00:07:19.800
as dot accelerate

149
00:07:22.900 --> 00:07:25.000
And this is the point I was trying to make by.

150
00:07:26.900 --> 00:07:29.100
Talking so much about classes.

151
00:07:30.300 --> 00:07:31.500
Whenever you see a DOT.

152
00:07:34.300 --> 00:07:35.700
You should know that whatever proceeds it.

153
00:07:36.700 --> 00:07:38.300
Is always an object.

154
00:07:43.400 --> 00:07:46.500
Anytime you see a DOT whatever proceeds it.

155
00:07:48.100 --> 00:07:48.600
is an object

156
00:07:52.500 --> 00:07:54.600
another way to visualize Model S.

157
00:07:56.600 --> 00:07:57.900
Is the keyword dictionary?

158
00:08:01.200 --> 00:08:04.600
So we say dictionaries and objects, right? It has a method called accelerate.

159
00:08:06.100 --> 00:08:06.800
Which is a function.

160
00:08:10.600 --> 00:08:12.800
It has a method called Break.

161
00:08:14.400 --> 00:08:15.300
Which is also a function.

162
00:08:17.600 --> 00:08:18.900
Just be something consistent here.

163
00:08:20.100 --> 00:08:20.600
it has

164
00:08:21.700 --> 00:08:23.400
properties like price

165
00:08:25.800 --> 00:08:28.500
What did we say that price is equal to 3300 k?

166
00:08:30.400 --> 00:08:32.500
It has a color which is a property.

167
00:08:36.800 --> 00:08:37.100
Okay.

168
00:08:38.900 --> 00:08:41.300
So if you want to access any of these.

169
00:08:42.800 --> 00:08:45.800
If you want to access the values of any of these elements when

170
00:08:45.800 --> 00:08:48.600
 it comes to objects, it's more common to use dots

171
00:08:48.600 --> 00:08:48.800
 and tax.

172
00:08:52.600 --> 00:08:55.700
When you create a class and then you instantiated

173
00:08:55.700 --> 00:08:57.500
 you end up with this object.

174
00:09:00.400 --> 00:09:03.800
And when you access an element, if you want to access the element of any object

175
00:09:03.800 --> 00:09:05.600
 to use dots attacks.
