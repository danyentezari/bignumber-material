WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.500 --> 00:00:03.200
But I want to take you somewhere and you want to always look into this

1
00:00:03.200 --> 00:00:06.700
 when you are working with python. So I'm going to type on W3 schools.

2
00:00:09.600 --> 00:00:10.100
list methods

3
00:00:18.100 --> 00:00:19.300
I will keep this as reference.

4
00:00:22.700 --> 00:00:25.300
But as you can see, we'll remove the only the first instance.

5
00:00:26.100 --> 00:00:29.100
If you want to remove every instance well.

6
00:00:31.500 --> 00:00:32.900
There are different ways you can go about this.

7
00:00:34.700 --> 00:00:35.800
It can either repeat yourself.

8
00:00:37.400 --> 00:00:40.300
Or you know effectively use a for

9
00:00:40.300 --> 00:00:40.400
 Loop.

10
00:00:41.300 --> 00:00:43.300
So but that is again.

11
00:00:46.300 --> 00:00:47.100
the least

12
00:00:48.200 --> 00:00:50.100
efficient way of removing the element

13
00:00:51.800 --> 00:00:54.200
one thing to

14
00:00:54.200 --> 00:00:57.100
 avoid increasing the time complexity which is what this will do

15
00:00:57.100 --> 00:00:58.900
 is to use space complexity.

16
00:00:59.900 --> 00:01:02.600
So instead of going through

17
00:01:02.600 --> 00:01:05.900
 the list several times looking for an item

18
00:01:05.900 --> 00:01:06.300
 to remove.

19
00:01:07.100 --> 00:01:08.200
You can go through it once.

20
00:01:10.200 --> 00:01:13.600
How to do this what you would do is you would you have your original list

21
00:01:13.600 --> 00:01:15.400
 and you want to eliminate all the Nokia's right?

22
00:01:17.500 --> 00:01:20.200
Let's do it here. Okay. So let's

23
00:01:20.200 --> 00:01:21.300
 say you have a list of values.

24
00:01:22.900 --> 00:01:23.900
And you have multiple.

25
00:01:25.600 --> 00:01:29.600
Elements with value Nokia and

26
00:01:29.600 --> 00:01:30.400
 you want to remove all of these?

27
00:01:32.200 --> 00:01:32.500
Okay.

28
00:01:34.200 --> 00:01:36.700
The first time you use the remove method.

29
00:01:37.700 --> 00:01:38.500
It will get rid of that.

30
00:01:39.400 --> 00:01:42.100
But then you have to run it again to remove the next Nokia.

31
00:01:43.300 --> 00:01:47.000
So your runtime will be your bigger would

32
00:01:46.000 --> 00:01:47.000
 be.

33
00:01:48.600 --> 00:01:49.500
two times n

34
00:01:50.200 --> 00:01:53.200
if we had a third one, it will be three times that so very bad.

35
00:01:53.900 --> 00:01:56.500
Something you want to do is increase the space complexity, which means

36
00:01:56.500 --> 00:01:59.800
 instead of taking up more time. Take up

37
00:01:59.800 --> 00:02:00.000
 more space.

38
00:02:00.800 --> 00:02:01.300
so you can have

39
00:02:02.600 --> 00:02:04.300
a second array called Brands, too.

40
00:02:05.400 --> 00:02:08.200
Initially will be empty. So you will go through the list just

41
00:02:08.200 --> 00:02:08.600
 once

42
00:02:09.600 --> 00:02:12.600
and then you will have a simple FNL condition if it's

43
00:02:12.600 --> 00:02:14.300
 equal to Nokia ignore.

44
00:02:15.200 --> 00:02:18.300
So you will go to the list once so let's start with

45
00:02:18.300 --> 00:02:21.100
 this one apple is a Nokia. No, let's put it here.

46
00:02:24.600 --> 00:02:27.400
Nokia is a Nokia. Yes. So let's ignore it Samsung is

47
00:02:27.400 --> 00:02:28.600
 a Nokia. No, let's put it here.

48
00:02:29.900 --> 00:02:32.300
And then we can just ignore that one. So you can go through

49
00:02:32.300 --> 00:02:35.500
 the list. Now. You have increased your space complexity. Why

50
00:02:35.500 --> 00:02:37.300
 because you have created a second data structure.

51
00:02:39.500 --> 00:02:42.200
Okay. Remember we said that whenever you create something and you

52
00:02:42.200 --> 00:02:45.200
 whenever you type something in your program, it will go to temporary storage

53
00:02:45.200 --> 00:02:46.200
 and temporary storage.

54
00:02:47.800 --> 00:02:48.100
has

55
00:02:51.300 --> 00:02:54.200
is a lot obviously it's much faster the permanent storage but it's a

56
00:02:54.200 --> 00:02:58.000
 lot smaller. So you have to be careful with how you use the space, but nowadays

57
00:02:57.800 --> 00:03:00.400
 storage temporary storage is very

58
00:03:00.400 --> 00:03:00.600
 cheap.

59
00:03:02.600 --> 00:03:05.900
They are abundant and they are very cheap. So if

60
00:03:05.900 --> 00:03:08.100
 you have to choose between time complexity and space

61
00:03:08.100 --> 00:03:09.900
 complexity always use space complexity.

62
00:03:10.900 --> 00:03:13.300
So instead of going to list two three times just

63
00:03:13.300 --> 00:03:14.300
 create another data structure.

64
00:03:15.100 --> 00:03:16.100
It will take a

65
00:03:17.800 --> 00:03:19.300
you know.

66
00:03:20.900 --> 00:03:22.500
negligible amount of space

67
00:03:23.400 --> 00:03:26.500
And then once you've done this, you can just discard that actually python will

68
00:03:26.500 --> 00:03:27.000
 discarded for you.

69
00:03:29.400 --> 00:03:30.500
I hope that makes sense.

70
00:03:32.700 --> 00:03:35.300
Okay, so whenever we have to choose between time and

71
00:03:35.300 --> 00:03:36.200
 space always to space.
