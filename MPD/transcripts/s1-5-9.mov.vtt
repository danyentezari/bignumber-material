WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.900 --> 00:00:03.300
So that's one, but another thing

1
00:00:03.300 --> 00:00:04.500
 we can do with classes.

2
00:00:08.300 --> 00:00:11.600
Not just collect functions in there, but you can even collect variables inside

3
00:00:11.600 --> 00:00:14.300
 them. So what are some variables that

4
00:00:14.300 --> 00:00:17.200
 can be we can associate with with a car

5
00:00:17.200 --> 00:00:18.500
 so it's speed.

6
00:00:21.600 --> 00:00:22.300
It's color.

7
00:00:24.500 --> 00:00:27.200
It's a brand.

8
00:00:29.500 --> 00:00:31.300
Could be a Toyota.

9
00:00:32.700 --> 00:00:32.900
Etc right

10
00:00:34.200 --> 00:00:37.100
Now we said that we've put functions started class

11
00:00:37.100 --> 00:00:40.700
 we call it methods. We don't we don't call them functions anymore. And when

12
00:00:40.700 --> 00:00:43.300
 you put variables inside the class again, we don't call them

13
00:00:43.300 --> 00:00:46.000
 variables anymore. What do we call a variables? We call them?

14
00:00:47.200 --> 00:00:47.700
on the properties

15
00:00:50.000 --> 00:00:50.200
Okay.

16
00:00:52.600 --> 00:00:52.700
now

17
00:00:55.300 --> 00:00:58.200
there is a little more to the current classes than just.

18
00:00:59.200 --> 00:01:01.300
declaring methods and properties

19
00:01:02.100 --> 00:01:02.400
we have

20
00:01:05.300 --> 00:01:08.500
something called the dunder Reddit method or the initialization method

21
00:01:08.500 --> 00:01:09.300
 to Constructor function.

22
00:01:12.300 --> 00:01:13.700
There are access modifiers.

23
00:01:14.700 --> 00:01:17.200
I want we won't get into that right now. But and also

24
00:01:17.200 --> 00:01:20.300
 with these parentheses, why do we have these parentheses when

25
00:01:20.300 --> 00:01:21.800
 you have a parentheses in a function?

26
00:01:23.400 --> 00:01:26.100
When you have a parentheses, this is where you

27
00:01:26.100 --> 00:01:27.300
 can Define your parameters.

28
00:01:28.800 --> 00:01:30.400
So let's say you have another function.

29
00:01:34.400 --> 00:01:37.000
Okay, so that's a that function already exists. So I have

30
00:01:37.100 --> 00:01:37.600
 to create another function.

31
00:01:40.900 --> 00:01:42.500
at numbers

32
00:01:46.200 --> 00:01:48.700
and by the way, this is called camelcase notation.

33
00:01:49.800 --> 00:01:53.400
But in Python the snake notation

34
00:01:52.400 --> 00:01:55.100
 is more popular. So snake notation is

35
00:01:55.100 --> 00:01:57.000
 when you separate two words.

36
00:01:58.100 --> 00:01:59.200
with an underscore

37
00:02:03.600 --> 00:02:06.000
Nami conventions are also covered in tutorial by the way.

38
00:02:09.100 --> 00:02:12.200
So let's say this function if you remember we said that a function is something

39
00:02:12.200 --> 00:02:13.000
 to what you pass.

40
00:02:14.100 --> 00:02:17.400
An input it does some internal process and gives

41
00:02:17.400 --> 00:02:18.100
 you an output.

42
00:02:19.000 --> 00:02:19.400
Okay.

43
00:02:22.700 --> 00:02:25.500
So this will take two inputs now may not

44
00:02:25.500 --> 00:02:25.600
 be.

45
00:02:27.100 --> 00:02:28.000
and it will simply

46
00:02:29.500 --> 00:02:32.100
Return the result of this sum so we have Nom a plus.

47
00:02:33.200 --> 00:02:33.900
number B

48
00:02:38.100 --> 00:02:39.200
the very simple function

49
00:02:43.200 --> 00:02:43.900
what do we call the

50
00:02:46.200 --> 00:02:47.800
what do we call these these have special names?

51
00:02:49.100 --> 00:02:50.800
I used and the non.

52
00:02:52.600 --> 00:02:55.100
Programming terminology input but we don't call these input. There's another

53
00:02:55.100 --> 00:02:55.600
 name for it.

54
00:03:00.100 --> 00:03:01.000
They call parameters.

55
00:03:02.100 --> 00:03:02.800
so quick definition

56
00:03:05.800 --> 00:03:07.100
a function parameter

57
00:03:12.100 --> 00:03:15.600
And argument, they're not the same thing. Unfortunately, sometimes they use interchangeably.

58
00:03:16.200 --> 00:03:16.500
Okay.

59
00:03:17.900 --> 00:03:19.200
a parameter

60
00:03:20.300 --> 00:03:23.000
or argument rather argument is the input of a function.

61
00:03:27.500 --> 00:03:30.400
So if the argument is the input of a function, that was a parameter, the parameter

62
00:03:30.400 --> 00:03:31.500
 is the placeholder.

63
00:03:32.700 --> 00:03:34.300
for an argument

64
00:03:37.400 --> 00:03:37.600
Okay.

65
00:03:39.200 --> 00:03:40.300
So these are the parameters.

66
00:03:43.600 --> 00:03:46.800
they're like variables that belong to a function and

67
00:03:47.800 --> 00:03:48.200
You can.

68
00:03:50.700 --> 00:03:51.800
have infinite

69
00:03:53.300 --> 00:03:56.200
Arguments for any particular parameter, so

70
00:03:56.200 --> 00:03:57.100
 what do I mean by this?

71
00:03:59.600 --> 00:04:02.600
So this function has only two parameters but each parameter can

72
00:04:02.600 --> 00:04:05.000
 take on infinitely many argument. So this could be

73
00:04:05.000 --> 00:04:05.400
 100.

74
00:04:06.300 --> 00:04:09.200
200 or 2000 or 500 whatever

75
00:04:09.200 --> 00:04:10.200
 it can be anything.

76
00:04:11.800 --> 00:04:14.000
Okay, but it's important for us to distinguish.

77
00:04:14.700 --> 00:04:17.100
parameters from arguments when you create a function

78
00:04:19.800 --> 00:04:22.500
using the Define keyword and naming the

79
00:04:22.500 --> 00:04:23.000
 function and

80
00:04:23.700 --> 00:04:25.800
putting the parentheses. This is called declaring a function.

81
00:04:28.600 --> 00:04:30.700
But after you declare the function you want to call it.

82
00:04:32.700 --> 00:04:32.800
Okay.

83
00:04:33.700 --> 00:04:36.100
When you call the function, however, we no longer call these parameters we call

84
00:04:36.100 --> 00:04:36.600
 these arguments.

85
00:04:38.000 --> 00:04:38.200
Okay.

86
00:04:39.600 --> 00:04:42.700
What does this have to do with classes? Well, if

87
00:04:42.700 --> 00:04:45.800
 you notice classes also have parentheses, but

88
00:04:45.800 --> 00:04:48.100
 they don't take arguments.

89
00:04:48.800 --> 00:04:49.700
at least not

90
00:04:50.800 --> 00:04:51.300
through the

91
00:04:52.300 --> 00:04:55.200
well, actually they do but you don't Define the

92
00:04:55.200 --> 00:04:55.600
 parameter here.

93
00:04:56.600 --> 00:04:59.300
So a class will take an argument like a function but

94
00:05:00.300 --> 00:05:03.300
not to the parameters not through the parenthesis rather the

95
00:05:03.300 --> 00:05:04.400
 parameters go somewhere else.

96
00:05:05.200 --> 00:05:08.200
Rather the parentheses are optional and you only use them

97
00:05:08.200 --> 00:05:11.300
 if this class is based on another class.

98
00:05:13.200 --> 00:05:13.500
Okay.

99
00:05:14.400 --> 00:05:17.400
Once again in the tutorial I go into more details on classes.

100
00:05:17.400 --> 00:05:20.800
 So for example if car which is an abstract

101
00:05:20.800 --> 00:05:22.200
 idea, it is some sort of

102
00:05:23.600 --> 00:05:24.300
vehicle

103
00:05:24.900 --> 00:05:27.800
that has wheels some doors and it

104
00:05:27.800 --> 00:05:31.100
 and it's motor transportation is the road okay, but

105
00:05:30.100 --> 00:05:33.300
 a class which is an abstract idea is

106
00:05:33.300 --> 00:05:33.700
 itself.

107
00:05:34.500 --> 00:05:35.600
a specific type

108
00:05:36.300 --> 00:05:38.000
Of an abstract idea like a vehicle.

109
00:05:40.600 --> 00:05:43.500
Okay, in other words if this class is based on another class.

110
00:05:44.300 --> 00:05:47.200
Then that's when you would bring in the parentheses. Otherwise, you don't even

111
00:05:47.200 --> 00:05:47.700
 need them there.
