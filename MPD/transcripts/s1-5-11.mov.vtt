WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.400 --> 00:00:02.100
Now, let me come back to lists.

1
00:00:04.200 --> 00:00:06.200
Let's go all the way back up to the list. I'm gonna

2
00:00:07.200 --> 00:00:09.400
comment this section and type section

3
00:00:14.700 --> 00:00:16.400
this section two will come back to this.

4
00:00:21.900 --> 00:00:22.200
here

5
00:00:32.700 --> 00:00:34.400
Let's look at the first example we talked about.

6
00:00:45.100 --> 00:00:46.900
How can we add something to a list?

7
00:00:49.500 --> 00:00:51.600
Now there's something need to know about this, right?

8
00:00:57.400 --> 00:00:58.700
These are data structures.

9
00:00:59.700 --> 00:01:03.200
That typically accept incoming data

10
00:01:03.200 --> 00:01:03.700
 at the end.

11
00:01:05.400 --> 00:01:08.300
Now, of course, you can add an element to the start or somewhere

12
00:01:08.300 --> 00:01:08.700
 in the middle.

13
00:01:09.800 --> 00:01:12.000
But doing that adding the element in the

14
00:01:12.100 --> 00:01:15.400
 middle of a list is computationally more expensive.

15
00:01:16.600 --> 00:01:19.200
We'll talk about that that stuff later on once we

16
00:01:19.200 --> 00:01:22.200
 get once we go deeper into the data structures.

17
00:01:23.200 --> 00:01:26.300
But typically when you add an element to the end of it, typically you

18
00:01:26.300 --> 00:01:29.200
 would add an element to the end of the list. How do we do that? How do we do? How do

19
00:01:29.200 --> 00:01:31.000
 we achieve this in Python?

20
00:01:33.300 --> 00:01:36.100
Well, like I said and a list.

21
00:01:37.700 --> 00:01:40.700
Is an instance of a class there's a class called list.

22
00:01:40.700 --> 00:01:43.400
 So the people who created the Python program

23
00:01:43.400 --> 00:01:44.900
 language created a class.

24
00:01:46.400 --> 00:01:47.000
list

25
00:01:48.100 --> 00:01:49.400
And so whenever you create.

26
00:01:50.800 --> 00:01:53.600
Whenever you write code like this your instantiating a

27
00:01:53.600 --> 00:01:53.700
 class.

28
00:01:55.400 --> 00:01:56.900
and since the class

29
00:01:58.200 --> 00:01:58.800
it has a methods.

30
00:01:59.500 --> 00:02:02.600
And how do we see? How do we

31
00:02:02.600 --> 00:02:03.000
 go about?

32
00:02:05.600 --> 00:02:09.800
Using a method we use dot syntax. So lists

33
00:02:08.800 --> 00:02:10.200
 have methods.

34
00:02:12.600 --> 00:02:13.400
for mutating

35
00:02:16.600 --> 00:02:17.400
for being mutated

36
00:02:18.400 --> 00:02:19.400
so methods like

37
00:02:20.300 --> 00:02:21.400
append

38
00:02:23.300 --> 00:02:26.100
remember method was always be preceded by

39
00:02:26.100 --> 00:02:29.200
 a DOT methods like insert.

40
00:02:31.700 --> 00:02:32.000
methods like pop

41
00:02:33.900 --> 00:02:34.400
remove

42
00:02:37.300 --> 00:02:40.900
okay. Typically you want to use a pen. This is the least computational expensive

43
00:02:40.900 --> 00:02:42.900
 appendages appended at the end.

44
00:02:43.800 --> 00:02:46.200
Or as insert is used if you want to add an

45
00:02:46.200 --> 00:02:49.200
 element to a specific location. This is something you want to use in frequently.

46
00:02:50.800 --> 00:02:51.600
only when necessary

47
00:02:53.400 --> 00:02:53.800
remove

48
00:02:56.100 --> 00:02:59.000
Now pop, we'll remove an element from the end of

49
00:02:59.000 --> 00:02:59.300
 the list.

50
00:03:01.500 --> 00:03:04.200
But it can also be used to remove an element from

51
00:03:04.200 --> 00:03:07.200
 a specific location. So this is do a purpose

52
00:03:07.200 --> 00:03:10.200
 if you if you don't pass any arguments to it, it

53
00:03:10.200 --> 00:03:13.300
 will just remove from whatever's at the end. If you put an argument, it

54
00:03:13.300 --> 00:03:14.800
 will remove an album from that specific position.

55
00:03:16.400 --> 00:03:19.900
Remove is used when you do not know the position

56
00:03:19.900 --> 00:03:21.900
 of the element, but you know, it's a value.

57
00:03:23.100 --> 00:03:25.700
Okay, so let's say you have products over here.

58
00:03:28.200 --> 00:03:29.300
Or let's do brands.

59
00:03:32.600 --> 00:03:35.200
and you're doing some data in you know, you're doing

60
00:03:35.200 --> 00:03:36.800
 some data munching for your

61
00:03:38.100 --> 00:03:39.000
data science project

62
00:03:40.600 --> 00:03:43.300
and let's say you no longer you want

63
00:03:43.300 --> 00:03:45.700
 to remove a particular brand from the list.

64
00:03:48.800 --> 00:03:49.100
Okay.

65
00:03:52.300 --> 00:03:55.000
And if you do not

66
00:03:55.200 --> 00:03:58.000
 know the position for some reason you can use brands that remove.

67
00:04:02.900 --> 00:04:05.200
and whether the nice things about vs code is I will

68
00:04:05.200 --> 00:04:05.400
 tell you what

69
00:04:06.900 --> 00:04:08.500
the data type of the parameter

70
00:04:09.600 --> 00:04:12.900
the data type of the parameter. So this one except this expected string

71
00:04:12.900 --> 00:04:14.900
 if I were to put your pop.

72
00:04:16.700 --> 00:04:19.700
It says index give me the index of the element so

73
00:04:19.700 --> 00:04:20.700
 something new numerical.

74
00:04:21.900 --> 00:04:22.600
but remove

75
00:04:23.800 --> 00:04:25.400
is when you do not know the position.

76
00:04:26.600 --> 00:04:29.200
So Nokia can be anywhere but we'll find

77
00:04:29.200 --> 00:04:30.000
 it. Again. This is

78
00:04:32.900 --> 00:04:34.600
computationally expensive

79
00:04:37.500 --> 00:04:40.600
why if you remember on Sunday we talked about Big O

80
00:04:40.600 --> 00:04:43.400
 we talked about a very briefly, but we'll go into detail to

81
00:04:43.400 --> 00:04:44.100
 be called later on but

82
00:04:44.900 --> 00:04:45.300
We said that.

83
00:04:46.600 --> 00:04:48.500
If you do not know the position of an element.

84
00:04:49.600 --> 00:04:52.100
Then you have to switch the we have to search the entire

85
00:04:52.100 --> 00:04:55.200
 data structure for that particular value. So

86
00:04:55.200 --> 00:04:58.200
 now here no key is only the third element. That's not so bad. But

87
00:04:58.200 --> 00:04:59.500
 imagine we had I don't know.

88
00:05:00.700 --> 00:05:03.700
This was separated by $10,000

89
00:05:03.700 --> 00:05:05.100
 elements and Nokia was at the end.

90
00:05:06.600 --> 00:05:09.200
Well in order for python to find the location of that element,

91
00:05:09.200 --> 00:05:12.100
 it has to go through the entire list you don't have to do

92
00:05:12.100 --> 00:05:14.100
 it, but the computer will have to

93
00:05:15.300 --> 00:05:15.500
okay.

94
00:05:16.600 --> 00:05:18.800
It's easy to add if you want add something to.

95
00:05:20.500 --> 00:05:22.300
If you want to add something to the end of a list.

96
00:05:23.100 --> 00:05:26.200
It's pretty straightforward but searching not so much

97
00:05:26.200 --> 00:05:29.400
 which is why we want to talk. We want to explore other data structures.
