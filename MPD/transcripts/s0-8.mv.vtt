WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.100 --> 00:00:03.800
When it comes to computer algorithms and what again, let's pause our

1
00:00:03.800 --> 00:00:06.300
 right here and Define an algorithm. What is an algorithm?

2
00:00:07.700 --> 00:00:08.100
It is a

3
00:00:09.400 --> 00:00:11.300
sequence of instructions

4
00:00:14.500 --> 00:00:15.500
for the computer

5
00:00:17.800 --> 00:00:20.700
and these instructions can have

6
00:00:20.700 --> 00:00:23.600
 different variations. If you

7
00:00:23.600 --> 00:00:26.900
 look at the slide here, they can either be sequential where you

8
00:00:26.900 --> 00:00:29.400
 were instructing computer to do one thing after the next

9
00:00:29.400 --> 00:00:30.700
 in that order.

10
00:00:32.100 --> 00:00:33.200
Or they can be selected.

11
00:00:34.300 --> 00:00:37.200
You can program a computer or you can instruct the computer.

12
00:00:38.400 --> 00:00:42.300
to do statements but

13
00:00:41.300 --> 00:00:43.300
 in the conditional way

14
00:00:44.300 --> 00:00:44.900
so for example

15
00:00:47.500 --> 00:00:49.700
Let's say the user types in a username and password.

16
00:00:50.500 --> 00:00:54.200
If the username and password is correct, then perform

17
00:00:53.200 --> 00:00:56.300
 these set of operations or these set

18
00:00:56.300 --> 00:00:59.400
 of instructions. Otherwise perform those other instructions.

19
00:01:00.300 --> 00:01:02.100
So I can be. All right. Let's log them in.

20
00:01:02.700 --> 00:01:05.500
and welcome them and pull up their profile picture

21
00:01:05.500 --> 00:01:05.700
 and

22
00:01:06.700 --> 00:01:07.000
their

23
00:01:07.600 --> 00:01:08.700
website preferences

24
00:01:09.500 --> 00:01:12.400
or we can redirect them to the registration

25
00:01:12.400 --> 00:01:16.100
 page and tell them what the registration process requires.

26
00:01:16.800 --> 00:01:19.100
and well, that could be another set of

27
00:01:19.800 --> 00:01:20.200
instructions

28
00:01:22.300 --> 00:01:22.400
a third

29
00:01:27.200 --> 00:01:30.400
type of algorithm could be in an iterative algorithm.

30
00:01:30.400 --> 00:01:33.600
 Well you where we where you repeat a statement again,

31
00:01:33.600 --> 00:01:35.700
 and again until some condition is

32
00:01:36.700 --> 00:01:39.400
Satisfied so for example if you have a subscription.

33
00:01:41.200 --> 00:01:44.400
On your app if you have a newsletter, for

34
00:01:44.400 --> 00:01:44.600
 example.

35
00:01:47.200 --> 00:01:49.100
You can send all those.

36
00:01:51.400 --> 00:01:53.000
all of your subscribers emails

37
00:01:55.500 --> 00:01:58.000
until all until you've reached the last user.

38
00:01:59.400 --> 00:02:02.500
And then you will not stop this emailing process until

39
00:02:02.500 --> 00:02:05.800
 you have reached the final customer.

40
00:02:07.100 --> 00:02:10.500
Now of course complex algorithms will be a combination of

41
00:02:10.500 --> 00:02:11.400
 all of these three.

42
00:02:12.200 --> 00:02:14.900
And there one of the problems you will encounter.

43
00:02:15.600 --> 00:02:19.000
When you're working on out, you know complex algorithms

44
00:02:18.200 --> 00:02:22.000
 that have selectivity and iteration involved

45
00:02:21.900 --> 00:02:23.100
 in the mix.

46
00:02:24.800 --> 00:02:27.900
You will end up with something and you may have heard of this before spaghetti code.

47
00:02:29.300 --> 00:02:30.200
where it is, so

48
00:02:31.500 --> 00:02:32.200
problematic

49
00:02:33.800 --> 00:02:37.000
And so prone to breaking.

50
00:02:37.900 --> 00:02:40.300
That you as the program wouldn't

51
00:02:40.300 --> 00:02:40.800
 even want to touch it.

52
00:02:41.700 --> 00:02:44.500
But on one hand you're afraid

53
00:02:44.500 --> 00:02:47.600
 of touching it. So that doesn't break on the other hand. You don't feel confident that

54
00:02:47.600 --> 00:02:50.200
 I will work all the time and what you want to

55
00:02:50.200 --> 00:02:52.900
 be able to do or what you'd like to be able to do is to

56
00:02:53.800 --> 00:02:54.900
reduce the complexity.

57
00:02:56.300 --> 00:02:59.400
To maintain the capability of the algorithm but

58
00:02:59.400 --> 00:03:02.200
 also reduces complexity. So it's so that it is.

59
00:03:04.100 --> 00:03:04.600
You know.

60
00:03:05.600 --> 00:03:07.200
testable

61
00:03:08.600 --> 00:03:11.200
and efficient you may

62
00:03:11.200 --> 00:03:14.300
 have heard of something called time and space complexity, right? You can have two

63
00:03:14.300 --> 00:03:17.200
 algorithms that did the two two that can

64
00:03:17.200 --> 00:03:20.000
 do the same thing, but one is far more efficient than the other

65
00:03:20.900 --> 00:03:20.900
 in fact.

66
00:03:23.300 --> 00:03:24.500
the efficiency of that

67
00:03:26.500 --> 00:03:28.600
the difference in efficiency can

68
00:03:29.500 --> 00:03:29.900
Really?

69
00:03:33.300 --> 00:03:34.300
Be more pronounced.

70
00:03:35.900 --> 00:03:36.300
when

71
00:03:37.400 --> 00:03:40.200
the data is larger or one more users are involved.

72
00:03:41.100 --> 00:03:44.700
So, how do you how do you go about reducing a very

73
00:03:44.700 --> 00:03:46.400
 elaborate algorithm?

74
00:03:47.400 --> 00:03:48.800
And make it more concise.

75
00:03:50.300 --> 00:03:50.900
and efficient

76
00:03:53.600 --> 00:03:55.800
well, if you knew if you if you are able to

77
00:03:57.900 --> 00:04:00.900
recognize what parts of the algorithm could

78
00:04:00.900 --> 00:04:01.100
 be

79
00:04:02.000 --> 00:04:02.800
collapsed

80
00:04:03.500 --> 00:04:05.700
or to which part of the algorithm you can

81
00:04:06.400 --> 00:04:07.400
apply

82
00:04:08.500 --> 00:04:09.700
propositional calculus

83
00:04:10.600 --> 00:04:11.000
then

84
00:04:12.700 --> 00:04:16.300
you'll be able to do that. You will be able to write very effective.

85
00:04:17.500 --> 00:04:18.700
and elaborate algorithms

86
00:04:20.300 --> 00:04:22.800
if you have this mathematical Foundation

87
00:04:24.600 --> 00:04:27.600
And it really doesn't take much to learn propositional calculus

88
00:04:27.600 --> 00:04:30.500
 and we'll maybe soon look at look at

89
00:04:30.500 --> 00:04:30.800
 a tutorial.

90
00:04:32.900 --> 00:04:33.100
right
