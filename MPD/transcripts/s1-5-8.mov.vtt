WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.200 --> 00:00:01.300
When you create a list.

1
00:00:04.800 --> 00:00:05.800
Like could it up here?

2
00:00:12.400 --> 00:00:14.200
You are indirectly creating.

3
00:00:16.400 --> 00:00:17.000
an object

4
00:00:18.800 --> 00:00:20.200
a dictionary is an object.

5
00:00:21.500 --> 00:00:25.200
So in other words when you create a list in Python,

6
00:00:24.200 --> 00:00:27.400
 you are indirectly creating the

7
00:00:27.400 --> 00:00:30.300
 dictionary. So behind the scenes, let's say

8
00:00:30.300 --> 00:00:31.400
 python will do the following.

9
00:00:38.400 --> 00:00:40.800
So remember in a dictionary you must have the keys, right?

10
00:00:42.600 --> 00:00:44.500
and the key can either be a number or

11
00:00:49.100 --> 00:00:50.000
a string

12
00:00:51.200 --> 00:00:54.100
when you create a list you're actually doing that indirectly.

13
00:00:56.100 --> 00:00:56.400
so here

14
00:00:57.700 --> 00:00:59.400
the indices are no longer applied.

15
00:01:01.400 --> 00:01:02.900
But they are explicitly.

16
00:01:05.400 --> 00:01:05.600
captain

17
00:01:07.800 --> 00:01:10.100
now just keep in mind. I'm going to

18
00:01:10.100 --> 00:01:13.400
 refer to some class terminology.

19
00:01:14.400 --> 00:01:17.100
If you're watching this later and you this is

20
00:01:17.100 --> 00:01:20.300
 a this is too fast for you. Like I said, just watch the playlist, okay?

21
00:01:21.300 --> 00:01:21.800
I'm just

22
00:01:22.700 --> 00:01:25.100
Quickly reviewing some python topics for

23
00:01:25.100 --> 00:01:28.600
 later, but if you want a full tutorial it exists, so

24
00:01:28.600 --> 00:01:28.900
 don't worry.

25
00:01:31.200 --> 00:01:32.200
Let me bring back the airports.

26
00:01:33.100 --> 00:01:35.300
These four data structures that we talked about very quickly.

27
00:01:38.200 --> 00:01:38.600
So we have

28
00:01:39.800 --> 00:01:40.200
lists

29
00:01:41.600 --> 00:01:42.200
two poles

30
00:01:44.000 --> 00:01:44.600
sets

31
00:01:47.200 --> 00:01:47.800
dictionaries

32
00:01:50.800 --> 00:01:53.200
these are all instances of a

33
00:01:53.200 --> 00:01:53.600
 class.

34
00:01:55.700 --> 00:01:56.400
So let me use.

35
00:01:59.600 --> 00:02:02.600
A functions as a stepping stone for understanding classes.

36
00:02:04.200 --> 00:02:04.500
Okay.

37
00:02:05.300 --> 00:02:08.700
So what is a function let's create a third section

38
00:02:08.700 --> 00:02:09.200
 of fourth.

39
00:02:10.800 --> 00:02:11.900
A third section, right?

40
00:02:13.100 --> 00:02:14.100
So the data structures

41
00:02:16.200 --> 00:02:17.700
Let's do functions.

42
00:02:20.300 --> 00:02:21.500
And then we'll do classes.

43
00:02:27.500 --> 00:02:29.300
a function is a collection of

44
00:02:32.900 --> 00:02:34.400
programming statements

45
00:02:37.200 --> 00:02:40.200
Okay. So let's say you have one statement here print price like

46
00:02:40.200 --> 00:02:41.400
 we did in the initial example.

47
00:02:42.300 --> 00:02:45.500
Then you have some variable

48
00:02:45.500 --> 00:02:48.100
 called sum or not. We can't use that.

49
00:02:48.100 --> 00:02:52.600
 Let's say the sum and that is equal to number A

50
00:02:52.600 --> 00:02:53.900
 Plus number B.

51
00:02:58.100 --> 00:03:01.500
And then let's see up here. We have two variables in there

52
00:03:01.500 --> 00:03:02.900
 a equals 10.

53
00:03:03.500 --> 00:03:06.400
Would be equals 20 whatever right?

54
00:03:06.400 --> 00:03:09.000
 These are I'm just trying to typing some random lines here.

55
00:03:10.500 --> 00:03:12.800
So that's a statement. That's a statement is all statements.

56
00:03:13.900 --> 00:03:14.800
Put them inside.

57
00:03:16.300 --> 00:03:19.000
This detected together if you

58
00:03:19.300 --> 00:03:22.300
 want to contain them together if you want them to be associated with each other

59
00:03:22.300 --> 00:03:22.800
 you can.

60
00:03:23.400 --> 00:03:24.400
You indent your code?

61
00:03:26.500 --> 00:03:27.800
So you can put them inside a function.

62
00:03:28.700 --> 00:03:29.000
Okay.

63
00:03:30.900 --> 00:03:33.500
But indentation spacing rather

64
00:03:33.500 --> 00:03:34.500
 is everything in Python.

65
00:03:35.600 --> 00:03:38.100
So let's say you have a function if you want to create a

66
00:03:38.100 --> 00:03:40.700
 function you type in the reserved keyword Def.

67
00:03:41.600 --> 00:03:44.400
And you can see in vs code. This is indicated by

68
00:03:44.400 --> 00:03:44.700
 the color.

69
00:03:45.400 --> 00:03:47.100
And then you would type in this for example some function.

70
00:03:49.800 --> 00:03:51.300
Okay, that's how you

71
00:03:52.600 --> 00:03:54.000
Declare a function name.

72
00:03:54.800 --> 00:03:55.900
now functions have scope

73
00:03:56.600 --> 00:03:59.500
right a function is a collection of instructions. So let's say

74
00:03:59.500 --> 00:04:02.300
 these are the instructions that we want to put inside the function.

75
00:04:02.300 --> 00:04:03.300
 So you do is you

76
00:04:04.500 --> 00:04:06.400
Come up here. And then you

77
00:04:08.800 --> 00:04:10.200
push push the code inside

78
00:04:11.400 --> 00:04:14.200
just like that you have put these five times of code

79
00:04:14.200 --> 00:04:17.600
 inside the function. So this is outside the function inside the

80
00:04:17.600 --> 00:04:19.800
 function outside the function inside the function. That's it.

81
00:04:21.500 --> 00:04:22.500
now

82
00:04:24.100 --> 00:04:27.400
this function is actually doing anything particularly useful, but I just

83
00:04:27.400 --> 00:04:29.200
 want to show you how to how you create a function.

84
00:04:30.200 --> 00:04:32.500
So if a function is a collection of statements.

85
00:04:34.100 --> 00:04:35.900
If a function is a collection of statements.

86
00:04:37.200 --> 00:04:39.000
then a class is a collection of

87
00:04:42.400 --> 00:04:43.300
fill in the blacks

88
00:04:43.900 --> 00:04:45.600
so class is a collection of functions.

89
00:04:47.100 --> 00:04:48.100
How do you create a class?

90
00:04:49.300 --> 00:04:49.800
like so

91
00:04:50.900 --> 00:04:51.700
let's say class.

92
00:04:52.500 --> 00:04:55.700
And I want to use something that is not so abstract. Let's call

93
00:04:55.700 --> 00:04:56.000
 it car.

94
00:04:57.700 --> 00:04:58.600
You notice something here.

95
00:05:05.700 --> 00:05:07.300
The Declaration is very similar.

96
00:05:08.900 --> 00:05:11.200
Here, we have a reserved keyword followed by a name and

97
00:05:11.200 --> 00:05:15.200
 a pair of parentheses. And of course, ah colon which

98
00:05:14.200 --> 00:05:17.800
 indicates the scope is going to be a scope same

99
00:05:17.800 --> 00:05:20.400
 thing with classes. We have our reserved keyword followed by

100
00:05:20.400 --> 00:05:23.400
 a name Perth sees and the calling

101
00:05:23.400 --> 00:05:24.200
 which indicates the scope.

102
00:05:25.900 --> 00:05:28.500
Now you want to pay attention to something if you notice I

103
00:05:28.500 --> 00:05:29.400
 may see uppercase.

104
00:05:30.200 --> 00:05:32.500
This is not mistake, and it's not arbitrary.

105
00:05:33.100 --> 00:05:36.700
The only time you're allowed to declare a function, excuse me,

106
00:05:36.700 --> 00:05:39.000
 the only time we're allowed to

107
00:05:39.200 --> 00:05:42.100
 use an uppercase letter is when you're declaring classes when you

108
00:05:42.100 --> 00:05:43.200
 declare variables.

109
00:05:44.200 --> 00:05:47.500
And functions you must always use

110
00:05:47.500 --> 00:05:48.500
 lowercase letters.

111
00:05:49.500 --> 00:05:51.600
The very first letter must be all lowercase.

112
00:05:52.700 --> 00:05:55.900
Your code will not break if you violate this rule this

113
00:05:55.900 --> 00:05:58.400
 convention, but it is a very bad practice.

114
00:05:59.300 --> 00:06:02.500
It will confuse others who look at your script and perhaps even

115
00:06:02.500 --> 00:06:06.100
 yourself when you come back to your code later on.

116
00:06:05.100 --> 00:06:08.100
 So always use lowercase.

117
00:06:08.800 --> 00:06:11.700
For the first character unless you're defining

118
00:06:11.700 --> 00:06:12.100
 a class.

119
00:06:13.400 --> 00:06:16.100
So we said that a class as well. We said that we said that it

120
00:06:16.100 --> 00:06:19.200
 is a collection of functions. So what are some of the functions of a car?

121
00:06:19.900 --> 00:06:22.500
What are the things that car can do it can accelerate?

122
00:06:24.700 --> 00:06:24.900
Okay.

123
00:06:26.200 --> 00:06:28.100
And it does something. Let me just put some code in here.

124
00:06:28.900 --> 00:06:30.000
It can break.

125
00:06:32.200 --> 00:06:34.200
And let's type in some fixed statements in here.

126
00:06:35.800 --> 00:06:37.200
Reverse or whatever, right?

127
00:06:39.500 --> 00:06:43.200
And I'm just gonna put the return keyword so that I don't

128
00:06:42.200 --> 00:06:45.400
 get these linking. I don't

129
00:06:45.400 --> 00:06:47.200
 get these linking in and my code so

130
00:06:48.400 --> 00:06:51.600
Exactly, right. So we have some programming statements

131
00:06:51.600 --> 00:06:53.500
 and the function returns something.

132
00:06:54.600 --> 00:06:57.300
Programming statements that you turn something programming statements

133
00:06:57.300 --> 00:07:00.500
 and it turns something now notice how I've used the invitation

134
00:07:00.500 --> 00:07:02.600
 to indicate the scope of this function.

135
00:07:03.800 --> 00:07:05.500
Same thing here. Same thing here.

136
00:07:06.300 --> 00:07:07.600
and of course all three functions

137
00:07:09.300 --> 00:07:12.500
Are indented indicating that all three functions belong inside

138
00:07:12.500 --> 00:07:13.100
 the class.

139
00:07:14.500 --> 00:07:14.800
so

140
00:07:15.700 --> 00:07:18.200
there you have it. We said a function is a collection

141
00:07:18.200 --> 00:07:22.000
 of statements and a class the collection of functions. There's there's

142
00:07:21.000 --> 00:07:22.200
 more

143
00:07:25.500 --> 00:07:28.400
First of all, when you put a function inside a class,

144
00:07:28.400 --> 00:07:30.000
 we don't call it a function anymore.

145
00:07:31.300 --> 00:07:31.800
There's a special name.

146
00:07:34.600 --> 00:07:37.500
If you put a function inside of class, it's still a function. Well, we

147
00:07:37.500 --> 00:07:39.900
 just give it a different name to make it especially clear.

148
00:07:40.700 --> 00:07:42.700
That this function can only work.

149
00:07:44.200 --> 00:07:48.200
When the class is involved or rather when the object is instantiated

150
00:07:47.200 --> 00:07:50.200
 anyone know what we call functions when they're inside

151
00:07:50.200 --> 00:07:50.500
 a class.

152
00:07:51.500 --> 00:07:52.600
Precisely methods, right?
