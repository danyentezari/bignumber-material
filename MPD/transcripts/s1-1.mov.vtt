WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.800 --> 00:00:02.700
Let's start with the high level.

1
00:00:03.900 --> 00:00:07.000
overview of computer organization

2
00:00:07.900 --> 00:00:10.400
first that's established two words

3
00:00:10.400 --> 00:00:12.800
 two terms program and process.

4
00:00:13.700 --> 00:00:16.700
Programmer process we said that a program is the

5
00:00:16.700 --> 00:00:18.300
 file in which you write your algorithms.

6
00:00:19.200 --> 00:00:20.200
and when you run the program

7
00:00:21.200 --> 00:00:22.900
you enter to a process, okay?

8
00:00:24.100 --> 00:00:27.600
So at the very top we have your program right the

9
00:00:27.600 --> 00:00:31.000
 files that you have written your python files your C++ files

10
00:00:30.200 --> 00:00:31.800
 your Java files, right?

11
00:00:32.500 --> 00:00:34.200
and at the very bottom we have the

12
00:00:35.200 --> 00:00:38.600
the hardware the the circuits right

13
00:00:38.600 --> 00:00:41.700
 the gates you put

14
00:00:41.700 --> 00:00:44.300
 your SSD disk your RAM your CPU

15
00:00:44.300 --> 00:00:47.500
 and the way this is going to happen. Is that your program?

16
00:00:48.200 --> 00:00:51.200
Let me actually jump to the next slide to show you something.

17
00:00:52.200 --> 00:00:53.900
Okay, so we'll go back and forth.

18
00:00:54.700 --> 00:00:55.500
So a program is

19
00:00:57.100 --> 00:01:00.700
a file with a let's say C++ extension

20
00:01:00.700 --> 00:01:02.700
 python extension or JavaScript extension.

21
00:01:03.900 --> 00:01:07.600
And the way we get to the hardware is through the well the

22
00:01:07.600 --> 00:01:10.500
 compiler right which the compiler will convert your

23
00:01:10.500 --> 00:01:11.800
 high level programming language.

24
00:01:12.600 --> 00:01:15.700
To ultimately a lower level programmable language. So if

25
00:01:15.700 --> 00:01:18.700
 you are programming a C++ you have

26
00:01:18.700 --> 00:01:19.800
 the new compiler.

27
00:01:20.500 --> 00:01:22.900
For python it will be the python interpreter.

28
00:01:24.400 --> 00:01:28.200
And I'll come to how you can install this in a moment for JavaScript.

29
00:01:27.200 --> 00:01:30.300
 There is no GS. So every poem language will

30
00:01:30.300 --> 00:01:31.900
 have its own compiler.

31
00:01:33.800 --> 00:01:36.100
Then we have the assembler the assembler will

32
00:01:36.100 --> 00:01:39.500
 convert the high level programmable language to what we

33
00:01:39.500 --> 00:01:41.400
 call machine code.

34
00:01:42.100 --> 00:01:46.400
Okay, so the assembler will convert

35
00:01:45.400 --> 00:01:48.500
 your high-level point of language to something the operating

36
00:01:48.500 --> 00:01:49.000
 system understands.

37
00:01:49.900 --> 00:01:52.200
And then the operating system will interact with the hardware

38
00:01:52.200 --> 00:01:55.100
 through something called instruction set architecture.

39
00:01:55.800 --> 00:01:55.900
Okay.

40
00:01:57.300 --> 00:02:00.600
And then there's a tiny layer of software called microcode which

41
00:02:00.600 --> 00:02:03.200
 But ultimately will get to ones and zeros,

42
00:02:03.200 --> 00:02:05.700
 which translate to electric vehicles to the hardware.

43
00:02:07.200 --> 00:02:08.300
We are going to be focused.

44
00:02:09.700 --> 00:02:10.900
and on the topmost layer

45
00:02:11.800 --> 00:02:14.200
Now I will have some additional material. We won't

46
00:02:14.200 --> 00:02:17.200
 cover the live session. We'll go into a

47
00:02:17.200 --> 00:02:20.400
 little more detail about these but mainly we will start stay

48
00:02:20.400 --> 00:02:21.300
 at this at this level.

49
00:02:22.500 --> 00:02:22.700
Okay.

50
00:02:23.800 --> 00:02:24.600
But there's a little more.

51
00:02:29.200 --> 00:02:32.500
The main program language for this course will be python.

52
00:02:33.800 --> 00:02:38.000
But the I will have a few comments or a

53
00:02:37.000 --> 00:02:38.000
 few.

54
00:02:41.300 --> 00:02:44.100
PDF files that also show you

55
00:02:44.100 --> 00:02:45.600
 examples in c++?

56
00:02:46.600 --> 00:02:49.300
The purpose is for us to understand what your

57
00:02:49.300 --> 00:02:51.700
 program is doing to the computer's memory. Okay?

58
00:02:52.700 --> 00:02:55.500
The purpose is to understand how your program language works

59
00:02:55.500 --> 00:02:58.000
 with computer memory. So if I can just skip to this

60
00:02:58.400 --> 00:03:00.200
 slide in a moment every single computer.

61
00:03:01.900 --> 00:03:03.800
Every single computer has three components.

62
00:03:05.700 --> 00:03:08.300
when I say computer, I mean from your laptop to the

63
00:03:11.600 --> 00:03:14.700
servers in data centers your

64
00:03:14.700 --> 00:03:17.500
 smartphone anything on which any kind of electronic device

65
00:03:17.500 --> 00:03:20.200
 on which you run an operating system. That's what I call the computer

66
00:03:20.200 --> 00:03:22.700
 and all computers have three components.

67
00:03:23.700 --> 00:03:26.600
They have a processing unit. That's your CPU or

68
00:03:26.600 --> 00:03:29.000
 GPU and in the case of machine learning, you know,

69
00:03:29.200 --> 00:03:32.700
 we have something like a TPU is a custom-made processing units

70
00:03:32.700 --> 00:03:35.900
 for working with large tabular data,

71
00:03:35.900 --> 00:03:37.200
 but they're processing units.

72
00:03:38.300 --> 00:03:41.500
And then we have two forms of storage. There's permanent storage and temporary

73
00:03:41.500 --> 00:03:46.400
 storage permanent storage, of course is a device that

74
00:03:45.400 --> 00:03:48.200
 retains data, even when

75
00:03:48.200 --> 00:03:51.800
 the computer is turned off. So SSD disks Optical drives

76
00:03:51.800 --> 00:03:55.200
 USB sticks even tape

77
00:03:54.200 --> 00:03:56.800
 drives right and temporary storage.

78
00:03:58.200 --> 00:04:00.200
As the name suggests is a storage device.

79
00:04:01.200 --> 00:04:03.400
That will retain data so long as the computer is running.

80
00:04:05.100 --> 00:04:07.600
Has programmers this is our primary concern.

81
00:04:08.900 --> 00:04:11.100
now if your data engineer, you may also want to know how

82
00:04:13.400 --> 00:04:16.200
data is cached on permanent storage, but that's a discussion for later.

83
00:04:17.100 --> 00:04:20.100
Okay, this may be relevant if you're working with big data or if

84
00:04:20.100 --> 00:04:23.100
 you're working with yeah if you're working with big data, you know doing things like

85
00:04:23.100 --> 00:04:23.700
 mapreduce

86
00:04:25.100 --> 00:04:28.600
But as a programmer, you must be familiar with temporary

87
00:04:28.600 --> 00:04:32.200
 storage. So what you program is doing when when

88
00:04:31.200 --> 00:04:34.100
 you run it, what is it doing temporary storage?

89
00:04:34.100 --> 00:04:35.000
 Okay.
