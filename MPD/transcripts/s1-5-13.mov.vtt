WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.500 --> 00:00:03.200
let me give you a glimpse into how we will be working with the

1
00:00:04.800 --> 00:00:07.800
with graph data structures. So we said that we have four primitive data

2
00:00:07.800 --> 00:00:08.200
 types, right? Yes.

3
00:00:10.200 --> 00:00:13.400
We said we have four primitive data types. And these are these are

4
00:00:13.400 --> 00:00:15.700
 these are the ones to which we preferring.

5
00:00:17.600 --> 00:00:17.800
Okay.

6
00:00:19.900 --> 00:00:20.100
now

7
00:00:23.100 --> 00:00:24.700
Let me take you to the slides for a second.

8
00:00:31.400 --> 00:00:32.200
even that list

9
00:00:33.600 --> 00:00:35.200
has different ways to be implemented.

10
00:00:37.700 --> 00:00:40.100
There are different ways to implement a list.

11
00:00:41.500 --> 00:00:42.700
You will get this later on.

12
00:00:43.200 --> 00:00:43.900
but

13
00:00:45.600 --> 00:00:47.600
one thing that python doesn't have internally.

14
00:00:48.500 --> 00:00:51.100
Is a graph data structure and if you remember we said

15
00:00:51.100 --> 00:00:52.600
 that a tree is a special type of graph.

16
00:00:53.400 --> 00:00:56.600
Okay, so the examples that we looked at or at

17
00:00:56.600 --> 00:00:59.200
 least for the first three there, let's set the tubals. Those are like

18
00:00:59.200 --> 00:01:00.300
 array arrays.

19
00:01:00.900 --> 00:01:02.400
whereas dictionaries

20
00:01:03.200 --> 00:01:04.400
Are graph data structures?

21
00:01:06.500 --> 00:01:09.300
Let's say we can Implement a small binary tree.

22
00:01:17.700 --> 00:01:20.000
And let's look at something that this one this is small enough.

23
00:01:23.900 --> 00:01:25.800
In your opinion, how would you implement this?

24
00:01:26.400 --> 00:01:29.500
And with what would you implemented which would which one of

25
00:01:29.500 --> 00:01:32.000
 those four primitive data structures?

26
00:01:32.800 --> 00:01:34.300
Would you implement the binary tree?

27
00:01:35.700 --> 00:01:38.200
And once again, what do we

28
00:01:38.200 --> 00:01:40.900
 say? A binary tree is there is a graph Theory structure.

29
00:01:41.700 --> 00:01:44.400
With the edges go to only one

30
00:01:44.400 --> 00:01:44.700
 element.

31
00:01:46.700 --> 00:01:49.200
excuse me, the only division element only

32
00:01:49.200 --> 00:01:49.400
 once

33
00:01:50.200 --> 00:01:52.400
Okay, so unlike a graph where you can have circular.

34
00:01:53.300 --> 00:01:56.000
edges with a tree you have

35
00:01:57.200 --> 00:01:58.900
just it it's only one direction.

36
00:01:59.900 --> 00:02:00.700
There's no circular.

37
00:02:01.700 --> 00:02:04.400
Okay, and it has the effect with a binary

38
00:02:04.400 --> 00:02:05.900
 tree a special type of

39
00:02:06.600 --> 00:02:09.600
tree data structure now other trees include beaches

40
00:02:09.600 --> 00:02:12.300
 which are implemented which is what how

41
00:02:12.300 --> 00:02:15.600
 databases mainly stored data if

42
00:02:15.600 --> 00:02:16.100
 you work with

43
00:02:16.900 --> 00:02:18.900
if you've ever wondered how

44
00:02:20.200 --> 00:02:24.100
Data strong, excuse me, databases, especially now great.

45
00:02:23.100 --> 00:02:26.300
 Yeah. No SQL databases.

46
00:02:27.100 --> 00:02:28.400
They have a reason why they're fast.

47
00:02:29.100 --> 00:02:29.600
but how do

48
00:02:31.200 --> 00:02:34.200
SQL databases returned it quickly.

49
00:02:34.200 --> 00:02:37.500
 It's because they don't actually store list. They actually store data in

50
00:02:37.500 --> 00:02:38.200
 the form of a B3.

51
00:02:38.800 --> 00:02:42.100
a B3 is a type of tree that doesn't

52
00:02:41.100 --> 00:02:43.000
 just have

53
00:02:46.500 --> 00:02:49.300
two child nodes a binary tree has only two channels right

54
00:02:49.300 --> 00:02:52.300
 binaries either left or right left or right?

55
00:02:52.300 --> 00:02:55.800
 What is a b-3 can have 1,000 child notes.

56
00:02:55.800 --> 00:02:58.400
 Okay, a binary tree will have only two child

57
00:02:58.400 --> 00:02:58.600
 nodes.

58
00:02:59.400 --> 00:03:02.100
a beach we can have 1,000 Charles and there they

59
00:03:02.100 --> 00:03:03.100
 work especially well for

60
00:03:04.600 --> 00:03:07.200
Databases but we look at what those examples afterwards.

61
00:03:08.500 --> 00:03:11.100
Anyway, the point of

62
00:03:11.100 --> 00:03:14.600
 a binary tree is what is to have the search time or if

63
00:03:14.600 --> 00:03:18.200
 it's actually better than having. It's the log

64
00:03:17.200 --> 00:03:19.200
 event log base 2 event.

65
00:03:19.800 --> 00:03:20.600
because you're having

66
00:03:21.600 --> 00:03:22.600
every subbranch
