WEBVTT - This file was automatically generated by VIMEO

0
00:00:00.500 --> 00:00:03.400
Very quickly. Now, let's talk about the applications of what we've

1
00:00:03.400 --> 00:00:03.600
 talked about.

2
00:00:04.600 --> 00:00:06.600
with respect to discrete mathematics

3
00:00:08.800 --> 00:00:12.900
and then we will switch to vs code to start

4
00:00:11.900 --> 00:00:13.600
 our tutorial.

5
00:00:14.400 --> 00:00:14.500
now

6
00:00:15.600 --> 00:00:18.700
again, what you see on the left are the topics that

7
00:00:18.700 --> 00:00:21.000
 will be covered in discrete Mathletics. And at the right we have

8
00:00:21.200 --> 00:00:22.600
 the applications of these topics.

9
00:00:24.400 --> 00:00:25.500
Set sets are.

10
00:00:27.900 --> 00:00:29.600
the first thing that you will deal with

11
00:00:31.300 --> 00:00:34.300
in programming a data sites or for that matter anything in

12
00:00:34.300 --> 00:00:34.700
 mathematics.

13
00:00:36.200 --> 00:00:39.600
But of course being able to read the notation.

14
00:00:40.500 --> 00:00:41.200
Set notation.

15
00:00:43.200 --> 00:00:45.100
is a prerequisite for

16
00:00:48.200 --> 00:00:49.100
being able to read

17
00:00:51.400 --> 00:00:54.500
any text on data structures. So for

18
00:00:54.500 --> 00:00:57.600
 example, we have very two well-known books on data structures

19
00:00:57.600 --> 00:00:58.100
 algorithms.

20
00:00:58.700 --> 00:01:01.300
One of one of them is from corpsman at all

21
00:01:01.300 --> 00:01:04.400
 on introduction. It's called introduction to algorithms. And the other one

22
00:01:04.400 --> 00:01:05.400
 is from Robert Sedgwick.

23
00:01:07.100 --> 00:01:09.800
And the book the title of the book is also algorithms.

24
00:01:10.800 --> 00:01:12.000
so you will find a lot of

25
00:01:12.900 --> 00:01:15.800
Set notation in those books. If you want to on be

26
00:01:15.800 --> 00:01:18.400
 a master of data structures, they need to be able to read those

27
00:01:18.400 --> 00:01:21.100
 books. And if you want to be able to read those books, you have to be

28
00:01:21.100 --> 00:01:24.000
 very very familiar with set notation. But of course

29
00:01:24.200 --> 00:01:27.400
 this is not just limited to those books. Like I said sets are

30
00:01:27.400 --> 00:01:28.700
 ubiquitous in all of mathematics.

31
00:01:29.600 --> 00:01:33.500
probability Theory abstract algebra calculus

32
00:01:35.900 --> 00:01:37.700
linear algebra and

33
00:01:39.700 --> 00:01:40.500
calculus

34
00:01:42.500 --> 00:01:42.700
so

35
00:01:45.300 --> 00:01:48.300
if this is your first time hearing about the screen

36
00:01:48.300 --> 00:01:50.300
 mathematics, that's that should be a starting point.

37
00:01:50.800 --> 00:01:53.600
Logic, we talked about logic and how it is

38
00:01:53.600 --> 00:01:56.800
 important to running efficient algorithms.

39
00:01:57.700 --> 00:01:58.500
algebra

40
00:01:59.500 --> 00:02:02.800
And once again, I'm referring to an algebraic

41
00:02:02.800 --> 00:02:05.800
 structure. This one again is something you

42
00:02:05.800 --> 00:02:09.400
 you ubiquitous and higher level mathematics. Well,

43
00:02:08.400 --> 00:02:11.700
 for example, if you want to understand computer Graphics,

44
00:02:11.700 --> 00:02:14.600
 which uses a lot of you know,

45
00:02:15.700 --> 00:02:18.700
computer graphics and computer vision. They used

46
00:02:18.700 --> 00:02:21.100
 these fields use a lot

47
00:02:21.100 --> 00:02:24.700
 of advanced mathematics and a

48
00:02:24.700 --> 00:02:25.700
 big part of it is of course.

49
00:02:26.500 --> 00:02:28.900
understanding things like vector spaces

50
00:02:30.900 --> 00:02:33.300
and linear algebra is Central to

51
00:02:33.300 --> 00:02:35.000
 computer graphics and computer vision.

52
00:02:36.200 --> 00:02:40.500
And if you want to read linear algebra and really understand Concepts

53
00:02:39.500 --> 00:02:41.300
 and linear algebra.

54
00:02:42.800 --> 00:02:45.300
The prerequisite is abstract algebra.

55
00:02:46.700 --> 00:02:47.000
and

56
00:02:48.200 --> 00:02:51.200
how do you learn abstract algebra? Well, you need to start learning

57
00:02:51.200 --> 00:02:51.600
 sets.

58
00:02:53.700 --> 00:02:57.800
Because once you learn such then you can understand the derivations

59
00:02:56.800 --> 00:02:58.400
 of sets.

60
00:02:59.200 --> 00:02:59.800
So things like

61
00:03:00.700 --> 00:03:02.100
field Rings groups

62
00:03:02.800 --> 00:03:04.600
like to say Vector spaces Etc.

63
00:03:05.800 --> 00:03:06.400
cryptography

64
00:03:08.300 --> 00:03:11.200
I mentioned this before at the heart of cryptography is

65
00:03:12.300 --> 00:03:13.400
our prime numbers

66
00:03:14.100 --> 00:03:16.900
and divisibility which is what congruence is about.

67
00:03:18.000 --> 00:03:18.500
compression

68
00:03:19.700 --> 00:03:22.600
So how does compression work compression uses?

69
00:03:25.100 --> 00:03:26.300
tries to use bits

70
00:03:27.600 --> 00:03:29.700
to represent and call it characters.

71
00:03:30.500 --> 00:03:33.600
So if you've heard of utf-8 or utf32.

72
00:03:34.900 --> 00:03:36.300
And let me show you something very quickly.

73
00:03:37.400 --> 00:03:40.600
So this is how encoding Works to encode

74
00:03:40.600 --> 00:03:40.900
 means to?

75
00:03:43.000 --> 00:03:43.600
represent

76
00:03:45.200 --> 00:03:46.800
alphanumeric characters or all

77
00:03:47.800 --> 00:03:50.100
types of characters that can be represented on

78
00:03:50.100 --> 00:03:51.500
 the computer using

79
00:03:52.600 --> 00:03:52.800
a

80
00:03:56.800 --> 00:03:57.800
specified

81
00:03:58.600 --> 00:04:00.100
number of bits

82
00:04:02.100 --> 00:04:04.000
so for example in utf-8

83
00:04:06.300 --> 00:04:09.300
In a utf-8 encoding scheme

84
00:04:09.300 --> 00:04:12.800
 you use eight bits of characters to

85
00:04:12.800 --> 00:04:14.700
 represent any type of character.

86
00:04:16.300 --> 00:04:17.200
whereas in

87
00:04:17.900 --> 00:04:20.600
for example 16 utf-16 used

88
00:04:20.600 --> 00:04:22.100
 16 bits of characters.

89
00:04:23.300 --> 00:04:25.100
Why does this matter well the more?

90
00:04:26.600 --> 00:04:27.100
bits

91
00:04:28.200 --> 00:04:29.900
you allocate to a character.

92
00:04:31.400 --> 00:04:34.400
the more character variation you

93
00:04:34.400 --> 00:04:34.800
 can store

94
00:04:36.400 --> 00:04:39.700
Yes, because the more bits you have available the more characters you

95
00:04:39.700 --> 00:04:39.900
 can store.

96
00:04:40.700 --> 00:04:40.800
now

97
00:04:44.500 --> 00:04:47.000
it's nice to have it's nice to be able to be able to

98
00:04:47.400 --> 00:04:48.300
 represent all kinds of characters.

99
00:04:49.600 --> 00:04:52.300
the problem is every single character will then

100
00:04:52.300 --> 00:04:53.200
 take

101
00:04:57.100 --> 00:05:02.100
that much of space. So for example, if you have a file with utf32

102
00:05:00.100 --> 00:05:03.800
 encoding each

103
00:05:03.800 --> 00:05:04.400
 character.

104
00:05:05.300 --> 00:05:08.200
That you put in a file. Let's say you have a text file right and you set it

105
00:05:08.200 --> 00:05:11.800
 set the encoding to utf32 every single

106
00:05:11.800 --> 00:05:14.400
 character that you type into

107
00:05:14.400 --> 00:05:17.300
 that file will consume 32 bits

108
00:05:17.300 --> 00:05:17.600
 of space.

109
00:05:19.300 --> 00:05:21.700
even a space even a period even

110
00:05:22.800 --> 00:05:23.400
a comma

111
00:05:23.900 --> 00:05:26.400
will take up 32 bits of space. This will

112
00:05:26.400 --> 00:05:27.500
 take a lot of

113
00:05:28.500 --> 00:05:30.300
disk space very quickly.

114
00:05:32.100 --> 00:05:35.600
So when possible you want to choose the appropriate encoding

115
00:05:35.600 --> 00:05:38.800
 if you're going to be using all the English or that letters you

116
00:05:38.800 --> 00:05:39.100
 can use.

117
00:05:40.200 --> 00:05:41.800
something like utf-8

118
00:05:43.100 --> 00:05:47.100
but if you will be right if your file is going to contain other languages

119
00:05:46.100 --> 00:05:47.500
 or

120
00:05:48.300 --> 00:05:51.600
let's say mathematical symbols. You will need a different encoding

121
00:05:51.600 --> 00:05:51.800
 scheme.

122
00:05:54.100 --> 00:05:57.500
So how does compression work compression will one type

123
00:05:57.500 --> 00:06:00.200
 of compression technique is to vary the number of

124
00:06:00.200 --> 00:06:00.500
 bits.

125
00:06:01.400 --> 00:06:04.800
so as opposed allocating every single character

126
00:06:04.800 --> 00:06:08.000
 the same bit allocation a

127
00:06:07.500 --> 00:06:09.400
 compression algorithm will

128
00:06:11.300 --> 00:06:12.500
change the number of bits.

129
00:06:13.800 --> 00:06:16.700
If there's a for example a character that appears frequently

130
00:06:16.700 --> 00:06:19.400
 like a space where we can represent the spaces

131
00:06:19.400 --> 00:06:23.400
 or the small number of bits and there's a way we can arrange the

132
00:06:23.400 --> 00:06:26.600
 bits so that when we decode when we decompress the

133
00:06:26.600 --> 00:06:27.000
 file.

134
00:06:27.700 --> 00:06:30.500
We get the same we get the original file.

135
00:06:32.800 --> 00:06:35.300
What is the mathematics that concerns or where's the

136
00:06:35.300 --> 00:06:36.800
 mathematics that you would need to understand to?

137
00:06:39.400 --> 00:06:39.800
read and

138
00:06:40.600 --> 00:06:41.100
implement

139
00:06:44.500 --> 00:06:47.700
compression. Well, the prerequis the prerequisite

140
00:06:47.700 --> 00:06:49.300
 is relations, which we'll look at in a moment.

141
00:06:51.100 --> 00:06:54.700
functions have very wide uses functions

142
00:06:54.700 --> 00:06:54.900
 are

143
00:06:56.100 --> 00:06:59.100
Very fundamental, but if I can give you one of

144
00:06:59.100 --> 00:07:01.200
 many instances it would be abstraction.

145
00:07:02.500 --> 00:07:05.800
Functions in programming at least allow you to abstract away.

146
00:07:09.400 --> 00:07:12.600
Sequences of code or sets of instructions which we

147
00:07:12.600 --> 00:07:15.100
 call algorithm for later use and then you can

148
00:07:15.100 --> 00:07:17.500
 take multiple functions abstract them again.

149
00:07:19.200 --> 00:07:23.100
Into a super function if you like, but that's

150
00:07:22.100 --> 00:07:25.400
 not the best word. What I'm referring to is a

151
00:07:25.400 --> 00:07:25.600
 class.

152
00:07:26.500 --> 00:07:28.000
classes allow you to

153
00:07:32.300 --> 00:07:35.200
Do object oriented programming so the

154
00:07:35.200 --> 00:07:38.300
 larger your application gets the larger your program becomes?

155
00:07:39.200 --> 00:07:42.500
You want to introduce more and more abstractions and functions allow

156
00:07:42.500 --> 00:07:44.000
 they do that very effectively.

157
00:07:44.700 --> 00:07:46.700
And then of course counting which I said.

158
00:07:49.300 --> 00:07:51.400
Is another name for combinatorics?

159
00:07:52.200 --> 00:07:53.400
And combinator by the way.

160
00:07:54.400 --> 00:07:58.200
Discrete mathematics. Once again, according to the Princeton

161
00:07:57.200 --> 00:08:00.800
 companion to mathematics discrete mathematics

162
00:08:00.800 --> 00:08:02.800
 is sometimes known as carbonatorics.

163
00:08:03.800 --> 00:08:06.800
Because this mathematical Branch this discrete mathematics.

164
00:08:07.900 --> 00:08:09.600
Is about using clever.

165
00:08:10.500 --> 00:08:11.300
It's about using.

166
00:08:13.300 --> 00:08:14.500
different techniques

167
00:08:18.800 --> 00:08:19.900
to represent numbers

168
00:08:21.800 --> 00:08:23.100
to reduce complexities

169
00:08:25.300 --> 00:08:28.700
to know the different number of ways in which

170
00:08:28.700 --> 00:08:30.700
 mathematical objects can be arranged.

171
00:08:32.800 --> 00:08:35.700
And of course one example, I put here is approximation

172
00:08:35.700 --> 00:08:40.000
 how to approximate a very large number of continuous

173
00:08:38.100 --> 00:08:41.900
 number using bits,

174
00:08:41.900 --> 00:08:43.800
 which is what computers do after all.

175
00:08:45.100 --> 00:08:47.100
So these are all the small.

176
00:08:49.100 --> 00:08:50.600
number of

177
00:08:55.700 --> 00:08:57.600
things that you would be able to understand if you

178
00:09:01.400 --> 00:09:02.800
Are able to read and understand?

179
00:09:04.100 --> 00:09:05.000
the items on the left

180
00:09:06.300 --> 00:09:09.400
if you want to be perfect if you want to be able to work in

181
00:09:09.400 --> 00:09:09.900
 these areas.

182
00:09:11.200 --> 00:09:12.900
Then what you see on the left is a prerequisite.

183
00:09:14.400 --> 00:09:14.400
All right.
